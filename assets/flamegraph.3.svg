<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="80908"><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (29 samples, 0.04%)</title><rect x="7.6667%" y="229" width="0.0358%" height="15" fill="rgb(227,0,7)" fg:x="6203" fg:w="29"/><text x="7.9167%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (29 samples, 0.04%)</title><rect x="7.6667%" y="213" width="0.0358%" height="15" fill="rgb(217,0,24)" fg:x="6203" fg:w="29"/><text x="7.9167%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.04%)</title><rect x="7.6667%" y="197" width="0.0358%" height="15" fill="rgb(221,193,54)" fg:x="6203" fg:w="29"/><text x="7.9167%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,732 samples, 2.14%)</title><rect x="7.7026%" y="229" width="2.1407%" height="15" fill="rgb(248,212,6)" fg:x="6232" fg:w="1732"/><text x="7.9526%" y="239.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,732 samples, 2.14%)</title><rect x="7.7026%" y="213" width="2.1407%" height="15" fill="rgb(208,68,35)" fg:x="6232" fg:w="1732"/><text x="7.9526%" y="223.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,732 samples, 2.14%)</title><rect x="7.7026%" y="197" width="2.1407%" height="15" fill="rgb(232,128,0)" fg:x="6232" fg:w="1732"/><text x="7.9526%" y="207.50">&lt;..</text></g><g><title>[libc.so.6] (1,516 samples, 1.87%)</title><rect x="7.9695%" y="181" width="1.8737%" height="15" fill="rgb(207,160,47)" fg:x="6448" fg:w="1516"/><text x="8.2195%" y="191.50">[..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (374 samples, 0.46%)</title><rect x="9.8433%" y="229" width="0.4623%" height="15" fill="rgb(228,23,34)" fg:x="7964" fg:w="374"/><text x="10.0933%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (374 samples, 0.46%)</title><rect x="9.8433%" y="213" width="0.4623%" height="15" fill="rgb(218,30,26)" fg:x="7964" fg:w="374"/><text x="10.0933%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (584 samples, 0.72%)</title><rect x="13.6834%" y="197" width="0.7218%" height="15" fill="rgb(220,122,19)" fg:x="11071" fg:w="584"/><text x="13.9334%" y="207.50"></text></g><g><title>core::ptr::align_offset (584 samples, 0.72%)</title><rect x="13.6834%" y="181" width="0.7218%" height="15" fill="rgb(250,228,42)" fg:x="11071" fg:w="584"/><text x="13.9334%" y="191.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (396 samples, 0.49%)</title><rect x="14.4053%" y="197" width="0.4894%" height="15" fill="rgb(240,193,28)" fg:x="11655" fg:w="396"/><text x="14.6553%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (110 samples, 0.14%)</title><rect x="14.7587%" y="181" width="0.1360%" height="15" fill="rgb(216,20,37)" fg:x="11941" fg:w="110"/><text x="15.0087%" y="191.50"></text></g><g><title>core::slice::memchr::memchr_aligned (250 samples, 0.31%)</title><rect x="14.8947%" y="197" width="0.3090%" height="15" fill="rgb(206,188,39)" fg:x="12051" fg:w="250"/><text x="15.1447%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_naive (3,233 samples, 4.00%)</title><rect x="15.2037%" y="197" width="3.9959%" height="15" fill="rgb(217,207,13)" fg:x="12301" fg:w="3233"/><text x="15.4537%" y="207.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (12,939 samples, 15.99%)</title><rect x="3.4187%" y="245" width="15.9922%" height="15" fill="rgb(231,73,38)" fg:x="2766" fg:w="12939"/><text x="3.6687%" y="255.50">&lt;core::str::pattern::Char..</text></g><g><title>core::slice::memchr::memchr (7,367 samples, 9.11%)</title><rect x="10.3055%" y="229" width="9.1054%" height="15" fill="rgb(225,20,46)" fg:x="8338" fg:w="7367"/><text x="10.5555%" y="239.50">core::slice::..</text></g><g><title>core::slice::memchr::memchr_aligned (7,323 samples, 9.05%)</title><rect x="10.3599%" y="213" width="9.0510%" height="15" fill="rgb(210,31,41)" fg:x="8382" fg:w="7323"/><text x="10.6099%" y="223.50">core::slice::..</text></g><g><title>core::slice::memchr::repeat_byte (171 samples, 0.21%)</title><rect x="19.1996%" y="197" width="0.2114%" height="15" fill="rgb(221,200,47)" fg:x="15534" fg:w="171"/><text x="19.4496%" y="207.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,059 samples, 18.61%)</title><rect x="0.8269%" y="277" width="18.6125%" height="15" fill="rgb(226,26,5)" fg:x="669" fg:w="15059"/><text x="1.0769%" y="287.50">&lt;core::str::iter::Split&lt;P&gt; as..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (15,059 samples, 18.61%)</title><rect x="0.8269%" y="261" width="18.6125%" height="15" fill="rgb(249,33,26)" fg:x="669" fg:w="15059"/><text x="1.0769%" y="271.50">core::str::iter::SplitInterna..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (22 samples, 0.03%)</title><rect x="19.4122%" y="245" width="0.0272%" height="15" fill="rgb(235,183,28)" fg:x="15706" fg:w="22"/><text x="19.6622%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (22 samples, 0.03%)</title><rect x="19.4122%" y="229" width="0.0272%" height="15" fill="rgb(221,5,38)" fg:x="15706" fg:w="22"/><text x="19.6622%" y="239.50"></text></g><g><title>brc_rust::main (16 samples, 0.02%)</title><rect x="19.4406%" y="277" width="0.0198%" height="15" fill="rgb(247,18,42)" fg:x="15729" fg:w="16"/><text x="19.6906%" y="287.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (322 samples, 0.40%)</title><rect x="19.4604%" y="277" width="0.3980%" height="15" fill="rgb(241,131,45)" fg:x="15745" fg:w="322"/><text x="19.7104%" y="287.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (335 samples, 0.41%)</title><rect x="19.8584%" y="277" width="0.4141%" height="15" fill="rgb(249,31,29)" fg:x="16067" fg:w="335"/><text x="20.1084%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (266 samples, 0.33%)</title><rect x="20.2724%" y="277" width="0.3288%" height="15" fill="rgb(225,111,53)" fg:x="16402" fg:w="266"/><text x="20.5224%" y="287.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (295 samples, 0.36%)</title><rect x="21.7012%" y="245" width="0.3646%" height="15" fill="rgb(238,160,17)" fg:x="17558" fg:w="295"/><text x="21.9512%" y="255.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (191 samples, 0.24%)</title><rect x="26.3386%" y="213" width="0.2361%" height="15" fill="rgb(214,148,48)" fg:x="21310" fg:w="191"/><text x="26.5886%" y="223.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (18 samples, 0.02%)</title><rect x="26.5746%" y="213" width="0.0222%" height="15" fill="rgb(232,36,49)" fg:x="21501" fg:w="18"/><text x="26.8246%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,729 samples, 4.61%)</title><rect x="26.5969%" y="213" width="4.6089%" height="15" fill="rgb(209,103,24)" fg:x="21519" fg:w="3729"/><text x="26.8469%" y="223.50">&lt;f32 ..</text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (4,422 samples, 5.47%)</title><rect x="25.8491%" y="229" width="5.4655%" height="15" fill="rgb(229,88,8)" fg:x="20914" fg:w="4422"/><text x="26.0991%" y="239.50">core::n..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (88 samples, 0.11%)</title><rect x="31.2058%" y="213" width="0.1088%" height="15" fill="rgb(213,181,19)" fg:x="25248" fg:w="88"/><text x="31.4558%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (173 samples, 0.21%)</title><rect x="32.6123%" y="213" width="0.2138%" height="15" fill="rgb(254,191,54)" fg:x="26386" fg:w="173"/><text x="32.8623%" y="223.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (37 samples, 0.05%)</title><rect x="37.8628%" y="165" width="0.0457%" height="15" fill="rgb(241,83,37)" fg:x="30634" fg:w="37"/><text x="38.1128%" y="175.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (2,154 samples, 2.66%)</title><rect x="35.6467%" y="181" width="2.6623%" height="15" fill="rgb(233,36,39)" fg:x="28841" fg:w="2154"/><text x="35.8967%" y="191.50">&lt;[..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::{{closure}} (324 samples, 0.40%)</title><rect x="37.9085%" y="165" width="0.4005%" height="15" fill="rgb(226,3,54)" fg:x="30671" fg:w="324"/><text x="38.1585%" y="175.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (3,868 samples, 4.78%)</title><rect x="34.0819%" y="197" width="4.7807%" height="15" fill="rgb(245,192,40)" fg:x="27575" fg:w="3868"/><text x="34.3319%" y="207.50">core::..</text></g><g><title>core::num::dec2flt::parse::parse_number (448 samples, 0.55%)</title><rect x="38.3089%" y="181" width="0.5537%" height="15" fill="rgb(238,167,29)" fg:x="30995" fg:w="448"/><text x="38.5589%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (6,108 samples, 7.55%)</title><rect x="31.3146%" y="229" width="7.5493%" height="15" fill="rgb(232,182,51)" fg:x="25336" fg:w="6108"/><text x="31.5646%" y="239.50">core::num:..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (4,885 samples, 6.04%)</title><rect x="32.8262%" y="213" width="6.0377%" height="15" fill="rgb(231,60,39)" fg:x="26559" fg:w="4885"/><text x="33.0762%" y="223.50">core::nu..</text></g><g><title>core::str::&lt;impl str&gt;::parse (15,065 samples, 18.62%)</title><rect x="20.6012%" y="277" width="18.6199%" height="15" fill="rgb(208,69,12)" fg:x="16668" fg:w="15065"/><text x="20.8512%" y="287.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (14,980 samples, 18.51%)</title><rect x="20.7062%" y="261" width="18.5149%" height="15" fill="rgb(235,93,37)" fg:x="16753" fg:w="14980"/><text x="20.9562%" y="271.50">core::num::dec2flt::&lt;impl cor..</text></g><g><title>core::num::dec2flt::dec2flt (13,880 samples, 17.16%)</title><rect x="22.0658%" y="245" width="17.1553%" height="15" fill="rgb(213,116,39)" fg:x="17853" fg:w="13880"/><text x="22.3158%" y="255.50">core::num::dec2flt::dec2flt</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (289 samples, 0.36%)</title><rect x="38.8639%" y="229" width="0.3572%" height="15" fill="rgb(222,207,29)" fg:x="31444" fg:w="289"/><text x="39.1139%" y="239.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (54 samples, 0.07%)</title><rect x="40.8637%" y="261" width="0.0667%" height="15" fill="rgb(206,96,30)" fg:x="33062" fg:w="54"/><text x="41.1137%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (251 samples, 0.31%)</title><rect x="40.9304%" y="261" width="0.3102%" height="15" fill="rgb(218,138,4)" fg:x="33116" fg:w="251"/><text x="41.1804%" y="271.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (94 samples, 0.12%)</title><rect x="47.6146%" y="245" width="0.1162%" height="15" fill="rgb(250,191,14)" fg:x="38524" fg:w="94"/><text x="47.8646%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (94 samples, 0.12%)</title><rect x="47.6146%" y="229" width="0.1162%" height="15" fill="rgb(239,60,40)" fg:x="38524" fg:w="94"/><text x="47.8646%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (94 samples, 0.12%)</title><rect x="47.6146%" y="213" width="0.1162%" height="15" fill="rgb(206,27,48)" fg:x="38524" fg:w="94"/><text x="47.8646%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,350 samples, 2.90%)</title><rect x="47.7308%" y="245" width="2.9045%" height="15" fill="rgb(225,35,8)" fg:x="38618" fg:w="2350"/><text x="47.9808%" y="255.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2,350 samples, 2.90%)</title><rect x="47.7308%" y="229" width="2.9045%" height="15" fill="rgb(250,213,24)" fg:x="38618" fg:w="2350"/><text x="47.9808%" y="239.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,350 samples, 2.90%)</title><rect x="47.7308%" y="213" width="2.9045%" height="15" fill="rgb(247,123,22)" fg:x="38618" fg:w="2350"/><text x="47.9808%" y="223.50">&lt;[..</text></g><g><title>[libc.so.6] (1,519 samples, 1.88%)</title><rect x="48.7578%" y="197" width="1.8774%" height="15" fill="rgb(231,138,38)" fg:x="39449" fg:w="1519"/><text x="49.0078%" y="207.50">[..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (979 samples, 1.21%)</title><rect x="50.6353%" y="245" width="1.2100%" height="15" fill="rgb(231,145,46)" fg:x="40968" fg:w="979"/><text x="50.8853%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (979 samples, 1.21%)</title><rect x="50.6353%" y="229" width="1.2100%" height="15" fill="rgb(251,118,11)" fg:x="40968" fg:w="979"/><text x="50.8853%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (156 samples, 0.19%)</title><rect x="52.8922%" y="213" width="0.1928%" height="15" fill="rgb(217,147,25)" fg:x="42794" fg:w="156"/><text x="53.1422%" y="223.50"></text></g><g><title>core::ptr::align_offset (156 samples, 0.19%)</title><rect x="52.8922%" y="197" width="0.1928%" height="15" fill="rgb(247,81,37)" fg:x="42794" fg:w="156"/><text x="53.1422%" y="207.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (53 samples, 0.07%)</title><rect x="53.0850%" y="213" width="0.0655%" height="15" fill="rgb(209,12,38)" fg:x="42950" fg:w="53"/><text x="53.3350%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (11 samples, 0.01%)</title><rect x="53.1369%" y="197" width="0.0136%" height="15" fill="rgb(227,1,9)" fg:x="42992" fg:w="11"/><text x="53.3869%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_aligned (30 samples, 0.04%)</title><rect x="53.1505%" y="213" width="0.0371%" height="15" fill="rgb(248,47,43)" fg:x="43003" fg:w="30"/><text x="53.4005%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,058 samples, 1.31%)</title><rect x="53.1876%" y="213" width="1.3077%" height="15" fill="rgb(221,10,30)" fg:x="43033" fg:w="1058"/><text x="53.4376%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,829 samples, 2.26%)</title><rect x="52.2804%" y="229" width="2.2606%" height="15" fill="rgb(210,229,1)" fg:x="42299" fg:w="1829"/><text x="52.5304%" y="239.50">c..</text></g><g><title>core::slice::memchr::repeat_byte (37 samples, 0.05%)</title><rect x="54.4952%" y="213" width="0.0457%" height="15" fill="rgb(222,148,37)" fg:x="44091" fg:w="37"/><text x="54.7452%" y="223.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (13,214 samples, 16.33%)</title><rect x="41.2407%" y="261" width="16.3321%" height="15" fill="rgb(234,67,33)" fg:x="33367" fg:w="13214"/><text x="41.4907%" y="271.50">&lt;core::str::pattern::Char..</text></g><g><title>core::slice::memchr::memchr (4,634 samples, 5.73%)</title><rect x="51.8453%" y="245" width="5.7275%" height="15" fill="rgb(247,98,35)" fg:x="41947" fg:w="4634"/><text x="52.0953%" y="255.50">core::s..</text></g><g><title>core::slice::memchr::memchr_naive (2,453 samples, 3.03%)</title><rect x="54.5410%" y="229" width="3.0318%" height="15" fill="rgb(247,138,52)" fg:x="44128" fg:w="2453"/><text x="54.7910%" y="239.50">cor..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (14,930 samples, 18.45%)</title><rect x="39.2211%" y="277" width="18.4531%" height="15" fill="rgb(213,79,30)" fg:x="31733" fg:w="14930"/><text x="39.4711%" y="287.50">core::str::&lt;impl str&gt;::split_..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (82 samples, 0.10%)</title><rect x="57.5728%" y="261" width="0.1013%" height="15" fill="rgb(246,177,23)" fg:x="46581" fg:w="82"/><text x="57.8228%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (82 samples, 0.10%)</title><rect x="57.5728%" y="245" width="0.1013%" height="15" fill="rgb(230,62,27)" fg:x="46581" fg:w="82"/><text x="57.8228%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (82 samples, 0.10%)</title><rect x="57.5728%" y="229" width="0.1013%" height="15" fill="rgb(216,154,8)" fg:x="46581" fg:w="82"/><text x="57.8228%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (59 samples, 0.07%)</title><rect x="57.6012%" y="213" width="0.0729%" height="15" fill="rgb(244,35,45)" fg:x="46604" fg:w="59"/><text x="57.8512%" y="223.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (257 samples, 0.32%)</title><rect x="58.3527%" y="245" width="0.3176%" height="15" fill="rgb(251,115,12)" fg:x="47212" fg:w="257"/><text x="58.6027%" y="255.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (257 samples, 0.32%)</title><rect x="58.3527%" y="229" width="0.3176%" height="15" fill="rgb(240,54,50)" fg:x="47212" fg:w="257"/><text x="58.6027%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (257 samples, 0.32%)</title><rect x="58.3527%" y="213" width="0.3176%" height="15" fill="rgb(233,84,52)" fg:x="47212" fg:w="257"/><text x="58.6027%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (257 samples, 0.32%)</title><rect x="58.3527%" y="197" width="0.3176%" height="15" fill="rgb(207,117,47)" fg:x="47212" fg:w="257"/><text x="58.6027%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (257 samples, 0.32%)</title><rect x="58.3527%" y="181" width="0.3176%" height="15" fill="rgb(249,43,39)" fg:x="47212" fg:w="257"/><text x="58.6027%" y="191.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (257 samples, 0.32%)</title><rect x="58.3527%" y="165" width="0.3176%" height="15" fill="rgb(209,38,44)" fg:x="47212" fg:w="257"/><text x="58.6027%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (256 samples, 0.32%)</title><rect x="58.3539%" y="149" width="0.3164%" height="15" fill="rgb(236,212,23)" fg:x="47213" fg:w="256"/><text x="58.6039%" y="159.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (261 samples, 0.32%)</title><rect x="58.6703%" y="197" width="0.3226%" height="15" fill="rgb(242,79,21)" fg:x="47469" fg:w="261"/><text x="58.9203%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (261 samples, 0.32%)</title><rect x="58.6703%" y="181" width="0.3226%" height="15" fill="rgb(211,96,35)" fg:x="47469" fg:w="261"/><text x="58.9203%" y="191.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (261 samples, 0.32%)</title><rect x="58.6703%" y="165" width="0.3226%" height="15" fill="rgb(253,215,40)" fg:x="47469" fg:w="261"/><text x="58.9203%" y="175.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (712 samples, 0.88%)</title><rect x="58.6703%" y="213" width="0.8800%" height="15" fill="rgb(211,81,21)" fg:x="47469" fg:w="712"/><text x="58.9203%" y="223.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (451 samples, 0.56%)</title><rect x="58.9929%" y="197" width="0.5574%" height="15" fill="rgb(208,190,38)" fg:x="47730" fg:w="451"/><text x="59.2429%" y="207.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (451 samples, 0.56%)</title><rect x="58.9929%" y="181" width="0.5574%" height="15" fill="rgb(235,213,38)" fg:x="47730" fg:w="451"/><text x="59.2429%" y="191.50"></text></g><g><title>core::str::validations::next_code_point_reverse (450 samples, 0.56%)</title><rect x="58.9942%" y="165" width="0.5562%" height="15" fill="rgb(237,122,38)" fg:x="47731" fg:w="450"/><text x="59.2442%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (980 samples, 1.21%)</title><rect x="58.6703%" y="245" width="1.2113%" height="15" fill="rgb(244,218,35)" fg:x="47469" fg:w="980"/><text x="58.9203%" y="255.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (980 samples, 1.21%)</title><rect x="58.6703%" y="229" width="1.2113%" height="15" fill="rgb(240,68,47)" fg:x="47469" fg:w="980"/><text x="58.9203%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (268 samples, 0.33%)</title><rect x="59.5504%" y="213" width="0.3312%" height="15" fill="rgb(210,16,53)" fg:x="48181" fg:w="268"/><text x="59.8004%" y="223.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (287 samples, 0.35%)</title><rect x="59.8865%" y="197" width="0.3547%" height="15" fill="rgb(235,124,12)" fg:x="48453" fg:w="287"/><text x="60.1365%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (287 samples, 0.35%)</title><rect x="59.8865%" y="181" width="0.3547%" height="15" fill="rgb(224,169,11)" fg:x="48453" fg:w="287"/><text x="60.1365%" y="191.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (287 samples, 0.35%)</title><rect x="59.8865%" y="165" width="0.3547%" height="15" fill="rgb(250,166,2)" fg:x="48453" fg:w="287"/><text x="60.1365%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (32 samples, 0.04%)</title><rect x="60.2437%" y="165" width="0.0396%" height="15" fill="rgb(242,216,29)" fg:x="48742" fg:w="32"/><text x="60.4937%" y="175.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.08%)</title><rect x="60.2413%" y="197" width="0.0828%" height="15" fill="rgb(230,116,27)" fg:x="48740" fg:w="67"/><text x="60.4913%" y="207.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.08%)</title><rect x="60.2437%" y="181" width="0.0803%" height="15" fill="rgb(228,99,48)" fg:x="48742" fg:w="65"/><text x="60.4937%" y="191.50"></text></g><g><title>core::str::validations::next_code_point (33 samples, 0.04%)</title><rect x="60.2833%" y="165" width="0.0408%" height="15" fill="rgb(253,11,6)" fg:x="48774" fg:w="33"/><text x="60.5333%" y="175.50"></text></g><g><title>core::str::validations::utf8_first_byte (11 samples, 0.01%)</title><rect x="60.3105%" y="149" width="0.0136%" height="15" fill="rgb(247,143,39)" fg:x="48796" fg:w="11"/><text x="60.5605%" y="159.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (360 samples, 0.44%)</title><rect x="59.8816%" y="213" width="0.4449%" height="15" fill="rgb(236,97,10)" fg:x="48449" fg:w="360"/><text x="60.1316%" y="223.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (399 samples, 0.49%)</title><rect x="59.8816%" y="245" width="0.4932%" height="15" fill="rgb(233,208,19)" fg:x="48449" fg:w="399"/><text x="60.1316%" y="255.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (399 samples, 0.49%)</title><rect x="59.8816%" y="229" width="0.4932%" height="15" fill="rgb(216,164,2)" fg:x="48449" fg:w="399"/><text x="60.1316%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (39 samples, 0.05%)</title><rect x="60.3265%" y="213" width="0.0482%" height="15" fill="rgb(220,129,5)" fg:x="48809" fg:w="39"/><text x="60.5765%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (2,407 samples, 2.97%)</title><rect x="57.6741%" y="277" width="2.9750%" height="15" fill="rgb(242,17,10)" fg:x="46663" fg:w="2407"/><text x="57.9241%" y="287.50">cor..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2,168 samples, 2.68%)</title><rect x="57.9695%" y="261" width="2.6796%" height="15" fill="rgb(242,107,0)" fg:x="46902" fg:w="2168"/><text x="58.2195%" y="271.50">co..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (222 samples, 0.27%)</title><rect x="60.3747%" y="245" width="0.2744%" height="15" fill="rgb(251,28,31)" fg:x="48848" fg:w="222"/><text x="60.6247%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (222 samples, 0.27%)</title><rect x="60.3747%" y="229" width="0.2744%" height="15" fill="rgb(233,223,10)" fg:x="48848" fg:w="222"/><text x="60.6247%" y="239.50"></text></g><g><title>__mod_lruvec_page_state (17 samples, 0.02%)</title><rect x="62.7107%" y="85" width="0.0210%" height="15" fill="rgb(215,21,27)" fg:x="50738" fg:w="17"/><text x="62.9607%" y="95.50"></text></g><g><title>lock_page_memcg (10 samples, 0.01%)</title><rect x="62.7330%" y="85" width="0.0124%" height="15" fill="rgb(232,23,21)" fg:x="50756" fg:w="10"/><text x="62.9830%" y="95.50"></text></g><g><title>__mod_memcg_lruvec_state (30 samples, 0.04%)</title><rect x="62.8937%" y="37" width="0.0371%" height="15" fill="rgb(244,5,23)" fg:x="50886" fg:w="30"/><text x="63.1437%" y="47.50"></text></g><g><title>__mod_node_page_state (12 samples, 0.01%)</title><rect x="62.9307%" y="37" width="0.0148%" height="15" fill="rgb(226,81,46)" fg:x="50916" fg:w="12"/><text x="63.1807%" y="47.50"></text></g><g><title>__mod_lruvec_state (59 samples, 0.07%)</title><rect x="62.8764%" y="53" width="0.0729%" height="15" fill="rgb(247,70,30)" fg:x="50872" fg:w="59"/><text x="63.1264%" y="63.50"></text></g><g><title>__mod_lruvec_page_state (106 samples, 0.13%)</title><rect x="62.8269%" y="69" width="0.1310%" height="15" fill="rgb(212,68,19)" fg:x="50832" fg:w="106"/><text x="63.0769%" y="79.50"></text></g><g><title>page_add_file_rmap (185 samples, 0.23%)</title><rect x="62.7453%" y="85" width="0.2287%" height="15" fill="rgb(240,187,13)" fg:x="50766" fg:w="185"/><text x="62.9953%" y="95.50"></text></g><g><title>percpu_counter_add_batch (17 samples, 0.02%)</title><rect x="62.9740%" y="85" width="0.0210%" height="15" fill="rgb(223,113,26)" fg:x="50951" fg:w="17"/><text x="63.2240%" y="95.50"></text></g><g><title>do_set_pte (316 samples, 0.39%)</title><rect x="62.6230%" y="101" width="0.3906%" height="15" fill="rgb(206,192,2)" fg:x="50667" fg:w="316"/><text x="62.8730%" y="111.50"></text></g><g><title>unlock_page_memcg (12 samples, 0.01%)</title><rect x="62.9987%" y="85" width="0.0148%" height="15" fill="rgb(241,108,4)" fg:x="50971" fg:w="12"/><text x="63.2487%" y="95.50"></text></g><g><title>next_uptodate_page (31 samples, 0.04%)</title><rect x="63.0185%" y="101" width="0.0383%" height="15" fill="rgb(247,173,49)" fg:x="50987" fg:w="31"/><text x="63.2685%" y="111.50"></text></g><g><title>filemap_map_pages (475 samples, 0.59%)</title><rect x="62.5068%" y="117" width="0.5871%" height="15" fill="rgb(224,114,35)" fg:x="50573" fg:w="475"/><text x="62.7568%" y="127.50"></text></g><g><title>xas_find (21 samples, 0.03%)</title><rect x="63.0679%" y="101" width="0.0260%" height="15" fill="rgb(245,159,27)" fg:x="51027" fg:w="21"/><text x="63.3179%" y="111.50"></text></g><g><title>xas_load (9 samples, 0.01%)</title><rect x="63.0828%" y="85" width="0.0111%" height="15" fill="rgb(245,172,44)" fg:x="51039" fg:w="9"/><text x="63.3328%" y="95.50"></text></g><g><title>do_read_fault (495 samples, 0.61%)</title><rect x="62.4969%" y="133" width="0.6118%" height="15" fill="rgb(236,23,11)" fg:x="50565" fg:w="495"/><text x="62.7469%" y="143.50"></text></g><g><title>__handle_mm_fault (527 samples, 0.65%)</title><rect x="62.4586%" y="181" width="0.6514%" height="15" fill="rgb(205,117,38)" fg:x="50534" fg:w="527"/><text x="62.7086%" y="191.50"></text></g><g><title>handle_pte_fault (506 samples, 0.63%)</title><rect x="62.4846%" y="165" width="0.6254%" height="15" fill="rgb(237,72,25)" fg:x="50555" fg:w="506"/><text x="62.7346%" y="175.50"></text></g><g><title>do_fault (498 samples, 0.62%)</title><rect x="62.4944%" y="149" width="0.6155%" height="15" fill="rgb(244,70,9)" fg:x="50563" fg:w="498"/><text x="62.7444%" y="159.50"></text></g><g><title>count_memcg_events.constprop.0 (9 samples, 0.01%)</title><rect x="63.1100%" y="181" width="0.0111%" height="15" fill="rgb(217,125,39)" fg:x="51061" fg:w="9"/><text x="63.3600%" y="191.50"></text></g><g><title>handle_mm_fault (547 samples, 0.68%)</title><rect x="62.4524%" y="197" width="0.6761%" height="15" fill="rgb(235,36,10)" fg:x="50529" fg:w="547"/><text x="62.7024%" y="207.50"></text></g><g><title>lock_mm_and_find_vma (12 samples, 0.01%)</title><rect x="63.1285%" y="197" width="0.0148%" height="15" fill="rgb(251,123,47)" fg:x="51076" fg:w="12"/><text x="63.3785%" y="207.50"></text></g><g><title>do_user_addr_fault (624 samples, 0.77%)</title><rect x="62.3733%" y="213" width="0.7712%" height="15" fill="rgb(221,13,13)" fg:x="50465" fg:w="624"/><text x="62.6233%" y="223.50"></text></g><g><title>asm_exc_page_fault (626 samples, 0.77%)</title><rect x="62.3733%" y="245" width="0.7737%" height="15" fill="rgb(238,131,9)" fg:x="50465" fg:w="626"/><text x="62.6233%" y="255.50"></text></g><g><title>exc_page_fault (626 samples, 0.77%)</title><rect x="62.3733%" y="229" width="0.7737%" height="15" fill="rgb(211,50,8)" fg:x="50465" fg:w="626"/><text x="62.6233%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (2,114 samples, 2.61%)</title><rect x="60.6491%" y="277" width="2.6128%" height="15" fill="rgb(245,182,24)" fg:x="49070" fg:w="2114"/><text x="60.8991%" y="287.50">co..</text></g><g><title>core::str::validations::run_utf8_validation (2,114 samples, 2.61%)</title><rect x="60.6491%" y="261" width="2.6128%" height="15" fill="rgb(242,14,37)" fg:x="49070" fg:w="2114"/><text x="60.8991%" y="271.50">co..</text></g><g><title>core::str::validations::utf8_char_width (91 samples, 0.11%)</title><rect x="63.1495%" y="245" width="0.1125%" height="15" fill="rgb(246,228,12)" fg:x="51093" fg:w="91"/><text x="63.3995%" y="255.50"></text></g><g><title>brc_rust::main (291 samples, 0.36%)</title><rect x="63.2620%" y="245" width="0.3597%" height="15" fill="rgb(213,55,15)" fg:x="51184" fg:w="291"/><text x="63.5120%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (604 samples, 0.75%)</title><rect x="66.6498%" y="133" width="0.7465%" height="15" fill="rgb(209,9,3)" fg:x="53925" fg:w="604"/><text x="66.8998%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,374 samples, 1.70%)</title><rect x="66.0602%" y="149" width="1.6982%" height="15" fill="rgb(230,59,30)" fg:x="53448" fg:w="1374"/><text x="66.3102%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (293 samples, 0.36%)</title><rect x="67.3963%" y="133" width="0.3621%" height="15" fill="rgb(209,121,21)" fg:x="54529" fg:w="293"/><text x="67.6463%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,114 samples, 3.85%)</title><rect x="68.3270%" y="133" width="3.8488%" height="15" fill="rgb(220,109,13)" fg:x="55282" fg:w="3114"/><text x="68.5770%" y="143.50">core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6,879 samples, 8.50%)</title><rect x="64.3336%" y="165" width="8.5022%" height="15" fill="rgb(232,18,1)" fg:x="52051" fg:w="6879"/><text x="64.5836%" y="175.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,108 samples, 5.08%)</title><rect x="67.7584%" y="149" width="5.0774%" height="15" fill="rgb(215,41,42)" fg:x="54822" fg:w="4108"/><text x="68.0084%" y="159.50">&lt;core:..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (534 samples, 0.66%)</title><rect x="72.1758%" y="133" width="0.6600%" height="15" fill="rgb(224,123,36)" fg:x="58396" fg:w="534"/><text x="72.4258%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8,316 samples, 10.28%)</title><rect x="64.3336%" y="197" width="10.2783%" height="15" fill="rgb(240,125,3)" fg:x="52051" fg:w="8316"/><text x="64.5836%" y="207.50">&lt;std::collectio..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8,316 samples, 10.28%)</title><rect x="64.3336%" y="181" width="10.2783%" height="15" fill="rgb(205,98,50)" fg:x="52051" fg:w="8316"/><text x="64.5836%" y="191.50">&lt;core::hash::si..</text></g><g><title>core::hash::BuildHasher::hash_one (1,437 samples, 1.78%)</title><rect x="72.8358%" y="165" width="1.7761%" height="15" fill="rgb(205,185,37)" fg:x="58930" fg:w="1437"/><text x="73.0858%" y="175.50">c..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (282 samples, 0.35%)</title><rect x="74.6119%" y="197" width="0.3485%" height="15" fill="rgb(238,207,15)" fg:x="60367" fg:w="282"/><text x="74.8619%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (281 samples, 0.35%)</title><rect x="74.6131%" y="181" width="0.3473%" height="15" fill="rgb(213,199,42)" fg:x="60368" fg:w="281"/><text x="74.8631%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (281 samples, 0.35%)</title><rect x="74.6131%" y="165" width="0.3473%" height="15" fill="rgb(235,201,11)" fg:x="60368" fg:w="281"/><text x="74.8631%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (281 samples, 0.35%)</title><rect x="74.6131%" y="149" width="0.3473%" height="15" fill="rgb(207,46,11)" fg:x="60368" fg:w="281"/><text x="74.8631%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (305 samples, 0.38%)</title><rect x="75.9208%" y="101" width="0.3770%" height="15" fill="rgb(241,35,35)" fg:x="61426" fg:w="305"/><text x="76.1708%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (211 samples, 0.26%)</title><rect x="76.4893%" y="85" width="0.2608%" height="15" fill="rgb(243,32,47)" fg:x="61886" fg:w="211"/><text x="76.7393%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (461 samples, 0.57%)</title><rect x="76.2978%" y="101" width="0.5698%" height="15" fill="rgb(247,202,23)" fg:x="61731" fg:w="461"/><text x="76.5478%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (95 samples, 0.12%)</title><rect x="76.7501%" y="85" width="0.1174%" height="15" fill="rgb(219,102,11)" fg:x="62097" fg:w="95"/><text x="77.0001%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (146 samples, 0.18%)</title><rect x="77.5263%" y="85" width="0.1805%" height="15" fill="rgb(243,110,44)" fg:x="62725" fg:w="146"/><text x="77.7763%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (710 samples, 0.88%)</title><rect x="76.8676%" y="101" width="0.8775%" height="15" fill="rgb(222,74,54)" fg:x="62192" fg:w="710"/><text x="77.1176%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.04%)</title><rect x="77.7068%" y="85" width="0.0383%" height="15" fill="rgb(216,99,12)" fg:x="62871" fg:w="31"/><text x="77.9568%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,956 samples, 2.42%)</title><rect x="75.3300%" y="117" width="2.4176%" height="15" fill="rgb(226,22,26)" fg:x="60948" fg:w="1956"/><text x="75.5800%" y="127.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (32 samples, 0.04%)</title><rect x="79.3580%" y="85" width="0.0396%" height="15" fill="rgb(217,163,10)" fg:x="64207" fg:w="32"/><text x="79.6080%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (70 samples, 0.09%)</title><rect x="79.4804%" y="69" width="0.0865%" height="15" fill="rgb(213,25,53)" fg:x="64306" fg:w="70"/><text x="79.7304%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (229 samples, 0.28%)</title><rect x="79.3976%" y="85" width="0.2830%" height="15" fill="rgb(252,105,26)" fg:x="64239" fg:w="229"/><text x="79.6476%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (92 samples, 0.11%)</title><rect x="79.5669%" y="69" width="0.1137%" height="15" fill="rgb(220,39,43)" fg:x="64376" fg:w="92"/><text x="79.8169%" y="79.50"></text></g><g><title>core::cmp::min (101 samples, 0.12%)</title><rect x="79.6806%" y="85" width="0.1248%" height="15" fill="rgb(229,68,48)" fg:x="64468" fg:w="101"/><text x="79.9306%" y="95.50"></text></g><g><title>core::cmp::Ord::min (101 samples, 0.12%)</title><rect x="79.6806%" y="69" width="0.1248%" height="15" fill="rgb(252,8,32)" fg:x="64468" fg:w="101"/><text x="79.9306%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (101 samples, 0.12%)</title><rect x="79.6806%" y="53" width="0.1248%" height="15" fill="rgb(223,20,43)" fg:x="64468" fg:w="101"/><text x="79.9306%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (13,766 samples, 17.01%)</title><rect x="63.6365%" y="229" width="17.0144%" height="15" fill="rgb(229,81,49)" fg:x="51487" fg:w="13766"/><text x="63.8865%" y="239.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (13,764 samples, 17.01%)</title><rect x="63.6389%" y="213" width="17.0119%" height="15" fill="rgb(236,28,36)" fg:x="51489" fg:w="13764"/><text x="63.8889%" y="223.50">core::hash::BuildHasher::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4,598 samples, 5.68%)</title><rect x="74.9679%" y="197" width="5.6830%" height="15" fill="rgb(249,185,26)" fg:x="60655" fg:w="4598"/><text x="75.2179%" y="207.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4,598 samples, 5.68%)</title><rect x="74.9679%" y="181" width="5.6830%" height="15" fill="rgb(249,174,33)" fg:x="60655" fg:w="4598"/><text x="75.2179%" y="191.50">core::h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4,598 samples, 5.68%)</title><rect x="74.9679%" y="165" width="5.6830%" height="15" fill="rgb(233,201,37)" fg:x="60655" fg:w="4598"/><text x="75.2179%" y="175.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4,598 samples, 5.68%)</title><rect x="74.9679%" y="149" width="5.6830%" height="15" fill="rgb(221,78,26)" fg:x="60655" fg:w="4598"/><text x="75.2179%" y="159.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4,598 samples, 5.68%)</title><rect x="74.9679%" y="133" width="5.6830%" height="15" fill="rgb(250,127,30)" fg:x="60655" fg:w="4598"/><text x="75.2179%" y="143.50">&lt;core::..</text></g><g><title>core::hash::Hasher::write_u8 (2,349 samples, 2.90%)</title><rect x="77.7476%" y="117" width="2.9033%" height="15" fill="rgb(230,49,44)" fg:x="62904" fg:w="2349"/><text x="77.9976%" y="127.50">co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,125 samples, 2.63%)</title><rect x="78.0244%" y="101" width="2.6264%" height="15" fill="rgb(229,67,23)" fg:x="63128" fg:w="2125"/><text x="78.2744%" y="111.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (684 samples, 0.85%)</title><rect x="79.8055%" y="85" width="0.8454%" height="15" fill="rgb(249,83,47)" fg:x="64569" fg:w="684"/><text x="80.0555%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,204 samples, 1.49%)</title><rect x="81.4765%" y="181" width="1.4881%" height="15" fill="rgb(215,43,3)" fg:x="65921" fg:w="1204"/><text x="81.7265%" y="191.50"></text></g><g><title>brc_rust::main (1,749 samples, 2.16%)</title><rect x="82.9646%" y="181" width="2.1617%" height="15" fill="rgb(238,154,13)" fg:x="67125" fg:w="1749"/><text x="83.2146%" y="191.50">b..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (7,667 samples, 9.48%)</title><rect x="85.1263%" y="149" width="9.4762%" height="15" fill="rgb(219,56,2)" fg:x="68874" fg:w="7667"/><text x="85.3763%" y="159.50">&lt;Q as hashbrow..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7,667 samples, 9.48%)</title><rect x="85.1263%" y="133" width="9.4762%" height="15" fill="rgb(233,0,4)" fg:x="68874" fg:w="7667"/><text x="85.3763%" y="143.50">core::cmp::imp..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (7,667 samples, 9.48%)</title><rect x="85.1263%" y="117" width="9.4762%" height="15" fill="rgb(235,30,7)" fg:x="68874" fg:w="7667"/><text x="85.3763%" y="127.50">core::str::tra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7,667 samples, 9.48%)</title><rect x="85.1263%" y="101" width="9.4762%" height="15" fill="rgb(250,79,13)" fg:x="68874" fg:w="7667"/><text x="85.3763%" y="111.50">core::cmp::imp..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7,667 samples, 9.48%)</title><rect x="85.1263%" y="85" width="9.4762%" height="15" fill="rgb(211,146,34)" fg:x="68874" fg:w="7667"/><text x="85.3763%" y="95.50">core::slice::c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7,667 samples, 9.48%)</title><rect x="85.1263%" y="69" width="9.4762%" height="15" fill="rgb(228,22,38)" fg:x="68874" fg:w="7667"/><text x="85.3763%" y="79.50">&lt;[A] as core::..</text></g><g><title>[libc.so.6] (5,368 samples, 6.63%)</title><rect x="87.9678%" y="53" width="6.6347%" height="15" fill="rgb(235,168,5)" fg:x="71173" fg:w="5368"/><text x="88.2178%" y="63.50">[libc.so...</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (7,703 samples, 9.52%)</title><rect x="85.1263%" y="165" width="9.5207%" height="15" fill="rgb(221,155,16)" fg:x="68874" fg:w="7703"/><text x="85.3763%" y="175.50">hashbrown::map..</text></g><g><title>brc_rust::main (36 samples, 0.04%)</title><rect x="94.6025%" y="149" width="0.0445%" height="15" fill="rgb(215,215,53)" fg:x="76541" fg:w="36"/><text x="94.8525%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (8,282 samples, 10.24%)</title><rect x="85.1263%" y="181" width="10.2363%" height="15" fill="rgb(223,4,10)" fg:x="68874" fg:w="8282"/><text x="85.3763%" y="191.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (579 samples, 0.72%)</title><rect x="94.6470%" y="165" width="0.7156%" height="15" fill="rgb(234,103,6)" fg:x="76577" fg:w="579"/><text x="94.8970%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (579 samples, 0.72%)</title><rect x="94.6470%" y="149" width="0.7156%" height="15" fill="rgb(227,97,0)" fg:x="76577" fg:w="579"/><text x="94.8970%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (579 samples, 0.72%)</title><rect x="94.6470%" y="133" width="0.7156%" height="15" fill="rgb(234,150,53)" fg:x="76577" fg:w="579"/><text x="94.8970%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (579 samples, 0.72%)</title><rect x="94.6470%" y="117" width="0.7156%" height="15" fill="rgb(228,201,54)" fg:x="76577" fg:w="579"/><text x="94.8970%" y="127.50"></text></g><g><title>brc_rust::main (418 samples, 0.52%)</title><rect x="95.3639%" y="149" width="0.5166%" height="15" fill="rgb(222,22,37)" fg:x="77157" fg:w="418"/><text x="95.6139%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (436 samples, 0.54%)</title><rect x="95.3639%" y="181" width="0.5389%" height="15" fill="rgb(237,53,32)" fg:x="77157" fg:w="436"/><text x="95.6139%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (436 samples, 0.54%)</title><rect x="95.3639%" y="165" width="0.5389%" height="15" fill="rgb(233,25,53)" fg:x="77157" fg:w="436"/><text x="95.6139%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="95.8805%" y="149" width="0.0222%" height="15" fill="rgb(210,40,34)" fg:x="77575" fg:w="18"/><text x="96.1305%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,522 samples, 3.12%)</title><rect x="95.9028%" y="181" width="3.1171%" height="15" fill="rgb(241,220,44)" fg:x="77593" fg:w="2522"/><text x="96.1528%" y="191.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,522 samples, 3.12%)</title><rect x="95.9028%" y="165" width="3.1171%" height="15" fill="rgb(235,28,35)" fg:x="77593" fg:w="2522"/><text x="96.1528%" y="175.50">cor..</text></g><g><title>_start (80,415 samples, 99.39%)</title><rect x="0.0000%" y="549" width="99.3907%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (80,415 samples, 99.39%)</title><rect x="0.0000%" y="533" width="99.3907%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>[libc.so.6] (80,415 samples, 99.39%)</title><rect x="0.0000%" y="517" width="99.3907%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="527.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (80,415 samples, 99.39%)</title><rect x="0.0000%" y="501" width="99.3907%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="511.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (80,415 samples, 99.39%)</title><rect x="0.0000%" y="485" width="99.3907%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (80,415 samples, 99.39%)</title><rect x="0.0000%" y="469" width="99.3907%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (80,415 samples, 99.39%)</title><rect x="0.0000%" y="453" width="99.3907%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (80,415 samples, 99.39%)</title><rect x="0.0000%" y="437" width="99.3907%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (80,415 samples, 99.39%)</title><rect x="0.0000%" y="421" width="99.3907%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (80,415 samples, 99.39%)</title><rect x="0.0000%" y="405" width="99.3907%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (80,415 samples, 99.39%)</title><rect x="0.0000%" y="389" width="99.3907%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (80,415 samples, 99.39%)</title><rect x="0.0000%" y="373" width="99.3907%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (80,415 samples, 99.39%)</title><rect x="0.0000%" y="357" width="99.3907%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (80,415 samples, 99.39%)</title><rect x="0.0000%" y="341" width="99.3907%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (80,415 samples, 99.39%)</title><rect x="0.0000%" y="325" width="99.3907%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (80,415 samples, 99.39%)</title><rect x="0.0000%" y="309" width="99.3907%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>brc_rust::main (80,415 samples, 99.39%)</title><rect x="0.0000%" y="293" width="99.3907%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="80415"/><text x="0.2500%" y="303.50">brc_rust::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (29,231 samples, 36.13%)</title><rect x="63.2620%" y="277" width="36.1287%" height="15" fill="rgb(235,61,29)" fg:x="51184" fg:w="29231"/><text x="63.5120%" y="287.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (29,231 samples, 36.13%)</title><rect x="63.2620%" y="261" width="36.1287%" height="15" fill="rgb(219,207,3)" fg:x="51184" fg:w="29231"/><text x="63.5120%" y="271.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (28,940 samples, 35.77%)</title><rect x="63.6216%" y="245" width="35.7690%" height="15" fill="rgb(222,56,46)" fg:x="51475" fg:w="28940"/><text x="63.8716%" y="255.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (15,162 samples, 18.74%)</title><rect x="80.6509%" y="229" width="18.7398%" height="15" fill="rgb(239,76,54)" fg:x="65253" fg:w="15162"/><text x="80.9009%" y="239.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15,160 samples, 18.74%)</title><rect x="80.6533%" y="213" width="18.7373%" height="15" fill="rgb(231,124,27)" fg:x="65255" fg:w="15160"/><text x="80.9033%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15,157 samples, 18.73%)</title><rect x="80.6570%" y="197" width="18.7336%" height="15" fill="rgb(249,195,6)" fg:x="65258" fg:w="15157"/><text x="80.9070%" y="207.50">hashbrown::raw::RawTableInner..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (300 samples, 0.37%)</title><rect x="99.0199%" y="181" width="0.3708%" height="15" fill="rgb(237,174,47)" fg:x="80115" fg:w="300"/><text x="99.2699%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (300 samples, 0.37%)</title><rect x="99.0199%" y="165" width="0.3708%" height="15" fill="rgb(206,201,31)" fg:x="80115" fg:w="300"/><text x="99.2699%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (300 samples, 0.37%)</title><rect x="99.0199%" y="149" width="0.3708%" height="15" fill="rgb(231,57,52)" fg:x="80115" fg:w="300"/><text x="99.2699%" y="159.50"></text></g><g><title>__tlb_remove_page_size (13 samples, 0.02%)</title><rect x="99.3919%" y="341" width="0.0161%" height="15" fill="rgb(248,177,22)" fg:x="80416" fg:w="13"/><text x="99.6419%" y="351.50"></text></g><g><title>_compound_head (11 samples, 0.01%)</title><rect x="99.4080%" y="341" width="0.0136%" height="15" fill="rgb(215,211,37)" fg:x="80429" fg:w="11"/><text x="99.6580%" y="351.50"></text></g><g><title>mark_page_accessed (15 samples, 0.02%)</title><rect x="99.4228%" y="341" width="0.0185%" height="15" fill="rgb(241,128,51)" fg:x="80441" fg:w="15"/><text x="99.6728%" y="351.50"></text></g><g><title>__mod_lruvec_page_state (14 samples, 0.02%)</title><rect x="99.6440%" y="325" width="0.0173%" height="15" fill="rgb(227,165,31)" fg:x="80620" fg:w="14"/><text x="99.8940%" y="335.50"></text></g><g><title>lock_page_memcg (18 samples, 0.02%)</title><rect x="99.6613%" y="325" width="0.0222%" height="15" fill="rgb(228,167,24)" fg:x="80634" fg:w="18"/><text x="99.9113%" y="335.50"></text></g><g><title>mark_page_accessed (11 samples, 0.01%)</title><rect x="99.6836%" y="325" width="0.0136%" height="15" fill="rgb(228,143,12)" fg:x="80652" fg:w="11"/><text x="99.9336%" y="335.50"></text></g><g><title>__mod_memcg_lruvec_state (39 samples, 0.05%)</title><rect x="99.8467%" y="277" width="0.0482%" height="15" fill="rgb(249,149,8)" fg:x="80784" fg:w="39"/><text x="100.0967%" y="287.50"></text></g><g><title>__mod_node_page_state (11 samples, 0.01%)</title><rect x="99.8949%" y="277" width="0.0136%" height="15" fill="rgb(243,35,44)" fg:x="80823" fg:w="11"/><text x="100.1449%" y="287.50"></text></g><g><title>__mod_lruvec_state (71 samples, 0.09%)</title><rect x="99.8245%" y="293" width="0.0878%" height="15" fill="rgb(246,89,9)" fg:x="80766" fg:w="71"/><text x="100.0745%" y="303.50"></text></g><g><title>__mod_lruvec_page_state (102 samples, 0.13%)</title><rect x="99.7948%" y="309" width="0.1261%" height="15" fill="rgb(233,213,13)" fg:x="80742" fg:w="102"/><text x="100.0448%" y="319.50"></text></g><g><title>lock_page_memcg (12 samples, 0.01%)</title><rect x="99.9246%" y="309" width="0.0148%" height="15" fill="rgb(233,141,41)" fg:x="80847" fg:w="12"/><text x="100.1746%" y="319.50"></text></g><g><title>folio_memcg_lock.part.0 (12 samples, 0.01%)</title><rect x="99.9246%" y="293" width="0.0148%" height="15" fill="rgb(239,167,4)" fg:x="80847" fg:w="12"/><text x="100.1746%" y="303.50"></text></g><g><title>page_remove_rmap (199 samples, 0.25%)</title><rect x="99.6972%" y="325" width="0.2460%" height="15" fill="rgb(209,217,16)" fg:x="80663" fg:w="199"/><text x="99.9472%" y="335.50"></text></g><g><title>free_pages_and_swap_cache (32 samples, 0.04%)</title><rect x="99.9518%" y="293" width="0.0396%" height="15" fill="rgb(219,88,35)" fg:x="80869" fg:w="32"/><text x="100.2018%" y="303.50"></text></g><g><title>release_pages (11 samples, 0.01%)</title><rect x="99.9778%" y="277" width="0.0136%" height="15" fill="rgb(220,193,23)" fg:x="80890" fg:w="11"/><text x="100.2278%" y="287.50"></text></g><g><title>tlb_flush_mmu (35 samples, 0.04%)</title><rect x="99.9518%" y="325" width="0.0433%" height="15" fill="rgb(230,90,52)" fg:x="80869" fg:w="35"/><text x="100.2018%" y="335.50"></text></g><g><title>tlb_batch_pages_flush (35 samples, 0.04%)</title><rect x="99.9518%" y="309" width="0.0433%" height="15" fill="rgb(252,106,19)" fg:x="80869" fg:w="35"/><text x="100.2018%" y="319.50"></text></g><g><title>all (80,908 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="80908"/><text x="0.2500%" y="591.50"></text></g><g><title>brc-rust (80,908 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(230,138,44)" fg:x="0" fg:w="80908"/><text x="0.2500%" y="575.50">brc-rust</text></g><g><title>entry_SYSCALL_64_after_hwframe (493 samples, 0.61%)</title><rect x="99.3907%" y="549" width="0.6093%" height="15" fill="rgb(235,182,43)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="559.50"></text></g><g><title>do_syscall_64 (493 samples, 0.61%)</title><rect x="99.3907%" y="533" width="0.6093%" height="15" fill="rgb(242,16,51)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="543.50"></text></g><g><title>__x64_sys_exit_group (493 samples, 0.61%)</title><rect x="99.3907%" y="517" width="0.6093%" height="15" fill="rgb(248,9,4)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="527.50"></text></g><g><title>do_group_exit (493 samples, 0.61%)</title><rect x="99.3907%" y="501" width="0.6093%" height="15" fill="rgb(210,31,22)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="511.50"></text></g><g><title>do_exit (493 samples, 0.61%)</title><rect x="99.3907%" y="485" width="0.6093%" height="15" fill="rgb(239,54,39)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="495.50"></text></g><g><title>exit_mm (493 samples, 0.61%)</title><rect x="99.3907%" y="469" width="0.6093%" height="15" fill="rgb(230,99,41)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="479.50"></text></g><g><title>mmput (493 samples, 0.61%)</title><rect x="99.3907%" y="453" width="0.6093%" height="15" fill="rgb(253,106,12)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="463.50"></text></g><g><title>__mmput (493 samples, 0.61%)</title><rect x="99.3907%" y="437" width="0.6093%" height="15" fill="rgb(213,46,41)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="447.50"></text></g><g><title>exit_mmap (493 samples, 0.61%)</title><rect x="99.3907%" y="421" width="0.6093%" height="15" fill="rgb(215,133,35)" fg:x="80415" fg:w="493"/><text x="99.6407%" y="431.50"></text></g><g><title>unmap_vmas (492 samples, 0.61%)</title><rect x="99.3919%" y="405" width="0.6081%" height="15" fill="rgb(213,28,5)" fg:x="80416" fg:w="492"/><text x="99.6419%" y="415.50"></text></g><g><title>unmap_single_vma (492 samples, 0.61%)</title><rect x="99.3919%" y="389" width="0.6081%" height="15" fill="rgb(215,77,49)" fg:x="80416" fg:w="492"/><text x="99.6419%" y="399.50"></text></g><g><title>unmap_page_range (492 samples, 0.61%)</title><rect x="99.3919%" y="373" width="0.6081%" height="15" fill="rgb(248,100,22)" fg:x="80416" fg:w="492"/><text x="99.6419%" y="383.50"></text></g><g><title>zap_pmd_range.isra.0 (492 samples, 0.61%)</title><rect x="99.3919%" y="357" width="0.6081%" height="15" fill="rgb(208,67,9)" fg:x="80416" fg:w="492"/><text x="99.6419%" y="367.50"></text></g><g><title>zap_pte_range (445 samples, 0.55%)</title><rect x="99.4500%" y="341" width="0.5500%" height="15" fill="rgb(219,133,21)" fg:x="80463" fg:w="445"/><text x="99.7000%" y="351.50"></text></g></svg></svg>