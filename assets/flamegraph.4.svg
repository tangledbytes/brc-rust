<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="76986"><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (17 samples, 0.02%)</title><rect x="9.3627%" y="245" width="0.0221%" height="15" fill="rgb(227,0,7)" fg:x="7208" fg:w="17"/><text x="9.6127%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.02%)</title><rect x="9.3627%" y="229" width="0.0221%" height="15" fill="rgb(217,0,24)" fg:x="7208" fg:w="17"/><text x="9.6127%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.02%)</title><rect x="9.3627%" y="213" width="0.0221%" height="15" fill="rgb(221,193,54)" fg:x="7208" fg:w="17"/><text x="9.6127%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,737 samples, 2.26%)</title><rect x="9.3848%" y="245" width="2.2563%" height="15" fill="rgb(248,212,6)" fg:x="7225" fg:w="1737"/><text x="9.6348%" y="255.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,737 samples, 2.26%)</title><rect x="9.3848%" y="229" width="2.2563%" height="15" fill="rgb(208,68,35)" fg:x="7225" fg:w="1737"/><text x="9.6348%" y="239.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,737 samples, 2.26%)</title><rect x="9.3848%" y="213" width="2.2563%" height="15" fill="rgb(232,128,0)" fg:x="7225" fg:w="1737"/><text x="9.6348%" y="223.50">&lt;..</text></g><g><title>[libc.so.6] (1,399 samples, 1.82%)</title><rect x="9.8239%" y="197" width="1.8172%" height="15" fill="rgb(207,160,47)" fg:x="7563" fg:w="1399"/><text x="10.0739%" y="207.50">[..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (178 samples, 0.23%)</title><rect x="11.6411%" y="245" width="0.2312%" height="15" fill="rgb(228,23,34)" fg:x="8962" fg:w="178"/><text x="11.8911%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (178 samples, 0.23%)</title><rect x="11.6411%" y="229" width="0.2312%" height="15" fill="rgb(218,30,26)" fg:x="8962" fg:w="178"/><text x="11.8911%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (622 samples, 0.81%)</title><rect x="15.6171%" y="213" width="0.8079%" height="15" fill="rgb(220,122,19)" fg:x="12023" fg:w="622"/><text x="15.8671%" y="223.50"></text></g><g><title>core::ptr::align_offset (622 samples, 0.81%)</title><rect x="15.6171%" y="197" width="0.8079%" height="15" fill="rgb(250,228,42)" fg:x="12023" fg:w="622"/><text x="15.8671%" y="207.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (475 samples, 0.62%)</title><rect x="16.4251%" y="213" width="0.6170%" height="15" fill="rgb(240,193,28)" fg:x="12645" fg:w="475"/><text x="16.6751%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (108 samples, 0.14%)</title><rect x="16.9018%" y="197" width="0.1403%" height="15" fill="rgb(216,20,37)" fg:x="13012" fg:w="108"/><text x="17.1518%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_aligned (262 samples, 0.34%)</title><rect x="17.0421%" y="213" width="0.3403%" height="15" fill="rgb(206,188,39)" fg:x="13120" fg:w="262"/><text x="17.2921%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_naive (3,484 samples, 4.53%)</title><rect x="17.3824%" y="213" width="4.5255%" height="15" fill="rgb(217,207,13)" fg:x="13382" fg:w="3484"/><text x="17.6324%" y="223.50">core:..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (13,629 samples, 17.70%)</title><rect x="4.3904%" y="261" width="17.7032%" height="15" fill="rgb(231,73,38)" fg:x="3380" fg:w="13629"/><text x="4.6404%" y="271.50">&lt;core::str::pattern::CharSea..</text></g><g><title>core::slice::memchr::memchr (7,869 samples, 10.22%)</title><rect x="11.8723%" y="245" width="10.2213%" height="15" fill="rgb(225,20,46)" fg:x="9140" fg:w="7869"/><text x="12.1223%" y="255.50">core::slice::me..</text></g><g><title>core::slice::memchr::memchr_aligned (7,867 samples, 10.22%)</title><rect x="11.8749%" y="229" width="10.2187%" height="15" fill="rgb(210,31,41)" fg:x="9142" fg:w="7867"/><text x="12.1249%" y="239.50">core::slice::me..</text></g><g><title>core::slice::memchr::repeat_byte (143 samples, 0.19%)</title><rect x="21.9079%" y="213" width="0.1857%" height="15" fill="rgb(221,200,47)" fg:x="16866" fg:w="143"/><text x="22.1579%" y="223.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,205 samples, 21.05%)</title><rect x="1.0794%" y="293" width="21.0493%" height="15" fill="rgb(226,26,5)" fg:x="831" fg:w="16205"/><text x="1.3294%" y="303.50">&lt;core::str::iter::Split&lt;P&gt; as cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (16,205 samples, 21.05%)</title><rect x="1.0794%" y="277" width="21.0493%" height="15" fill="rgb(249,33,26)" fg:x="831" fg:w="16205"/><text x="1.3294%" y="287.50">core::str::iter::SplitInternal&lt;P&gt;..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (27 samples, 0.04%)</title><rect x="22.0936%" y="261" width="0.0351%" height="15" fill="rgb(235,183,28)" fg:x="17009" fg:w="27"/><text x="22.3436%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (27 samples, 0.04%)</title><rect x="22.0936%" y="245" width="0.0351%" height="15" fill="rgb(221,5,38)" fg:x="17009" fg:w="27"/><text x="22.3436%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,344 samples, 1.75%)</title><rect x="38.3316%" y="277" width="1.7458%" height="15" fill="rgb(247,18,42)" fg:x="29510" fg:w="1344"/><text x="38.5816%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (607 samples, 0.79%)</title><rect x="39.2890%" y="261" width="0.7885%" height="15" fill="rgb(241,131,45)" fg:x="30247" fg:w="607"/><text x="39.5390%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (223 samples, 0.29%)</title><rect x="39.7878%" y="245" width="0.2897%" height="15" fill="rgb(249,31,29)" fg:x="30631" fg:w="223"/><text x="40.0378%" y="255.50"></text></g><g><title>__powisf2 (615 samples, 0.80%)</title><rect x="40.0774%" y="277" width="0.7988%" height="15" fill="rgb(225,111,53)" fg:x="30854" fg:w="615"/><text x="40.3274%" y="287.50"></text></g><g><title>compiler_builtins::float::pow::__powisf2 (283 samples, 0.37%)</title><rect x="40.5087%" y="261" width="0.3676%" height="15" fill="rgb(238,160,17)" fg:x="31186" fg:w="283"/><text x="40.7587%" y="271.50"></text></g><g><title>compiler_builtins::float::pow::pow (283 samples, 0.37%)</title><rect x="40.5087%" y="245" width="0.3676%" height="15" fill="rgb(214,148,48)" fg:x="31186" fg:w="283"/><text x="40.7587%" y="255.50"></text></g><g><title>&lt;i32 as compiler_builtins::int::Int&gt;::abs_diff (283 samples, 0.37%)</title><rect x="40.5087%" y="229" width="0.3676%" height="15" fill="rgb(232,36,49)" fg:x="31186" fg:w="283"/><text x="40.7587%" y="239.50"></text></g><g><title>core::num::&lt;impl i32&gt;::wrapping_abs (283 samples, 0.37%)</title><rect x="40.5087%" y="213" width="0.3676%" height="15" fill="rgb(209,103,24)" fg:x="31186" fg:w="283"/><text x="40.7587%" y="223.50"></text></g><g><title>brc_rust::byte_to_float (14,960 samples, 19.43%)</title><rect x="22.1287%" y="293" width="19.4321%" height="15" fill="rgb(229,88,8)" fg:x="17036" fg:w="14960"/><text x="22.3787%" y="303.50">brc_rust::byte_to_float</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (526 samples, 0.68%)</title><rect x="40.8776%" y="277" width="0.6832%" height="15" fill="rgb(213,181,19)" fg:x="31470" fg:w="526"/><text x="41.1276%" y="287.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (526 samples, 0.68%)</title><rect x="40.8776%" y="261" width="0.6832%" height="15" fill="rgb(254,191,54)" fg:x="31470" fg:w="526"/><text x="41.1276%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (526 samples, 0.68%)</title><rect x="40.8776%" y="245" width="0.6832%" height="15" fill="rgb(241,83,37)" fg:x="31470" fg:w="526"/><text x="41.1276%" y="255.50"></text></g><g><title>brc_rust::main (3,655 samples, 4.75%)</title><rect x="41.5608%" y="293" width="4.7476%" height="15" fill="rgb(233,36,39)" fg:x="31996" fg:w="3655"/><text x="41.8108%" y="303.50">brc_ru..</text></g><g><title>core::f32::&lt;impl f32&gt;::max (309 samples, 0.40%)</title><rect x="46.3097%" y="293" width="0.4014%" height="15" fill="rgb(226,3,54)" fg:x="35652" fg:w="309"/><text x="46.5597%" y="303.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (329 samples, 0.43%)</title><rect x="46.7111%" y="293" width="0.4274%" height="15" fill="rgb(245,192,40)" fg:x="35961" fg:w="329"/><text x="46.9611%" y="303.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (49 samples, 0.06%)</title><rect x="48.6101%" y="277" width="0.0636%" height="15" fill="rgb(238,167,29)" fg:x="37423" fg:w="49"/><text x="48.8601%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (185 samples, 0.24%)</title><rect x="48.6738%" y="277" width="0.2403%" height="15" fill="rgb(232,182,51)" fg:x="37472" fg:w="185"/><text x="48.9238%" y="287.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (251 samples, 0.33%)</title><rect x="54.9464%" y="261" width="0.3260%" height="15" fill="rgb(231,60,39)" fg:x="42301" fg:w="251"/><text x="55.1964%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (251 samples, 0.33%)</title><rect x="54.9464%" y="245" width="0.3260%" height="15" fill="rgb(208,69,12)" fg:x="42301" fg:w="251"/><text x="55.1964%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (251 samples, 0.33%)</title><rect x="54.9464%" y="229" width="0.3260%" height="15" fill="rgb(235,93,37)" fg:x="42301" fg:w="251"/><text x="55.1964%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,312 samples, 3.00%)</title><rect x="55.2724%" y="261" width="3.0031%" height="15" fill="rgb(213,116,39)" fg:x="42552" fg:w="2312"/><text x="55.5224%" y="271.50">cor..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2,312 samples, 3.00%)</title><rect x="55.2724%" y="245" width="3.0031%" height="15" fill="rgb(222,207,29)" fg:x="42552" fg:w="2312"/><text x="55.5224%" y="255.50">cor..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,312 samples, 3.00%)</title><rect x="55.2724%" y="229" width="3.0031%" height="15" fill="rgb(206,96,30)" fg:x="42552" fg:w="2312"/><text x="55.5224%" y="239.50">&lt;[A..</text></g><g><title>[libc.so.6] (1,404 samples, 1.82%)</title><rect x="56.4518%" y="213" width="1.8237%" height="15" fill="rgb(218,138,4)" fg:x="43460" fg:w="1404"/><text x="56.7018%" y="223.50">[..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,008 samples, 2.61%)</title><rect x="58.2755%" y="261" width="2.6083%" height="15" fill="rgb(250,191,14)" fg:x="44864" fg:w="2008"/><text x="58.5255%" y="271.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,008 samples, 2.61%)</title><rect x="58.2755%" y="245" width="2.6083%" height="15" fill="rgb(239,60,40)" fg:x="44864" fg:w="2008"/><text x="58.5255%" y="255.50">&lt;c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (143 samples, 0.19%)</title><rect x="61.7567%" y="229" width="0.1857%" height="15" fill="rgb(206,27,48)" fg:x="47544" fg:w="143"/><text x="62.0067%" y="239.50"></text></g><g><title>core::ptr::align_offset (143 samples, 0.19%)</title><rect x="61.7567%" y="213" width="0.1857%" height="15" fill="rgb(225,35,8)" fg:x="47544" fg:w="143"/><text x="62.0067%" y="223.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (51 samples, 0.07%)</title><rect x="61.9424%" y="229" width="0.0662%" height="15" fill="rgb(250,213,24)" fg:x="47687" fg:w="51"/><text x="62.1924%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (10 samples, 0.01%)</title><rect x="61.9957%" y="213" width="0.0130%" height="15" fill="rgb(247,123,22)" fg:x="47728" fg:w="10"/><text x="62.2457%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (24 samples, 0.03%)</title><rect x="62.0087%" y="229" width="0.0312%" height="15" fill="rgb(231,138,38)" fg:x="47738" fg:w="24"/><text x="62.2587%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,100 samples, 1.43%)</title><rect x="62.0399%" y="229" width="1.4288%" height="15" fill="rgb(231,145,46)" fg:x="47762" fg:w="1100"/><text x="62.2899%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,884 samples, 2.45%)</title><rect x="61.0475%" y="245" width="2.4472%" height="15" fill="rgb(251,118,11)" fg:x="46998" fg:w="1884"/><text x="61.2975%" y="255.50">co..</text></g><g><title>core::slice::memchr::repeat_byte (20 samples, 0.03%)</title><rect x="63.4687%" y="229" width="0.0260%" height="15" fill="rgb(217,147,25)" fg:x="48862" fg:w="20"/><text x="63.7187%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (15,029 samples, 19.52%)</title><rect x="47.1384%" y="293" width="19.5217%" height="15" fill="rgb(247,81,37)" fg:x="36290" fg:w="15029"/><text x="47.3884%" y="303.50">core::str::&lt;impl str&gt;::split_on..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (13,662 samples, 17.75%)</title><rect x="48.9141%" y="277" width="17.7461%" height="15" fill="rgb(209,12,38)" fg:x="37657" fg:w="13662"/><text x="49.1641%" y="287.50">&lt;core::str::pattern::CharSea..</text></g><g><title>core::slice::memchr::memchr (4,447 samples, 5.78%)</title><rect x="60.8838%" y="261" width="5.7764%" height="15" fill="rgb(227,1,9)" fg:x="46872" fg:w="4447"/><text x="61.1338%" y="271.50">core::s..</text></g><g><title>core::slice::memchr::memchr_naive (2,437 samples, 3.17%)</title><rect x="63.4947%" y="245" width="3.1655%" height="15" fill="rgb(248,47,43)" fg:x="48882" fg:w="2437"/><text x="63.7447%" y="255.50">cor..</text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (255 samples, 0.33%)</title><rect x="67.4175%" y="261" width="0.3312%" height="15" fill="rgb(221,10,30)" fg:x="51902" fg:w="255"/><text x="67.6675%" y="271.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (255 samples, 0.33%)</title><rect x="67.4175%" y="245" width="0.3312%" height="15" fill="rgb(210,229,1)" fg:x="51902" fg:w="255"/><text x="67.6675%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (255 samples, 0.33%)</title><rect x="67.4175%" y="229" width="0.3312%" height="15" fill="rgb(222,148,37)" fg:x="51902" fg:w="255"/><text x="67.6675%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (255 samples, 0.33%)</title><rect x="67.4175%" y="213" width="0.3312%" height="15" fill="rgb(234,67,33)" fg:x="51902" fg:w="255"/><text x="67.6675%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (255 samples, 0.33%)</title><rect x="67.4175%" y="197" width="0.3312%" height="15" fill="rgb(247,98,35)" fg:x="51902" fg:w="255"/><text x="67.6675%" y="207.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (255 samples, 0.33%)</title><rect x="67.4175%" y="181" width="0.3312%" height="15" fill="rgb(247,138,52)" fg:x="51902" fg:w="255"/><text x="67.6675%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (255 samples, 0.33%)</title><rect x="67.4175%" y="165" width="0.3312%" height="15" fill="rgb(213,79,30)" fg:x="51902" fg:w="255"/><text x="67.6675%" y="175.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (282 samples, 0.37%)</title><rect x="67.7487%" y="213" width="0.3663%" height="15" fill="rgb(246,177,23)" fg:x="52157" fg:w="282"/><text x="67.9987%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (282 samples, 0.37%)</title><rect x="67.7487%" y="197" width="0.3663%" height="15" fill="rgb(230,62,27)" fg:x="52157" fg:w="282"/><text x="67.9987%" y="207.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (282 samples, 0.37%)</title><rect x="67.7487%" y="181" width="0.3663%" height="15" fill="rgb(216,154,8)" fg:x="52157" fg:w="282"/><text x="67.9987%" y="191.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (347 samples, 0.45%)</title><rect x="67.7487%" y="229" width="0.4507%" height="15" fill="rgb(244,35,45)" fg:x="52157" fg:w="347"/><text x="67.9987%" y="239.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (65 samples, 0.08%)</title><rect x="68.1150%" y="213" width="0.0844%" height="15" fill="rgb(251,115,12)" fg:x="52439" fg:w="65"/><text x="68.3650%" y="223.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (65 samples, 0.08%)</title><rect x="68.1150%" y="197" width="0.0844%" height="15" fill="rgb(240,54,50)" fg:x="52439" fg:w="65"/><text x="68.3650%" y="207.50"></text></g><g><title>core::str::validations::next_code_point_reverse (65 samples, 0.08%)</title><rect x="68.1150%" y="181" width="0.0844%" height="15" fill="rgb(233,84,52)" fg:x="52439" fg:w="65"/><text x="68.3650%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (585 samples, 0.76%)</title><rect x="67.7487%" y="261" width="0.7599%" height="15" fill="rgb(207,117,47)" fg:x="52157" fg:w="585"/><text x="67.9987%" y="271.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (585 samples, 0.76%)</title><rect x="67.7487%" y="245" width="0.7599%" height="15" fill="rgb(249,43,39)" fg:x="52157" fg:w="585"/><text x="67.9987%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (238 samples, 0.31%)</title><rect x="68.1994%" y="229" width="0.3091%" height="15" fill="rgb(209,38,44)" fg:x="52504" fg:w="238"/><text x="68.4494%" y="239.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (270 samples, 0.35%)</title><rect x="68.5190%" y="213" width="0.3507%" height="15" fill="rgb(236,212,23)" fg:x="52750" fg:w="270"/><text x="68.7690%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (270 samples, 0.35%)</title><rect x="68.5190%" y="197" width="0.3507%" height="15" fill="rgb(242,79,21)" fg:x="52750" fg:w="270"/><text x="68.7690%" y="207.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (270 samples, 0.35%)</title><rect x="68.5190%" y="181" width="0.3507%" height="15" fill="rgb(211,96,35)" fg:x="52750" fg:w="270"/><text x="68.7690%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (26 samples, 0.03%)</title><rect x="68.8891%" y="181" width="0.0338%" height="15" fill="rgb(253,215,40)" fg:x="53035" fg:w="26"/><text x="69.1391%" y="191.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (356 samples, 0.46%)</title><rect x="68.5086%" y="229" width="0.4624%" height="15" fill="rgb(211,81,21)" fg:x="52742" fg:w="356"/><text x="68.7586%" y="239.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.10%)</title><rect x="68.8697%" y="213" width="0.1013%" height="15" fill="rgb(208,190,38)" fg:x="53020" fg:w="78"/><text x="69.1197%" y="223.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.08%)</title><rect x="68.8891%" y="197" width="0.0818%" height="15" fill="rgb(235,213,38)" fg:x="53035" fg:w="63"/><text x="69.1391%" y="207.50"></text></g><g><title>core::str::validations::next_code_point (37 samples, 0.05%)</title><rect x="68.9229%" y="181" width="0.0481%" height="15" fill="rgb(237,122,38)" fg:x="53061" fg:w="37"/><text x="69.1729%" y="191.50"></text></g><g><title>core::str::validations::utf8_first_byte (15 samples, 0.02%)</title><rect x="68.9515%" y="165" width="0.0195%" height="15" fill="rgb(244,218,35)" fg:x="53083" fg:w="15"/><text x="69.2015%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (385 samples, 0.50%)</title><rect x="68.5086%" y="261" width="0.5001%" height="15" fill="rgb(240,68,47)" fg:x="52742" fg:w="385"/><text x="68.7586%" y="271.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (385 samples, 0.50%)</title><rect x="68.5086%" y="245" width="0.5001%" height="15" fill="rgb(210,16,53)" fg:x="52742" fg:w="385"/><text x="68.7586%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (29 samples, 0.04%)</title><rect x="68.9710%" y="229" width="0.0377%" height="15" fill="rgb(235,124,12)" fg:x="53098" fg:w="29"/><text x="69.2210%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (2,054 samples, 2.67%)</title><rect x="66.6602%" y="293" width="2.6680%" height="15" fill="rgb(224,169,11)" fg:x="51319" fg:w="2054"/><text x="66.9102%" y="303.50">co..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1,811 samples, 2.35%)</title><rect x="66.9758%" y="277" width="2.3524%" height="15" fill="rgb(250,166,2)" fg:x="51562" fg:w="1811"/><text x="67.2258%" y="287.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (246 samples, 0.32%)</title><rect x="69.0087%" y="261" width="0.3195%" height="15" fill="rgb(242,216,29)" fg:x="53127" fg:w="246"/><text x="69.2587%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (246 samples, 0.32%)</title><rect x="69.0087%" y="245" width="0.3195%" height="15" fill="rgb(230,116,27)" fg:x="53127" fg:w="246"/><text x="69.2587%" y="255.50"></text></g><g><title>_compound_head (12 samples, 0.02%)</title><rect x="71.5013%" y="117" width="0.0156%" height="15" fill="rgb(228,99,48)" fg:x="55046" fg:w="12"/><text x="71.7513%" y="127.50"></text></g><g><title>__mod_lruvec_page_state (30 samples, 0.04%)</title><rect x="71.6143%" y="101" width="0.0390%" height="15" fill="rgb(253,11,6)" fg:x="55133" fg:w="30"/><text x="71.8643%" y="111.50"></text></g><g><title>lock_page_memcg (13 samples, 0.02%)</title><rect x="71.6533%" y="101" width="0.0169%" height="15" fill="rgb(247,143,39)" fg:x="55163" fg:w="13"/><text x="71.9033%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (33 samples, 0.04%)</title><rect x="71.7897%" y="53" width="0.0429%" height="15" fill="rgb(236,97,10)" fg:x="55268" fg:w="33"/><text x="72.0397%" y="63.50"></text></g><g><title>cgroup_rstat_updated (8 samples, 0.01%)</title><rect x="71.8221%" y="37" width="0.0104%" height="15" fill="rgb(233,208,19)" fg:x="55293" fg:w="8"/><text x="72.0721%" y="47.50"></text></g><g><title>__mod_lruvec_state (59 samples, 0.08%)</title><rect x="71.7663%" y="69" width="0.0766%" height="15" fill="rgb(216,164,2)" fg:x="55250" fg:w="59"/><text x="72.0163%" y="79.50"></text></g><g><title>__mod_lruvec_page_state (94 samples, 0.12%)</title><rect x="71.7299%" y="85" width="0.1221%" height="15" fill="rgb(220,129,5)" fg:x="55222" fg:w="94"/><text x="71.9799%" y="95.50"></text></g><g><title>lock_page_memcg (13 samples, 0.02%)</title><rect x="71.8520%" y="85" width="0.0169%" height="15" fill="rgb(242,17,10)" fg:x="55316" fg:w="13"/><text x="72.1020%" y="95.50"></text></g><g><title>folio_memcg_lock.part.0 (13 samples, 0.02%)</title><rect x="71.8520%" y="69" width="0.0169%" height="15" fill="rgb(242,107,0)" fg:x="55316" fg:w="13"/><text x="72.1020%" y="79.50"></text></g><g><title>page_add_file_rmap (155 samples, 0.20%)</title><rect x="71.6702%" y="101" width="0.2013%" height="15" fill="rgb(251,28,31)" fg:x="55176" fg:w="155"/><text x="71.9202%" y="111.50"></text></g><g><title>percpu_counter_add_batch (13 samples, 0.02%)</title><rect x="71.8715%" y="101" width="0.0169%" height="15" fill="rgb(233,223,10)" fg:x="55331" fg:w="13"/><text x="72.1215%" y="111.50"></text></g><g><title>do_set_pte (299 samples, 0.39%)</title><rect x="71.5169%" y="117" width="0.3884%" height="15" fill="rgb(215,21,27)" fg:x="55058" fg:w="299"/><text x="71.7669%" y="127.50"></text></g><g><title>unlock_page_memcg (12 samples, 0.02%)</title><rect x="71.8897%" y="101" width="0.0156%" height="15" fill="rgb(232,23,21)" fg:x="55345" fg:w="12"/><text x="72.1397%" y="111.50"></text></g><g><title>next_uptodate_page (39 samples, 0.05%)</title><rect x="71.9118%" y="117" width="0.0507%" height="15" fill="rgb(244,5,23)" fg:x="55362" fg:w="39"/><text x="72.1618%" y="127.50"></text></g><g><title>srso_alias_safe_ret (9 samples, 0.01%)</title><rect x="71.9689%" y="117" width="0.0117%" height="15" fill="rgb(226,81,46)" fg:x="55406" fg:w="9"/><text x="72.2189%" y="127.50"></text></g><g><title>xas_find (14 samples, 0.02%)</title><rect x="71.9806%" y="117" width="0.0182%" height="15" fill="rgb(247,70,30)" fg:x="55415" fg:w="14"/><text x="72.2306%" y="127.50"></text></g><g><title>filemap_map_pages (473 samples, 0.61%)</title><rect x="71.3857%" y="133" width="0.6144%" height="15" fill="rgb(212,68,19)" fg:x="54957" fg:w="473"/><text x="71.6357%" y="143.50"></text></g><g><title>srso_alias_safe_ret (9 samples, 0.01%)</title><rect x="72.0105%" y="133" width="0.0117%" height="15" fill="rgb(240,187,13)" fg:x="55438" fg:w="9"/><text x="72.2605%" y="143.50"></text></g><g><title>do_read_fault (504 samples, 0.65%)</title><rect x="71.3701%" y="149" width="0.6547%" height="15" fill="rgb(223,113,26)" fg:x="54945" fg:w="504"/><text x="71.6201%" y="159.50"></text></g><g><title>do_fault (510 samples, 0.66%)</title><rect x="71.3662%" y="165" width="0.6625%" height="15" fill="rgb(206,192,2)" fg:x="54942" fg:w="510"/><text x="71.6162%" y="175.50"></text></g><g><title>__handle_mm_fault (532 samples, 0.69%)</title><rect x="71.3415%" y="197" width="0.6910%" height="15" fill="rgb(241,108,4)" fg:x="54923" fg:w="532"/><text x="71.5915%" y="207.50"></text></g><g><title>handle_pte_fault (518 samples, 0.67%)</title><rect x="71.3597%" y="181" width="0.6728%" height="15" fill="rgb(247,173,49)" fg:x="54937" fg:w="518"/><text x="71.6097%" y="191.50"></text></g><g><title>handle_mm_fault (558 samples, 0.72%)</title><rect x="71.3260%" y="213" width="0.7248%" height="15" fill="rgb(224,114,35)" fg:x="54911" fg:w="558"/><text x="71.5760%" y="223.50"></text></g><g><title>do_user_addr_fault (633 samples, 0.82%)</title><rect x="71.2467%" y="229" width="0.8222%" height="15" fill="rgb(245,159,27)" fg:x="54850" fg:w="633"/><text x="71.4967%" y="239.50"></text></g><g><title>lock_mm_and_find_vma (14 samples, 0.02%)</title><rect x="72.0508%" y="213" width="0.0182%" height="15" fill="rgb(245,172,44)" fg:x="55469" fg:w="14"/><text x="72.3008%" y="223.50"></text></g><g><title>asm_exc_page_fault (635 samples, 0.82%)</title><rect x="71.2454%" y="261" width="0.8248%" height="15" fill="rgb(236,23,11)" fg:x="54849" fg:w="635"/><text x="71.4954%" y="271.50"></text></g><g><title>exc_page_fault (634 samples, 0.82%)</title><rect x="71.2467%" y="245" width="0.8235%" height="15" fill="rgb(205,117,38)" fg:x="54850" fg:w="634"/><text x="71.4967%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (2,193 samples, 2.85%)</title><rect x="69.3282%" y="293" width="2.8486%" height="15" fill="rgb(237,72,25)" fg:x="53373" fg:w="2193"/><text x="69.5782%" y="303.50">co..</text></g><g><title>core::str::validations::run_utf8_validation (2,193 samples, 2.85%)</title><rect x="69.3282%" y="277" width="2.8486%" height="15" fill="rgb(244,70,9)" fg:x="53373" fg:w="2193"/><text x="69.5782%" y="287.50">co..</text></g><g><title>core::str::validations::utf8_char_width (79 samples, 0.10%)</title><rect x="72.0741%" y="261" width="0.1026%" height="15" fill="rgb(217,125,39)" fg:x="55487" fg:w="79"/><text x="72.3241%" y="271.50"></text></g><g><title>brc_rust::main (79 samples, 0.10%)</title><rect x="72.1768%" y="261" width="0.1026%" height="15" fill="rgb(235,36,10)" fg:x="55566" fg:w="79"/><text x="72.4268%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (318 samples, 0.41%)</title><rect x="73.7861%" y="149" width="0.4131%" height="15" fill="rgb(251,123,47)" fg:x="56805" fg:w="318"/><text x="74.0361%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (638 samples, 0.83%)</title><rect x="73.6251%" y="165" width="0.8287%" height="15" fill="rgb(221,13,13)" fg:x="56681" fg:w="638"/><text x="73.8751%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (196 samples, 0.25%)</title><rect x="74.1992%" y="149" width="0.2546%" height="15" fill="rgb(238,131,9)" fg:x="57123" fg:w="196"/><text x="74.4492%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,062 samples, 1.38%)</title><rect x="74.7915%" y="149" width="1.3795%" height="15" fill="rgb(211,50,8)" fg:x="57579" fg:w="1062"/><text x="75.0415%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,059 samples, 3.97%)</title><rect x="72.9574%" y="181" width="3.9734%" height="15" fill="rgb(245,182,24)" fg:x="56167" fg:w="3059"/><text x="73.2074%" y="191.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,907 samples, 2.48%)</title><rect x="74.4538%" y="165" width="2.4771%" height="15" fill="rgb(242,14,37)" fg:x="57319" fg:w="1907"/><text x="74.7038%" y="175.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (585 samples, 0.76%)</title><rect x="76.1710%" y="149" width="0.7599%" height="15" fill="rgb(246,228,12)" fg:x="58641" fg:w="585"/><text x="76.4210%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3,252 samples, 4.22%)</title><rect x="72.9574%" y="213" width="4.2241%" height="15" fill="rgb(213,55,15)" fg:x="56167" fg:w="3252"/><text x="73.2074%" y="223.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,252 samples, 4.22%)</title><rect x="72.9574%" y="197" width="4.2241%" height="15" fill="rgb(209,9,3)" fg:x="56167" fg:w="3252"/><text x="73.2074%" y="207.50">&lt;core..</text></g><g><title>core::hash::BuildHasher::hash_one (193 samples, 0.25%)</title><rect x="76.9309%" y="181" width="0.2507%" height="15" fill="rgb(230,59,30)" fg:x="59226" fg:w="193"/><text x="77.1809%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (287 samples, 0.37%)</title><rect x="77.1816%" y="213" width="0.3728%" height="15" fill="rgb(209,121,21)" fg:x="59419" fg:w="287"/><text x="77.4316%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (265 samples, 0.34%)</title><rect x="77.2101%" y="197" width="0.3442%" height="15" fill="rgb(220,109,13)" fg:x="59441" fg:w="265"/><text x="77.4601%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (265 samples, 0.34%)</title><rect x="77.2101%" y="181" width="0.3442%" height="15" fill="rgb(232,18,1)" fg:x="59441" fg:w="265"/><text x="77.4601%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (265 samples, 0.34%)</title><rect x="77.2101%" y="165" width="0.3442%" height="15" fill="rgb(215,41,42)" fg:x="59441" fg:w="265"/><text x="77.4601%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (67 samples, 0.09%)</title><rect x="77.5544%" y="213" width="0.0870%" height="15" fill="rgb(224,123,36)" fg:x="59706" fg:w="67"/><text x="77.8044%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (273 samples, 0.35%)</title><rect x="78.5130%" y="117" width="0.3546%" height="15" fill="rgb(240,125,3)" fg:x="60444" fg:w="273"/><text x="78.7630%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (53 samples, 0.07%)</title><rect x="79.2105%" y="101" width="0.0688%" height="15" fill="rgb(205,98,50)" fg:x="60981" fg:w="53"/><text x="79.4605%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (322 samples, 0.42%)</title><rect x="78.8676%" y="117" width="0.4183%" height="15" fill="rgb(205,185,37)" fg:x="60717" fg:w="322"/><text x="79.1176%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (142 samples, 0.18%)</title><rect x="79.7561%" y="101" width="0.1844%" height="15" fill="rgb(238,207,15)" fg:x="61401" fg:w="142"/><text x="80.0061%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (514 samples, 0.67%)</title><rect x="79.2858%" y="117" width="0.6677%" height="15" fill="rgb(213,199,42)" fg:x="61039" fg:w="514"/><text x="79.5358%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="79.9405%" y="101" width="0.0130%" height="15" fill="rgb(235,201,11)" fg:x="61543" fg:w="10"/><text x="80.1905%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,493 samples, 1.94%)</title><rect x="78.0220%" y="133" width="1.9393%" height="15" fill="rgb(207,46,11)" fg:x="60066" fg:w="1493"/><text x="78.2720%" y="143.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37 samples, 0.05%)</title><rect x="81.0836%" y="101" width="0.0481%" height="15" fill="rgb(241,35,35)" fg:x="62423" fg:w="37"/><text x="81.3336%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (38 samples, 0.05%)</title><rect x="81.1849%" y="85" width="0.0494%" height="15" fill="rgb(243,32,47)" fg:x="62501" fg:w="38"/><text x="81.4349%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (87 samples, 0.11%)</title><rect x="81.1316%" y="101" width="0.1130%" height="15" fill="rgb(247,202,23)" fg:x="62460" fg:w="87"/><text x="81.3816%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.01%)</title><rect x="81.2343%" y="85" width="0.0104%" height="15" fill="rgb(219,102,11)" fg:x="62539" fg:w="8"/><text x="81.4843%" y="95.50"></text></g><g><title>core::cmp::min (84 samples, 0.11%)</title><rect x="81.2446%" y="101" width="0.1091%" height="15" fill="rgb(243,110,44)" fg:x="62547" fg:w="84"/><text x="81.4946%" y="111.50"></text></g><g><title>core::cmp::Ord::min (84 samples, 0.11%)</title><rect x="81.2446%" y="85" width="0.1091%" height="15" fill="rgb(222,74,54)" fg:x="62547" fg:w="84"/><text x="81.4946%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (84 samples, 0.11%)</title><rect x="81.2446%" y="69" width="0.1091%" height="15" fill="rgb(216,99,12)" fg:x="62547" fg:w="84"/><text x="81.4946%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (7,461 samples, 9.69%)</title><rect x="72.2807%" y="245" width="9.6914%" height="15" fill="rgb(226,22,26)" fg:x="55646" fg:w="7461"/><text x="72.5307%" y="255.50">hashbrown::map..</text></g><g><title>core::hash::BuildHasher::hash_one (7,453 samples, 9.68%)</title><rect x="72.2911%" y="229" width="9.6810%" height="15" fill="rgb(217,163,10)" fg:x="55654" fg:w="7453"/><text x="72.5411%" y="239.50">core::hash::Bu..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,334 samples, 4.33%)</title><rect x="77.6414%" y="213" width="4.3307%" height="15" fill="rgb(213,25,53)" fg:x="59773" fg:w="3334"/><text x="77.8914%" y="223.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,334 samples, 4.33%)</title><rect x="77.6414%" y="197" width="4.3307%" height="15" fill="rgb(252,105,26)" fg:x="59773" fg:w="3334"/><text x="77.8914%" y="207.50">core:..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3,334 samples, 4.33%)</title><rect x="77.6414%" y="181" width="4.3307%" height="15" fill="rgb(220,39,43)" fg:x="59773" fg:w="3334"/><text x="77.8914%" y="191.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,334 samples, 4.33%)</title><rect x="77.6414%" y="165" width="4.3307%" height="15" fill="rgb(229,68,48)" fg:x="59773" fg:w="3334"/><text x="77.8914%" y="175.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,334 samples, 4.33%)</title><rect x="77.6414%" y="149" width="4.3307%" height="15" fill="rgb(252,8,32)" fg:x="59773" fg:w="3334"/><text x="77.8914%" y="159.50">&lt;core..</text></g><g><title>core::hash::Hasher::write_u8 (1,548 samples, 2.01%)</title><rect x="79.9613%" y="133" width="2.0108%" height="15" fill="rgb(223,20,43)" fg:x="61559" fg:w="1548"/><text x="80.2113%" y="143.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,306 samples, 1.70%)</title><rect x="80.2756%" y="117" width="1.6964%" height="15" fill="rgb(229,81,49)" fg:x="61801" fg:w="1306"/><text x="80.5256%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (476 samples, 0.62%)</title><rect x="81.3538%" y="101" width="0.6183%" height="15" fill="rgb(236,28,36)" fg:x="62631" fg:w="476"/><text x="81.6038%" y="111.50"></text></g><g><title>brc_rust::main (31 samples, 0.04%)</title><rect x="81.9824%" y="213" width="0.0403%" height="15" fill="rgb(249,185,26)" fg:x="63115" fg:w="31"/><text x="82.2324%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,104 samples, 1.43%)</title><rect x="82.9047%" y="197" width="1.4340%" height="15" fill="rgb(249,174,33)" fg:x="63825" fg:w="1104"/><text x="83.1547%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.01%)</title><rect x="84.3244%" y="181" width="0.0143%" height="15" fill="rgb(233,201,37)" fg:x="64918" fg:w="11"/><text x="84.5744%" y="191.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (7,998 samples, 10.39%)</title><rect x="84.3387%" y="165" width="10.3889%" height="15" fill="rgb(221,78,26)" fg:x="64929" fg:w="7998"/><text x="84.5887%" y="175.50">&lt;Q as hashbrown..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7,998 samples, 10.39%)</title><rect x="84.3387%" y="149" width="10.3889%" height="15" fill="rgb(250,127,30)" fg:x="64929" fg:w="7998"/><text x="84.5887%" y="159.50">core::cmp::impl..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (7,998 samples, 10.39%)</title><rect x="84.3387%" y="133" width="10.3889%" height="15" fill="rgb(230,49,44)" fg:x="64929" fg:w="7998"/><text x="84.5887%" y="143.50">core::str::trai..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7,998 samples, 10.39%)</title><rect x="84.3387%" y="117" width="10.3889%" height="15" fill="rgb(229,67,23)" fg:x="64929" fg:w="7998"/><text x="84.5887%" y="127.50">core::cmp::impl..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7,998 samples, 10.39%)</title><rect x="84.3387%" y="101" width="10.3889%" height="15" fill="rgb(249,83,47)" fg:x="64929" fg:w="7998"/><text x="84.5887%" y="111.50">core::slice::cm..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7,998 samples, 10.39%)</title><rect x="84.3387%" y="85" width="10.3889%" height="15" fill="rgb(215,43,3)" fg:x="64929" fg:w="7998"/><text x="84.5887%" y="95.50">&lt;[A] as core::s..</text></g><g><title>[libc.so.6] (5,321 samples, 6.91%)</title><rect x="87.8160%" y="69" width="6.9116%" height="15" fill="rgb(238,154,13)" fg:x="67606" fg:w="5321"/><text x="88.0660%" y="79.50">[libc.so...</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (8,011 samples, 10.41%)</title><rect x="84.3387%" y="181" width="10.4058%" height="15" fill="rgb(219,56,2)" fg:x="64929" fg:w="8011"/><text x="84.5887%" y="191.50">hashbrown::map:..</text></g><g><title>brc_rust::main (13 samples, 0.02%)</title><rect x="94.7276%" y="165" width="0.0169%" height="15" fill="rgb(233,0,4)" fg:x="72927" fg:w="13"/><text x="94.9776%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (8,578 samples, 11.14%)</title><rect x="84.3387%" y="197" width="11.1423%" height="15" fill="rgb(235,30,7)" fg:x="64929" fg:w="8578"/><text x="84.5887%" y="207.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (567 samples, 0.74%)</title><rect x="94.7445%" y="181" width="0.7365%" height="15" fill="rgb(250,79,13)" fg:x="72940" fg:w="567"/><text x="94.9945%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (567 samples, 0.74%)</title><rect x="94.7445%" y="165" width="0.7365%" height="15" fill="rgb(211,146,34)" fg:x="72940" fg:w="567"/><text x="94.9945%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (567 samples, 0.74%)</title><rect x="94.7445%" y="149" width="0.7365%" height="15" fill="rgb(228,22,38)" fg:x="72940" fg:w="567"/><text x="94.9945%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (567 samples, 0.74%)</title><rect x="94.7445%" y="133" width="0.7365%" height="15" fill="rgb(235,168,5)" fg:x="72940" fg:w="567"/><text x="94.9945%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (928 samples, 1.21%)</title><rect x="95.4810%" y="197" width="1.2054%" height="15" fill="rgb(221,155,16)" fg:x="73507" fg:w="928"/><text x="95.7310%" y="207.50"></text></g><g><title>brc_rust::main (274 samples, 0.36%)</title><rect x="96.6864%" y="165" width="0.3559%" height="15" fill="rgb(215,215,53)" fg:x="74435" fg:w="274"/><text x="96.9364%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (344 samples, 0.45%)</title><rect x="96.6864%" y="197" width="0.4468%" height="15" fill="rgb(223,4,10)" fg:x="74435" fg:w="344"/><text x="96.9364%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (344 samples, 0.45%)</title><rect x="96.6864%" y="181" width="0.4468%" height="15" fill="rgb(234,103,6)" fg:x="74435" fg:w="344"/><text x="96.9364%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (70 samples, 0.09%)</title><rect x="97.0423%" y="165" width="0.0909%" height="15" fill="rgb(227,97,0)" fg:x="74709" fg:w="70"/><text x="97.2923%" y="175.50"></text></g><g><title>_start (76,496 samples, 99.36%)</title><rect x="0.0000%" y="565" width="99.3635%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="575.50">_start</text></g><g><title>__libc_start_main (76,496 samples, 99.36%)</title><rect x="0.0000%" y="549" width="99.3635%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="559.50">__libc_start_main</text></g><g><title>[libc.so.6] (76,496 samples, 99.36%)</title><rect x="0.0000%" y="533" width="99.3635%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="543.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (76,496 samples, 99.36%)</title><rect x="0.0000%" y="517" width="99.3635%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="527.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (76,496 samples, 99.36%)</title><rect x="0.0000%" y="501" width="99.3635%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (76,496 samples, 99.36%)</title><rect x="0.0000%" y="485" width="99.3635%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (76,496 samples, 99.36%)</title><rect x="0.0000%" y="469" width="99.3635%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (76,496 samples, 99.36%)</title><rect x="0.0000%" y="453" width="99.3635%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (76,496 samples, 99.36%)</title><rect x="0.0000%" y="437" width="99.3635%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (76,496 samples, 99.36%)</title><rect x="0.0000%" y="421" width="99.3635%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (76,496 samples, 99.36%)</title><rect x="0.0000%" y="405" width="99.3635%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (76,496 samples, 99.36%)</title><rect x="0.0000%" y="389" width="99.3635%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (76,496 samples, 99.36%)</title><rect x="0.0000%" y="373" width="99.3635%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (76,496 samples, 99.36%)</title><rect x="0.0000%" y="357" width="99.3635%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (76,496 samples, 99.36%)</title><rect x="0.0000%" y="341" width="99.3635%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (76,496 samples, 99.36%)</title><rect x="0.0000%" y="325" width="99.3635%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>brc_rust::main (76,496 samples, 99.36%)</title><rect x="0.0000%" y="309" width="99.3635%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="76496"/><text x="0.2500%" y="319.50">brc_rust::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (20,930 samples, 27.19%)</title><rect x="72.1768%" y="293" width="27.1868%" height="15" fill="rgb(233,42,35)" fg:x="55566" fg:w="20930"/><text x="72.4268%" y="303.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (20,930 samples, 27.19%)</title><rect x="72.1768%" y="277" width="27.1868%" height="15" fill="rgb(231,13,6)" fg:x="55566" fg:w="20930"/><text x="72.4268%" y="287.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (20,851 samples, 27.08%)</title><rect x="72.2794%" y="261" width="27.0841%" height="15" fill="rgb(207,181,40)" fg:x="55645" fg:w="20851"/><text x="72.5294%" y="271.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (13,389 samples, 17.39%)</title><rect x="81.9720%" y="245" width="17.3915%" height="15" fill="rgb(254,173,49)" fg:x="63107" fg:w="13389"/><text x="82.2220%" y="255.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13,382 samples, 17.38%)</title><rect x="81.9811%" y="229" width="17.3824%" height="15" fill="rgb(221,1,38)" fg:x="63114" fg:w="13382"/><text x="82.2311%" y="239.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (13,350 samples, 17.34%)</title><rect x="82.0227%" y="213" width="17.3408%" height="15" fill="rgb(206,124,46)" fg:x="63146" fg:w="13350"/><text x="82.2727%" y="223.50">hashbrown::raw::RawTableInn..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,717 samples, 2.23%)</title><rect x="97.1332%" y="197" width="2.2303%" height="15" fill="rgb(249,21,11)" fg:x="74779" fg:w="1717"/><text x="97.3832%" y="207.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,717 samples, 2.23%)</title><rect x="97.1332%" y="181" width="2.2303%" height="15" fill="rgb(222,201,40)" fg:x="74779" fg:w="1717"/><text x="97.3832%" y="191.50">c..</text></g><g><title>_compound_head (17 samples, 0.02%)</title><rect x="99.3739%" y="357" width="0.0221%" height="15" fill="rgb(235,61,29)" fg:x="76504" fg:w="17"/><text x="99.6239%" y="367.50"></text></g><g><title>mark_page_accessed (18 samples, 0.02%)</title><rect x="99.3960%" y="357" width="0.0234%" height="15" fill="rgb(219,207,3)" fg:x="76521" fg:w="18"/><text x="99.6460%" y="367.50"></text></g><g><title>__mod_lruvec_page_state (15 samples, 0.02%)</title><rect x="99.6259%" y="341" width="0.0195%" height="15" fill="rgb(222,56,46)" fg:x="76698" fg:w="15"/><text x="99.8759%" y="351.50"></text></g><g><title>lock_page_memcg (20 samples, 0.03%)</title><rect x="99.6467%" y="341" width="0.0260%" height="15" fill="rgb(239,76,54)" fg:x="76714" fg:w="20"/><text x="99.8967%" y="351.50"></text></g><g><title>mark_page_accessed (8 samples, 0.01%)</title><rect x="99.6727%" y="341" width="0.0104%" height="15" fill="rgb(231,124,27)" fg:x="76734" fg:w="8"/><text x="99.9227%" y="351.50"></text></g><g><title>__mod_memcg_lruvec_state (35 samples, 0.05%)</title><rect x="99.8480%" y="293" width="0.0455%" height="15" fill="rgb(249,195,6)" fg:x="76869" fg:w="35"/><text x="100.0980%" y="303.50"></text></g><g><title>cgroup_rstat_updated (9 samples, 0.01%)</title><rect x="99.8818%" y="277" width="0.0117%" height="15" fill="rgb(237,174,47)" fg:x="76895" fg:w="9"/><text x="100.1318%" y="287.50"></text></g><g><title>__mod_node_page_state (13 samples, 0.02%)</title><rect x="99.8935%" y="293" width="0.0169%" height="15" fill="rgb(206,201,31)" fg:x="76904" fg:w="13"/><text x="100.1435%" y="303.50"></text></g><g><title>__mod_lruvec_state (69 samples, 0.09%)</title><rect x="99.8233%" y="309" width="0.0896%" height="15" fill="rgb(231,57,52)" fg:x="76850" fg:w="69"/><text x="100.0733%" y="319.50"></text></g><g><title>__mod_lruvec_page_state (102 samples, 0.13%)</title><rect x="99.7896%" y="325" width="0.1325%" height="15" fill="rgb(248,177,22)" fg:x="76824" fg:w="102"/><text x="100.0396%" y="335.50"></text></g><g><title>page_remove_rmap (194 samples, 0.25%)</title><rect x="99.6831%" y="341" width="0.2520%" height="15" fill="rgb(215,211,37)" fg:x="76742" fg:w="194"/><text x="99.9331%" y="351.50"></text></g><g><title>lock_page_memcg (9 samples, 0.01%)</title><rect x="99.9234%" y="325" width="0.0117%" height="15" fill="rgb(241,128,51)" fg:x="76927" fg:w="9"/><text x="100.1734%" y="335.50"></text></g><g><title>folio_memcg_lock.part.0 (9 samples, 0.01%)</title><rect x="99.9234%" y="309" width="0.0117%" height="15" fill="rgb(227,165,31)" fg:x="76927" fg:w="9"/><text x="100.1734%" y="319.50"></text></g><g><title>free_pages_and_swap_cache (24 samples, 0.03%)</title><rect x="99.9389%" y="309" width="0.0312%" height="15" fill="rgb(228,167,24)" fg:x="76939" fg:w="24"/><text x="100.1889%" y="319.50"></text></g><g><title>release_pages (10 samples, 0.01%)</title><rect x="99.9571%" y="293" width="0.0130%" height="15" fill="rgb(228,143,12)" fg:x="76953" fg:w="10"/><text x="100.2071%" y="303.50"></text></g><g><title>free_swap_cache (9 samples, 0.01%)</title><rect x="99.9701%" y="309" width="0.0117%" height="15" fill="rgb(249,149,8)" fg:x="76963" fg:w="9"/><text x="100.2201%" y="319.50"></text></g><g><title>tlb_flush_mmu (35 samples, 0.05%)</title><rect x="99.9389%" y="341" width="0.0455%" height="15" fill="rgb(243,35,44)" fg:x="76939" fg:w="35"/><text x="100.1889%" y="351.50"></text></g><g><title>tlb_batch_pages_flush (35 samples, 0.05%)</title><rect x="99.9389%" y="325" width="0.0455%" height="15" fill="rgb(246,89,9)" fg:x="76939" fg:w="35"/><text x="100.1889%" y="335.50"></text></g><g><title>unlock_page_memcg (9 samples, 0.01%)</title><rect x="99.9844%" y="341" width="0.0117%" height="15" fill="rgb(233,213,13)" fg:x="76974" fg:w="9"/><text x="100.2344%" y="351.50"></text></g><g><title>all (76,986 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="76986"/><text x="0.2500%" y="607.50"></text></g><g><title>brc-rust (76,986 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="76986"/><text x="0.2500%" y="591.50">brc-rust</text></g><g><title>entry_SYSCALL_64_after_hwframe (490 samples, 0.64%)</title><rect x="99.3635%" y="565" width="0.6365%" height="15" fill="rgb(209,217,16)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="575.50"></text></g><g><title>do_syscall_64 (490 samples, 0.64%)</title><rect x="99.3635%" y="549" width="0.6365%" height="15" fill="rgb(219,88,35)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="559.50"></text></g><g><title>__x64_sys_exit_group (490 samples, 0.64%)</title><rect x="99.3635%" y="533" width="0.6365%" height="15" fill="rgb(220,193,23)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="543.50"></text></g><g><title>do_group_exit (490 samples, 0.64%)</title><rect x="99.3635%" y="517" width="0.6365%" height="15" fill="rgb(230,90,52)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="527.50"></text></g><g><title>do_exit (490 samples, 0.64%)</title><rect x="99.3635%" y="501" width="0.6365%" height="15" fill="rgb(252,106,19)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="511.50"></text></g><g><title>exit_mm (490 samples, 0.64%)</title><rect x="99.3635%" y="485" width="0.6365%" height="15" fill="rgb(206,74,20)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="495.50"></text></g><g><title>mmput (490 samples, 0.64%)</title><rect x="99.3635%" y="469" width="0.6365%" height="15" fill="rgb(230,138,44)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="479.50"></text></g><g><title>__mmput (490 samples, 0.64%)</title><rect x="99.3635%" y="453" width="0.6365%" height="15" fill="rgb(235,182,43)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="463.50"></text></g><g><title>exit_mmap (490 samples, 0.64%)</title><rect x="99.3635%" y="437" width="0.6365%" height="15" fill="rgb(242,16,51)" fg:x="76496" fg:w="490"/><text x="99.6135%" y="447.50"></text></g><g><title>unmap_vmas (489 samples, 0.64%)</title><rect x="99.3648%" y="421" width="0.6352%" height="15" fill="rgb(248,9,4)" fg:x="76497" fg:w="489"/><text x="99.6148%" y="431.50"></text></g><g><title>unmap_single_vma (489 samples, 0.64%)</title><rect x="99.3648%" y="405" width="0.6352%" height="15" fill="rgb(210,31,22)" fg:x="76497" fg:w="489"/><text x="99.6148%" y="415.50"></text></g><g><title>unmap_page_range (489 samples, 0.64%)</title><rect x="99.3648%" y="389" width="0.6352%" height="15" fill="rgb(239,54,39)" fg:x="76497" fg:w="489"/><text x="99.6148%" y="399.50"></text></g><g><title>zap_pmd_range.isra.0 (489 samples, 0.64%)</title><rect x="99.3648%" y="373" width="0.6352%" height="15" fill="rgb(230,99,41)" fg:x="76497" fg:w="489"/><text x="99.6148%" y="383.50"></text></g><g><title>zap_pte_range (438 samples, 0.57%)</title><rect x="99.4311%" y="357" width="0.5689%" height="15" fill="rgb(253,106,12)" fg:x="76548" fg:w="438"/><text x="99.6811%" y="367.50"></text></g></svg></svg>