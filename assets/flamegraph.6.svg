<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="23149"><g><title>core::option::Option&lt;T&gt;::as_ref (149 samples, 0.64%)</title><rect x="27.9062%" y="261" width="0.6437%" height="15" fill="rgb(227,0,7)" fg:x="6460" fg:w="149"/><text x="28.1562%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (56 samples, 0.24%)</title><rect x="28.5498%" y="261" width="0.2419%" height="15" fill="rgb(217,0,24)" fg:x="6609" fg:w="56"/><text x="28.7998%" y="271.50"></text></g><g><title>[libc.so.6] (4,328 samples, 18.70%)</title><rect x="29.2799%" y="229" width="18.6963%" height="15" fill="rgb(221,193,54)" fg:x="6778" fg:w="4328"/><text x="29.5299%" y="239.50">[libc.so.6]</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (4,698 samples, 20.29%)</title><rect x="28.7917%" y="245" width="20.2946%" height="15" fill="rgb(248,212,6)" fg:x="6665" fg:w="4698"/><text x="29.0417%" y="255.50">&lt;u8 as core::slice::cmp::SliceOr..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (257 samples, 1.11%)</title><rect x="47.9762%" y="229" width="1.1102%" height="15" fill="rgb(208,68,35)" fg:x="11106" fg:w="257"/><text x="48.2262%" y="239.50"></text></g><g><title>brc_rust::Map::get_mut_with_hash (11,023 samples, 47.62%)</title><rect x="1.9137%" y="277" width="47.6176%" height="15" fill="rgb(232,128,0)" fg:x="443" fg:w="11023"/><text x="2.1637%" y="287.50">brc_rust::Map::get_mut_with_hash</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (4,801 samples, 20.74%)</title><rect x="28.7917%" y="261" width="20.7396%" height="15" fill="rgb(207,160,47)" fg:x="6665" fg:w="4801"/><text x="29.0417%" y="271.50">core::slice::cmp::&lt;impl core::cmp..</text></g><g><title>brc_rust::main (103 samples, 0.44%)</title><rect x="49.0864%" y="245" width="0.4449%" height="15" fill="rgb(228,23,34)" fg:x="11363" fg:w="103"/><text x="49.3364%" y="255.50"></text></g><g><title>__mod_lruvec_page_state (5 samples, 0.02%)</title><rect x="67.1217%" y="101" width="0.0216%" height="15" fill="rgb(218,30,26)" fg:x="15538" fg:w="5"/><text x="67.3717%" y="111.50"></text></g><g><title>lock_page_memcg (4 samples, 0.02%)</title><rect x="67.1433%" y="101" width="0.0173%" height="15" fill="rgb(220,122,19)" fg:x="15543" fg:w="4"/><text x="67.3933%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (6 samples, 0.03%)</title><rect x="67.2081%" y="53" width="0.0259%" height="15" fill="rgb(250,228,42)" fg:x="15558" fg:w="6"/><text x="67.4581%" y="63.50"></text></g><g><title>__mod_lruvec_state (9 samples, 0.04%)</title><rect x="67.1994%" y="69" width="0.0389%" height="15" fill="rgb(240,193,28)" fg:x="15556" fg:w="9"/><text x="67.4494%" y="79.50"></text></g><g><title>__mod_lruvec_page_state (13 samples, 0.06%)</title><rect x="67.1865%" y="85" width="0.0562%" height="15" fill="rgb(216,20,37)" fg:x="15553" fg:w="13"/><text x="67.4365%" y="95.50"></text></g><g><title>page_add_file_rmap (20 samples, 0.09%)</title><rect x="67.1606%" y="101" width="0.0864%" height="15" fill="rgb(206,188,39)" fg:x="15547" fg:w="20"/><text x="67.4106%" y="111.50"></text></g><g><title>percpu_counter_add_batch (3 samples, 0.01%)</title><rect x="67.2470%" y="101" width="0.0130%" height="15" fill="rgb(217,207,13)" fg:x="15567" fg:w="3"/><text x="67.4970%" y="111.50"></text></g><g><title>do_set_pte (44 samples, 0.19%)</title><rect x="67.0742%" y="117" width="0.1901%" height="15" fill="rgb(231,73,38)" fg:x="15527" fg:w="44"/><text x="67.3242%" y="127.50"></text></g><g><title>next_uptodate_page (5 samples, 0.02%)</title><rect x="67.2729%" y="117" width="0.0216%" height="15" fill="rgb(225,20,46)" fg:x="15573" fg:w="5"/><text x="67.5229%" y="127.50"></text></g><g><title>filemap_map_pages (69 samples, 0.30%)</title><rect x="67.0094%" y="133" width="0.2981%" height="15" fill="rgb(210,31,41)" fg:x="15512" fg:w="69"/><text x="67.2594%" y="143.50"></text></g><g><title>xas_find (3 samples, 0.01%)</title><rect x="67.2945%" y="117" width="0.0130%" height="15" fill="rgb(221,200,47)" fg:x="15578" fg:w="3"/><text x="67.5445%" y="127.50"></text></g><g><title>do_read_fault (72 samples, 0.31%)</title><rect x="67.0051%" y="149" width="0.3110%" height="15" fill="rgb(226,26,5)" fg:x="15511" fg:w="72"/><text x="67.2551%" y="159.50"></text></g><g><title>__handle_mm_fault (74 samples, 0.32%)</title><rect x="67.0007%" y="197" width="0.3197%" height="15" fill="rgb(249,33,26)" fg:x="15510" fg:w="74"/><text x="67.2507%" y="207.50"></text></g><g><title>handle_pte_fault (74 samples, 0.32%)</title><rect x="67.0007%" y="181" width="0.3197%" height="15" fill="rgb(235,183,28)" fg:x="15510" fg:w="74"/><text x="67.2507%" y="191.50"></text></g><g><title>do_fault (73 samples, 0.32%)</title><rect x="67.0051%" y="165" width="0.3153%" height="15" fill="rgb(221,5,38)" fg:x="15511" fg:w="73"/><text x="67.2551%" y="175.50"></text></g><g><title>handle_mm_fault (76 samples, 0.33%)</title><rect x="66.9964%" y="213" width="0.3283%" height="15" fill="rgb(247,18,42)" fg:x="15509" fg:w="76"/><text x="67.2464%" y="223.50"></text></g><g><title>brc_rust::main (4,120 samples, 17.80%)</title><rect x="49.5313%" y="277" width="17.7977%" height="15" fill="rgb(241,131,45)" fg:x="11466" fg:w="4120"/><text x="49.7813%" y="287.50">brc_rust::main</text></g><g><title>asm_exc_page_fault (81 samples, 0.35%)</title><rect x="66.9791%" y="261" width="0.3499%" height="15" fill="rgb(249,31,29)" fg:x="15505" fg:w="81"/><text x="67.2291%" y="271.50"></text></g><g><title>exc_page_fault (81 samples, 0.35%)</title><rect x="66.9791%" y="245" width="0.3499%" height="15" fill="rgb(225,111,53)" fg:x="15505" fg:w="81"/><text x="67.2291%" y="255.50"></text></g><g><title>do_user_addr_fault (81 samples, 0.35%)</title><rect x="66.9791%" y="229" width="0.3499%" height="15" fill="rgb(238,160,17)" fg:x="15505" fg:w="81"/><text x="67.2291%" y="239.50"></text></g><g><title>PageHeadHuge (5 samples, 0.02%)</title><rect x="87.6150%" y="133" width="0.0216%" height="15" fill="rgb(214,148,48)" fg:x="20282" fg:w="5"/><text x="87.8650%" y="143.50"></text></g><g><title>_compound_head (9 samples, 0.04%)</title><rect x="87.9908%" y="117" width="0.0389%" height="15" fill="rgb(232,36,49)" fg:x="20369" fg:w="9"/><text x="88.2408%" y="127.50"></text></g><g><title>__mod_lruvec_page_state (11 samples, 0.05%)</title><rect x="88.3148%" y="101" width="0.0475%" height="15" fill="rgb(209,103,24)" fg:x="20444" fg:w="11"/><text x="88.5648%" y="111.50"></text></g><g><title>lock_page_memcg (3 samples, 0.01%)</title><rect x="88.3623%" y="101" width="0.0130%" height="15" fill="rgb(229,88,8)" fg:x="20455" fg:w="3"/><text x="88.6123%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (30 samples, 0.13%)</title><rect x="88.7684%" y="53" width="0.1296%" height="15" fill="rgb(213,181,19)" fg:x="20549" fg:w="30"/><text x="89.0184%" y="63.50"></text></g><g><title>cgroup_rstat_updated (4 samples, 0.02%)</title><rect x="88.8807%" y="37" width="0.0173%" height="15" fill="rgb(254,191,54)" fg:x="20575" fg:w="4"/><text x="89.1307%" y="47.50"></text></g><g><title>__mod_node_page_state (19 samples, 0.08%)</title><rect x="88.8980%" y="53" width="0.0821%" height="15" fill="rgb(241,83,37)" fg:x="20579" fg:w="19"/><text x="89.1480%" y="63.50"></text></g><g><title>__mod_lruvec_state (61 samples, 0.26%)</title><rect x="88.7209%" y="69" width="0.2635%" height="15" fill="rgb(233,36,39)" fg:x="20538" fg:w="61"/><text x="88.9709%" y="79.50"></text></g><g><title>__mod_lruvec_page_state (92 samples, 0.40%)</title><rect x="88.6259%" y="85" width="0.3974%" height="15" fill="rgb(226,3,54)" fg:x="20516" fg:w="92"/><text x="88.8759%" y="95.50"></text></g><g><title>srso_alias_safe_ret (5 samples, 0.02%)</title><rect x="89.0017%" y="69" width="0.0216%" height="15" fill="rgb(245,192,40)" fg:x="20603" fg:w="5"/><text x="89.2517%" y="79.50"></text></g><g><title>page_add_file_rmap (164 samples, 0.71%)</title><rect x="88.3753%" y="101" width="0.7085%" height="15" fill="rgb(238,167,29)" fg:x="20458" fg:w="164"/><text x="88.6253%" y="111.50"></text></g><g><title>lock_page_memcg (13 samples, 0.06%)</title><rect x="89.0276%" y="85" width="0.0562%" height="15" fill="rgb(232,182,51)" fg:x="20609" fg:w="13"/><text x="89.2776%" y="95.50"></text></g><g><title>folio_memcg_lock.part.0 (12 samples, 0.05%)</title><rect x="89.0319%" y="69" width="0.0518%" height="15" fill="rgb(231,60,39)" fg:x="20610" fg:w="12"/><text x="89.2819%" y="79.50"></text></g><g><title>percpu_counter_add_batch (7 samples, 0.03%)</title><rect x="89.0838%" y="101" width="0.0302%" height="15" fill="rgb(208,69,12)" fg:x="20622" fg:w="7"/><text x="89.3338%" y="111.50"></text></g><g><title>do_set_pte (266 samples, 1.15%)</title><rect x="88.0297%" y="117" width="1.1491%" height="15" fill="rgb(235,93,37)" fg:x="20378" fg:w="266"/><text x="88.2797%" y="127.50"></text></g><g><title>unlock_page_memcg (11 samples, 0.05%)</title><rect x="89.1313%" y="101" width="0.0475%" height="15" fill="rgb(213,116,39)" fg:x="20633" fg:w="11"/><text x="89.3813%" y="111.50"></text></g><g><title>filemap_map_pmd (3 samples, 0.01%)</title><rect x="89.1788%" y="117" width="0.0130%" height="15" fill="rgb(222,207,29)" fg:x="20644" fg:w="3"/><text x="89.4288%" y="127.50"></text></g><g><title>native_set_pte (8 samples, 0.03%)</title><rect x="89.1918%" y="117" width="0.0346%" height="15" fill="rgb(206,96,30)" fg:x="20647" fg:w="8"/><text x="89.4418%" y="127.50"></text></g><g><title>next_uptodate_page (43 samples, 0.19%)</title><rect x="89.2263%" y="117" width="0.1858%" height="15" fill="rgb(218,138,4)" fg:x="20655" fg:w="43"/><text x="89.4763%" y="127.50"></text></g><g><title>page_add_file_rmap (4 samples, 0.02%)</title><rect x="89.4121%" y="117" width="0.0173%" height="15" fill="rgb(250,191,14)" fg:x="20698" fg:w="4"/><text x="89.6621%" y="127.50"></text></g><g><title>xas_load (12 samples, 0.05%)</title><rect x="89.4812%" y="101" width="0.0518%" height="15" fill="rgb(239,60,40)" fg:x="20714" fg:w="12"/><text x="89.7312%" y="111.50"></text></g><g><title>xas_start (3 samples, 0.01%)</title><rect x="89.5201%" y="85" width="0.0130%" height="15" fill="rgb(206,27,48)" fg:x="20723" fg:w="3"/><text x="89.7701%" y="95.50"></text></g><g><title>filemap_map_pages (439 samples, 1.90%)</title><rect x="87.6409%" y="133" width="1.8964%" height="15" fill="rgb(225,35,8)" fg:x="20288" fg:w="439"/><text x="87.8909%" y="143.50">f..</text></g><g><title>xas_find (20 samples, 0.09%)</title><rect x="89.4509%" y="117" width="0.0864%" height="15" fill="rgb(250,213,24)" fg:x="20707" fg:w="20"/><text x="89.7009%" y="127.50"></text></g><g><title>next_uptodate_page (4 samples, 0.02%)</title><rect x="89.5373%" y="133" width="0.0173%" height="15" fill="rgb(247,123,22)" fg:x="20727" fg:w="4"/><text x="89.7873%" y="143.50"></text></g><g><title>__alloc_pages (5 samples, 0.02%)</title><rect x="89.5589%" y="101" width="0.0216%" height="15" fill="rgb(231,138,38)" fg:x="20732" fg:w="5"/><text x="89.8089%" y="111.50"></text></g><g><title>alloc_pages (7 samples, 0.03%)</title><rect x="89.5546%" y="117" width="0.0302%" height="15" fill="rgb(231,145,46)" fg:x="20731" fg:w="7"/><text x="89.8046%" y="127.50"></text></g><g><title>pte_alloc_one (8 samples, 0.03%)</title><rect x="89.5546%" y="133" width="0.0346%" height="15" fill="rgb(251,118,11)" fg:x="20731" fg:w="8"/><text x="89.8046%" y="143.50"></text></g><g><title>do_read_fault (463 samples, 2.00%)</title><rect x="87.6150%" y="149" width="2.0001%" height="15" fill="rgb(217,147,25)" fg:x="20282" fg:w="463"/><text x="87.8650%" y="159.50">d..</text></g><g><title>srso_alias_safe_ret (5 samples, 0.02%)</title><rect x="89.5935%" y="133" width="0.0216%" height="15" fill="rgb(247,81,37)" fg:x="20740" fg:w="5"/><text x="89.8435%" y="143.50"></text></g><g><title>do_fault (464 samples, 2.00%)</title><rect x="87.6150%" y="165" width="2.0044%" height="15" fill="rgb(209,12,38)" fg:x="20282" fg:w="464"/><text x="87.8650%" y="175.50">d..</text></g><g><title>handle_pte_fault (474 samples, 2.05%)</title><rect x="87.5805%" y="181" width="2.0476%" height="15" fill="rgb(227,1,9)" fg:x="20274" fg:w="474"/><text x="87.8305%" y="191.50">h..</text></g><g><title>__handle_mm_fault (499 samples, 2.16%)</title><rect x="87.4768%" y="197" width="2.1556%" height="15" fill="rgb(248,47,43)" fg:x="20250" fg:w="499"/><text x="87.7268%" y="207.50">_..</text></g><g><title>count_memcg_events.constprop.0 (6 samples, 0.03%)</title><rect x="89.6324%" y="197" width="0.0259%" height="15" fill="rgb(221,10,30)" fg:x="20749" fg:w="6"/><text x="89.8824%" y="207.50"></text></g><g><title>handle_mm_fault (514 samples, 2.22%)</title><rect x="87.4465%" y="213" width="2.2204%" height="15" fill="rgb(210,229,1)" fg:x="20243" fg:w="514"/><text x="87.6965%" y="223.50">h..</text></g><g><title>find_vma (12 samples, 0.05%)</title><rect x="89.6972%" y="197" width="0.0518%" height="15" fill="rgb(222,148,37)" fg:x="20764" fg:w="12"/><text x="89.9472%" y="207.50"></text></g><g><title>mt_find (10 samples, 0.04%)</title><rect x="89.7058%" y="181" width="0.0432%" height="15" fill="rgb(234,67,33)" fg:x="20766" fg:w="10"/><text x="89.9558%" y="191.50"></text></g><g><title>mtree_range_walk (8 samples, 0.03%)</title><rect x="89.7145%" y="165" width="0.0346%" height="15" fill="rgb(247,98,35)" fg:x="20768" fg:w="8"/><text x="89.9645%" y="175.50"></text></g><g><title>lock_mm_and_find_vma (20 samples, 0.09%)</title><rect x="89.6669%" y="213" width="0.0864%" height="15" fill="rgb(247,138,52)" fg:x="20757" fg:w="20"/><text x="89.9169%" y="223.50"></text></g><g><title>do_user_addr_fault (595 samples, 2.57%)</title><rect x="87.2003%" y="229" width="2.5703%" height="15" fill="rgb(213,79,30)" fg:x="20186" fg:w="595"/><text x="87.4503%" y="239.50">do..</text></g><g><title>mem_cgroup_from_task (4 samples, 0.02%)</title><rect x="89.7533%" y="213" width="0.0173%" height="15" fill="rgb(246,177,23)" fg:x="20777" fg:w="4"/><text x="90.0033%" y="223.50"></text></g><g><title>asm_exc_page_fault (598 samples, 2.58%)</title><rect x="87.1960%" y="261" width="2.5833%" height="15" fill="rgb(230,62,27)" fg:x="20185" fg:w="598"/><text x="87.4460%" y="271.50">as..</text></g><g><title>exc_page_fault (598 samples, 2.58%)</title><rect x="87.1960%" y="245" width="2.5833%" height="15" fill="rgb(216,154,8)" fg:x="20185" fg:w="598"/><text x="87.4460%" y="255.50">ex..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_mul (1,252 samples, 5.41%)</title><rect x="89.7836%" y="261" width="5.4084%" height="15" fill="rgb(244,35,45)" fg:x="20784" fg:w="1252"/><text x="90.0336%" y="271.50">core::n..</text></g><g><title>brc_rust::process (22,652 samples, 97.85%)</title><rect x="0.0086%" y="293" width="97.8530%" height="15" fill="rgb(251,115,12)" fg:x="2" fg:w="22652"/><text x="0.2586%" y="303.50">brc_rust::process</text></g><g><title>brc_rust::parse_line (7,068 samples, 30.53%)</title><rect x="67.3290%" y="277" width="30.5326%" height="15" fill="rgb(240,54,50)" fg:x="15586" fg:w="7068"/><text x="67.5790%" y="287.50">brc_rust::parse_line</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (618 samples, 2.67%)</title><rect x="95.1920%" y="261" width="2.6697%" height="15" fill="rgb(233,84,52)" fg:x="22036" fg:w="618"/><text x="95.4420%" y="271.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (618 samples, 2.67%)</title><rect x="95.1920%" y="245" width="2.6697%" height="15" fill="rgb(207,117,47)" fg:x="22036" fg:w="618"/><text x="95.4420%" y="255.50">&lt;c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.04%)</title><rect x="97.8185%" y="229" width="0.0432%" height="15" fill="rgb(249,43,39)" fg:x="22644" fg:w="10"/><text x="98.0685%" y="239.50"></text></g><g><title>brc_rust::main (10 samples, 0.04%)</title><rect x="97.8185%" y="213" width="0.0432%" height="15" fill="rgb(209,38,44)" fg:x="22644" fg:w="10"/><text x="98.0685%" y="223.50"></text></g><g><title>[unknown] (22,654 samples, 97.86%)</title><rect x="0.0043%" y="325" width="97.8617%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="22654"/><text x="0.2543%" y="335.50">[unknown]</text></g><g><title>brc_rust::main (22,654 samples, 97.86%)</title><rect x="0.0043%" y="309" width="97.8617%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="22654"/><text x="0.2543%" y="319.50">brc_rust::main</text></g><g><title>__tlb_remove_page_size (5 samples, 0.02%)</title><rect x="97.8746%" y="117" width="0.0216%" height="15" fill="rgb(211,96,35)" fg:x="22657" fg:w="5"/><text x="98.1246%" y="127.50"></text></g><g><title>_compound_head (8 samples, 0.03%)</title><rect x="97.8962%" y="117" width="0.0346%" height="15" fill="rgb(253,215,40)" fg:x="22662" fg:w="8"/><text x="98.1462%" y="127.50"></text></g><g><title>mark_page_accessed (18 samples, 0.08%)</title><rect x="97.9308%" y="117" width="0.0778%" height="15" fill="rgb(211,81,21)" fg:x="22670" fg:w="18"/><text x="98.1808%" y="127.50"></text></g><g><title>srso_alias_safe_ret (4 samples, 0.02%)</title><rect x="98.0215%" y="117" width="0.0173%" height="15" fill="rgb(208,190,38)" fg:x="22691" fg:w="4"/><text x="98.2715%" y="127.50"></text></g><g><title>PageHuge (8 samples, 0.03%)</title><rect x="98.7861%" y="101" width="0.0346%" height="15" fill="rgb(235,213,38)" fg:x="22868" fg:w="8"/><text x="99.0361%" y="111.50"></text></g><g><title>__mod_lruvec_page_state (17 samples, 0.07%)</title><rect x="98.8207%" y="101" width="0.0734%" height="15" fill="rgb(237,122,38)" fg:x="22876" fg:w="17"/><text x="99.0707%" y="111.50"></text></g><g><title>lock_page_memcg (14 samples, 0.06%)</title><rect x="98.8941%" y="101" width="0.0605%" height="15" fill="rgb(244,218,35)" fg:x="22893" fg:w="14"/><text x="99.1441%" y="111.50"></text></g><g><title>mark_page_accessed (3 samples, 0.01%)</title><rect x="98.9546%" y="101" width="0.0130%" height="15" fill="rgb(240,68,47)" fg:x="22907" fg:w="3"/><text x="99.2046%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (38 samples, 0.16%)</title><rect x="99.4989%" y="53" width="0.1642%" height="15" fill="rgb(210,16,53)" fg:x="23033" fg:w="38"/><text x="99.7489%" y="63.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.01%)</title><rect x="99.6501%" y="37" width="0.0130%" height="15" fill="rgb(235,124,12)" fg:x="23068" fg:w="3"/><text x="99.9001%" y="47.50"></text></g><g><title>__mod_node_page_state (15 samples, 0.06%)</title><rect x="99.6631%" y="53" width="0.0648%" height="15" fill="rgb(224,169,11)" fg:x="23071" fg:w="15"/><text x="99.9131%" y="63.50"></text></g><g><title>__mod_lruvec_state (78 samples, 0.34%)</title><rect x="99.3952%" y="69" width="0.3369%" height="15" fill="rgb(250,166,2)" fg:x="23009" fg:w="78"/><text x="99.6452%" y="79.50"></text></g><g><title>__mod_lruvec_page_state (106 samples, 0.46%)</title><rect x="99.3088%" y="85" width="0.4579%" height="15" fill="rgb(242,216,29)" fg:x="22989" fg:w="106"/><text x="99.5588%" y="95.50"></text></g><g><title>srso_alias_safe_ret (4 samples, 0.02%)</title><rect x="99.7494%" y="69" width="0.0173%" height="15" fill="rgb(230,116,27)" fg:x="23091" fg:w="4"/><text x="99.9994%" y="79.50"></text></g><g><title>lock_page_memcg (9 samples, 0.04%)</title><rect x="99.7754%" y="85" width="0.0389%" height="15" fill="rgb(228,99,48)" fg:x="23097" fg:w="9"/><text x="100.0254%" y="95.50"></text></g><g><title>folio_memcg_lock.part.0 (9 samples, 0.04%)</title><rect x="99.7754%" y="69" width="0.0389%" height="15" fill="rgb(253,11,6)" fg:x="23097" fg:w="9"/><text x="100.0254%" y="79.50"></text></g><g><title>page_remove_rmap (197 samples, 0.85%)</title><rect x="98.9676%" y="101" width="0.8510%" height="15" fill="rgb(247,143,39)" fg:x="22910" fg:w="197"/><text x="99.2176%" y="111.50"></text></g><g><title>free_pages_and_swap_cache (26 samples, 0.11%)</title><rect x="99.8272%" y="69" width="0.1123%" height="15" fill="rgb(236,97,10)" fg:x="23109" fg:w="26"/><text x="100.0772%" y="79.50"></text></g><g><title>release_pages (11 samples, 0.05%)</title><rect x="99.8920%" y="53" width="0.0475%" height="15" fill="rgb(233,208,19)" fg:x="23124" fg:w="11"/><text x="100.1420%" y="63.50"></text></g><g><title>tlb_flush_mmu (31 samples, 0.13%)</title><rect x="99.8272%" y="101" width="0.1339%" height="15" fill="rgb(216,164,2)" fg:x="23109" fg:w="31"/><text x="100.0772%" y="111.50"></text></g><g><title>tlb_batch_pages_flush (31 samples, 0.13%)</title><rect x="99.8272%" y="85" width="0.1339%" height="15" fill="rgb(220,129,5)" fg:x="23109" fg:w="31"/><text x="100.0772%" y="95.50"></text></g><g><title>srso_alias_safe_ret (3 samples, 0.01%)</title><rect x="99.9482%" y="69" width="0.0130%" height="15" fill="rgb(242,17,10)" fg:x="23137" fg:w="3"/><text x="100.1982%" y="79.50"></text></g><g><title>unlock_page_memcg (4 samples, 0.02%)</title><rect x="99.9611%" y="101" width="0.0173%" height="15" fill="rgb(242,107,0)" fg:x="23140" fg:w="4"/><text x="100.2111%" y="111.50"></text></g><g><title>all (23,149 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="23149"/><text x="0.2500%" y="367.50"></text></g><g><title>brc-rust (23,149 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="23149"/><text x="0.2500%" y="351.50">brc-rust</text></g><g><title>entry_SYSCALL_64_after_hwframe (493 samples, 2.13%)</title><rect x="97.8703%" y="325" width="2.1297%" height="15" fill="rgb(215,21,27)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="335.50">e..</text></g><g><title>do_syscall_64 (493 samples, 2.13%)</title><rect x="97.8703%" y="309" width="2.1297%" height="15" fill="rgb(232,23,21)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="319.50">d..</text></g><g><title>__x64_sys_exit_group (493 samples, 2.13%)</title><rect x="97.8703%" y="293" width="2.1297%" height="15" fill="rgb(244,5,23)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="303.50">_..</text></g><g><title>do_group_exit (493 samples, 2.13%)</title><rect x="97.8703%" y="277" width="2.1297%" height="15" fill="rgb(226,81,46)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="287.50">d..</text></g><g><title>do_exit (493 samples, 2.13%)</title><rect x="97.8703%" y="261" width="2.1297%" height="15" fill="rgb(247,70,30)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="271.50">d..</text></g><g><title>exit_mm (493 samples, 2.13%)</title><rect x="97.8703%" y="245" width="2.1297%" height="15" fill="rgb(212,68,19)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="255.50">e..</text></g><g><title>mmput (493 samples, 2.13%)</title><rect x="97.8703%" y="229" width="2.1297%" height="15" fill="rgb(240,187,13)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="239.50">m..</text></g><g><title>__mmput (493 samples, 2.13%)</title><rect x="97.8703%" y="213" width="2.1297%" height="15" fill="rgb(223,113,26)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="223.50">_..</text></g><g><title>exit_mmap (493 samples, 2.13%)</title><rect x="97.8703%" y="197" width="2.1297%" height="15" fill="rgb(206,192,2)" fg:x="22656" fg:w="493"/><text x="98.1203%" y="207.50">e..</text></g><g><title>unmap_vmas (492 samples, 2.13%)</title><rect x="97.8746%" y="181" width="2.1254%" height="15" fill="rgb(241,108,4)" fg:x="22657" fg:w="492"/><text x="98.1246%" y="191.50">u..</text></g><g><title>unmap_single_vma (492 samples, 2.13%)</title><rect x="97.8746%" y="165" width="2.1254%" height="15" fill="rgb(247,173,49)" fg:x="22657" fg:w="492"/><text x="98.1246%" y="175.50">u..</text></g><g><title>unmap_page_range (492 samples, 2.13%)</title><rect x="97.8746%" y="149" width="2.1254%" height="15" fill="rgb(224,114,35)" fg:x="22657" fg:w="492"/><text x="98.1246%" y="159.50">u..</text></g><g><title>zap_pmd_range.isra.0 (492 samples, 2.13%)</title><rect x="97.8746%" y="133" width="2.1254%" height="15" fill="rgb(245,159,27)" fg:x="22657" fg:w="492"/><text x="98.1246%" y="143.50">z..</text></g><g><title>zap_pte_range (452 samples, 1.95%)</title><rect x="98.0474%" y="117" width="1.9526%" height="15" fill="rgb(245,172,44)" fg:x="22697" fg:w="452"/><text x="98.2974%" y="127.50">z..</text></g><g><title>vm_normal_page (5 samples, 0.02%)</title><rect x="99.9784%" y="101" width="0.0216%" height="15" fill="rgb(236,23,11)" fg:x="23144" fg:w="5"/><text x="100.2284%" y="111.50"></text></g></svg></svg>