<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="16679"><g><title>brc_rust::Map::new (2 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0120%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0120%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0120%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="271.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0120%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="255.50"></text></g><g><title>exc_page_fault (2 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0120%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="239.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0120%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="223.50"></text></g><g><title>brc_rust::main (48 samples, 0.29%)</title><rect x="0.0120%" y="293" width="0.2878%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="48"/><text x="0.2620%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (228 samples, 1.37%)</title><rect x="32.3521%" y="261" width="1.3670%" height="15" fill="rgb(228,23,34)" fg:x="5396" fg:w="228"/><text x="32.6021%" y="271.50"></text></g><g><title>brc_rust::Map::get_mut_with_hash (4,422 samples, 26.51%)</title><rect x="7.8482%" y="277" width="26.5124%" height="15" fill="rgb(218,30,26)" fg:x="1309" fg:w="4422"/><text x="8.0982%" y="287.50">brc_rust::Map::get_mut_with_hash</text></g><g><title>core::option::Option&lt;T&gt;::expect (107 samples, 0.64%)</title><rect x="33.7190%" y="261" width="0.6415%" height="15" fill="rgb(220,122,19)" fg:x="5624" fg:w="107"/><text x="33.9690%" y="271.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.01%)</title><rect x="57.4435%" y="101" width="0.0120%" height="15" fill="rgb(250,228,42)" fg:x="9581" fg:w="2"/><text x="57.6935%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (8 samples, 0.05%)</title><rect x="57.5454%" y="53" width="0.0480%" height="15" fill="rgb(240,193,28)" fg:x="9598" fg:w="8"/><text x="57.7954%" y="63.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.01%)</title><rect x="57.5814%" y="37" width="0.0120%" height="15" fill="rgb(216,20,37)" fg:x="9604" fg:w="2"/><text x="57.8314%" y="47.50"></text></g><g><title>page_add_file_rmap (24 samples, 0.14%)</title><rect x="57.4615%" y="101" width="0.1439%" height="15" fill="rgb(206,188,39)" fg:x="9584" fg:w="24"/><text x="57.7115%" y="111.50"></text></g><g><title>__mod_lruvec_page_state (16 samples, 0.10%)</title><rect x="57.5094%" y="85" width="0.0959%" height="15" fill="rgb(217,207,13)" fg:x="9592" fg:w="16"/><text x="57.7594%" y="95.50"></text></g><g><title>__mod_lruvec_state (12 samples, 0.07%)</title><rect x="57.5334%" y="69" width="0.0719%" height="15" fill="rgb(231,73,38)" fg:x="9596" fg:w="12"/><text x="57.7834%" y="79.50"></text></g><g><title>__mod_node_page_state (2 samples, 0.01%)</title><rect x="57.5934%" y="53" width="0.0120%" height="15" fill="rgb(225,20,46)" fg:x="9606" fg:w="2"/><text x="57.8434%" y="63.50"></text></g><g><title>percpu_counter_add_batch (2 samples, 0.01%)</title><rect x="57.6054%" y="101" width="0.0120%" height="15" fill="rgb(210,31,41)" fg:x="9608" fg:w="2"/><text x="57.8554%" y="111.50"></text></g><g><title>do_set_pte (46 samples, 0.28%)</title><rect x="57.3655%" y="117" width="0.2758%" height="15" fill="rgb(221,200,47)" fg:x="9568" fg:w="46"/><text x="57.6155%" y="127.50"></text></g><g><title>unlock_page_memcg (3 samples, 0.02%)</title><rect x="57.6234%" y="101" width="0.0180%" height="15" fill="rgb(226,26,5)" fg:x="9611" fg:w="3"/><text x="57.8734%" y="111.50"></text></g><g><title>native_set_pte (3 samples, 0.02%)</title><rect x="57.6413%" y="117" width="0.0180%" height="15" fill="rgb(249,33,26)" fg:x="9614" fg:w="3"/><text x="57.8913%" y="127.50"></text></g><g><title>next_uptodate_page (7 samples, 0.04%)</title><rect x="57.6593%" y="117" width="0.0420%" height="15" fill="rgb(235,183,28)" fg:x="9617" fg:w="7"/><text x="57.9093%" y="127.50"></text></g><g><title>xas_find (5 samples, 0.03%)</title><rect x="57.7073%" y="117" width="0.0300%" height="15" fill="rgb(221,5,38)" fg:x="9625" fg:w="5"/><text x="57.9573%" y="127.50"></text></g><g><title>xas_load (4 samples, 0.02%)</title><rect x="57.7133%" y="101" width="0.0240%" height="15" fill="rgb(247,18,42)" fg:x="9626" fg:w="4"/><text x="57.9633%" y="111.50"></text></g><g><title>filemap_map_pages (71 samples, 0.43%)</title><rect x="57.3176%" y="133" width="0.4257%" height="15" fill="rgb(241,131,45)" fg:x="9560" fg:w="71"/><text x="57.5676%" y="143.50"></text></g><g><title>do_read_fault (75 samples, 0.45%)</title><rect x="57.3116%" y="149" width="0.4497%" height="15" fill="rgb(249,31,29)" fg:x="9559" fg:w="75"/><text x="57.5616%" y="159.50"></text></g><g><title>pte_alloc_one (3 samples, 0.02%)</title><rect x="57.7433%" y="133" width="0.0180%" height="15" fill="rgb(225,111,53)" fg:x="9631" fg:w="3"/><text x="57.9933%" y="143.50"></text></g><g><title>alloc_pages (3 samples, 0.02%)</title><rect x="57.7433%" y="117" width="0.0180%" height="15" fill="rgb(238,160,17)" fg:x="9631" fg:w="3"/><text x="57.9933%" y="127.50"></text></g><g><title>__alloc_pages (3 samples, 0.02%)</title><rect x="57.7433%" y="101" width="0.0180%" height="15" fill="rgb(214,148,48)" fg:x="9631" fg:w="3"/><text x="57.9933%" y="111.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="57.7493%" y="85" width="0.0120%" height="15" fill="rgb(232,36,49)" fg:x="9632" fg:w="2"/><text x="57.9993%" y="95.50"></text></g><g><title>clear_page_rep (2 samples, 0.01%)</title><rect x="57.7493%" y="69" width="0.0120%" height="15" fill="rgb(209,103,24)" fg:x="9632" fg:w="2"/><text x="57.9993%" y="79.50"></text></g><g><title>do_fault (76 samples, 0.46%)</title><rect x="57.3116%" y="165" width="0.4557%" height="15" fill="rgb(229,88,8)" fg:x="9559" fg:w="76"/><text x="57.5616%" y="175.50"></text></g><g><title>handle_mm_fault (86 samples, 0.52%)</title><rect x="57.2576%" y="213" width="0.5156%" height="15" fill="rgb(213,181,19)" fg:x="9550" fg:w="86"/><text x="57.5076%" y="223.50"></text></g><g><title>__handle_mm_fault (82 samples, 0.49%)</title><rect x="57.2816%" y="197" width="0.4916%" height="15" fill="rgb(254,191,54)" fg:x="9554" fg:w="82"/><text x="57.5316%" y="207.50"></text></g><g><title>handle_pte_fault (77 samples, 0.46%)</title><rect x="57.3116%" y="181" width="0.4617%" height="15" fill="rgb(241,83,37)" fg:x="9559" fg:w="77"/><text x="57.5616%" y="191.50"></text></g><g><title>asm_exc_page_fault (93 samples, 0.56%)</title><rect x="57.2217%" y="261" width="0.5576%" height="15" fill="rgb(233,36,39)" fg:x="9544" fg:w="93"/><text x="57.4717%" y="271.50"></text></g><g><title>exc_page_fault (93 samples, 0.56%)</title><rect x="57.2217%" y="245" width="0.5576%" height="15" fill="rgb(226,3,54)" fg:x="9544" fg:w="93"/><text x="57.4717%" y="255.50"></text></g><g><title>do_user_addr_fault (93 samples, 0.56%)</title><rect x="57.2217%" y="229" width="0.5576%" height="15" fill="rgb(245,192,40)" fg:x="9544" fg:w="93"/><text x="57.4717%" y="239.50"></text></g><g><title>brc_rust::main (3,908 samples, 23.43%)</title><rect x="34.3606%" y="277" width="23.4307%" height="15" fill="rgb(238,167,29)" fg:x="5731" fg:w="3908"/><text x="34.6106%" y="287.50">brc_rust::main</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="57.7792%" y="261" width="0.0120%" height="15" fill="rgb(232,182,51)" fg:x="9637" fg:w="2"/><text x="58.0292%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="57.7792%" y="245" width="0.0120%" height="15" fill="rgb(231,60,39)" fg:x="9637" fg:w="2"/><text x="58.0292%" y="255.50"></text></g><g><title>PageHeadHuge (11 samples, 0.07%)</title><rect x="88.6744%" y="133" width="0.0660%" height="15" fill="rgb(208,69,12)" fg:x="14790" fg:w="11"/><text x="88.9244%" y="143.50"></text></g><g><title>do_set_pte (2 samples, 0.01%)</title><rect x="88.7463%" y="133" width="0.0120%" height="15" fill="rgb(235,93,37)" fg:x="14802" fg:w="2"/><text x="88.9963%" y="143.50"></text></g><g><title>_compound_head (13 samples, 0.08%)</title><rect x="89.2380%" y="117" width="0.0779%" height="15" fill="rgb(213,116,39)" fg:x="14884" fg:w="13"/><text x="89.4880%" y="127.50"></text></g><g><title>__mod_lruvec_page_state (11 samples, 0.07%)</title><rect x="89.8255%" y="101" width="0.0660%" height="15" fill="rgb(222,207,29)" fg:x="14982" fg:w="11"/><text x="90.0755%" y="111.50"></text></g><g><title>lock_page_memcg (13 samples, 0.08%)</title><rect x="89.8915%" y="101" width="0.0779%" height="15" fill="rgb(206,96,30)" fg:x="14993" fg:w="13"/><text x="90.1415%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (33 samples, 0.20%)</title><rect x="90.5270%" y="53" width="0.1979%" height="15" fill="rgb(218,138,4)" fg:x="15099" fg:w="33"/><text x="90.7770%" y="63.50"></text></g><g><title>cgroup_rstat_updated (8 samples, 0.05%)</title><rect x="90.6769%" y="37" width="0.0480%" height="15" fill="rgb(250,191,14)" fg:x="15124" fg:w="8"/><text x="90.9269%" y="47.50"></text></g><g><title>__mod_node_page_state (20 samples, 0.12%)</title><rect x="90.7249%" y="53" width="0.1199%" height="15" fill="rgb(239,60,40)" fg:x="15132" fg:w="20"/><text x="90.9749%" y="63.50"></text></g><g><title>__mod_lruvec_state (69 samples, 0.41%)</title><rect x="90.4491%" y="69" width="0.4137%" height="15" fill="rgb(206,27,48)" fg:x="15086" fg:w="69"/><text x="90.6991%" y="79.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.02%)</title><rect x="90.8448%" y="53" width="0.0180%" height="15" fill="rgb(225,35,8)" fg:x="15152" fg:w="3"/><text x="91.0948%" y="63.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.01%)</title><rect x="90.8628%" y="69" width="0.0120%" height="15" fill="rgb(250,213,24)" fg:x="15155" fg:w="2"/><text x="91.1128%" y="79.50"></text></g><g><title>__mod_lruvec_page_state (94 samples, 0.56%)</title><rect x="90.3411%" y="85" width="0.5636%" height="15" fill="rgb(247,123,22)" fg:x="15068" fg:w="94"/><text x="90.5911%" y="95.50"></text></g><g><title>srso_alias_safe_ret (5 samples, 0.03%)</title><rect x="90.8748%" y="69" width="0.0300%" height="15" fill="rgb(231,138,38)" fg:x="15157" fg:w="5"/><text x="91.1248%" y="79.50"></text></g><g><title>lock_page_memcg (13 samples, 0.08%)</title><rect x="90.9167%" y="85" width="0.0779%" height="15" fill="rgb(231,145,46)" fg:x="15164" fg:w="13"/><text x="91.1667%" y="95.50"></text></g><g><title>folio_memcg_lock.part.0 (12 samples, 0.07%)</title><rect x="90.9227%" y="69" width="0.0719%" height="15" fill="rgb(251,118,11)" fg:x="15165" fg:w="12"/><text x="91.1727%" y="79.50"></text></g><g><title>page_add_file_rmap (173 samples, 1.04%)</title><rect x="89.9694%" y="101" width="1.0372%" height="15" fill="rgb(217,147,25)" fg:x="15006" fg:w="173"/><text x="90.2194%" y="111.50"></text></g><g><title>srso_alias_return_thunk (2 samples, 0.01%)</title><rect x="90.9947%" y="85" width="0.0120%" height="15" fill="rgb(247,81,37)" fg:x="15177" fg:w="2"/><text x="91.2447%" y="95.50"></text></g><g><title>percpu_counter_add_batch (12 samples, 0.07%)</title><rect x="91.0067%" y="101" width="0.0719%" height="15" fill="rgb(209,12,38)" fg:x="15179" fg:w="12"/><text x="91.2567%" y="111.50"></text></g><g><title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="91.0666%" y="85" width="0.0120%" height="15" fill="rgb(227,1,9)" fg:x="15189" fg:w="2"/><text x="91.3166%" y="95.50"></text></g><g><title>pfn_pte (2 samples, 0.01%)</title><rect x="91.0786%" y="101" width="0.0120%" height="15" fill="rgb(248,47,43)" fg:x="15191" fg:w="2"/><text x="91.3286%" y="111.50"></text></g><g><title>srso_alias_safe_ret (3 samples, 0.02%)</title><rect x="91.0906%" y="101" width="0.0180%" height="15" fill="rgb(221,10,30)" fg:x="15193" fg:w="3"/><text x="91.3406%" y="111.50"></text></g><g><title>do_set_pte (306 samples, 1.83%)</title><rect x="89.3159%" y="117" width="1.8346%" height="15" fill="rgb(210,229,1)" fg:x="14897" fg:w="306"/><text x="89.5659%" y="127.50">d..</text></g><g><title>unlock_page_memcg (7 samples, 0.04%)</title><rect x="91.1086%" y="101" width="0.0420%" height="15" fill="rgb(222,148,37)" fg:x="15196" fg:w="7"/><text x="91.3586%" y="111.50"></text></g><g><title>native_set_pte (4 samples, 0.02%)</title><rect x="91.1565%" y="117" width="0.0240%" height="15" fill="rgb(234,67,33)" fg:x="15204" fg:w="4"/><text x="91.4065%" y="127.50"></text></g><g><title>next_uptodate_page (40 samples, 0.24%)</title><rect x="91.1805%" y="117" width="0.2398%" height="15" fill="rgb(247,98,35)" fg:x="15208" fg:w="40"/><text x="91.4305%" y="127.50"></text></g><g><title>pfn_pte (2 samples, 0.01%)</title><rect x="91.4323%" y="117" width="0.0120%" height="15" fill="rgb(247,138,52)" fg:x="15250" fg:w="2"/><text x="91.6823%" y="127.50"></text></g><g><title>srso_alias_safe_ret (5 samples, 0.03%)</title><rect x="91.4443%" y="117" width="0.0300%" height="15" fill="rgb(213,79,30)" fg:x="15252" fg:w="5"/><text x="91.6943%" y="127.50"></text></g><g><title>xas_find (28 samples, 0.17%)</title><rect x="91.4743%" y="117" width="0.1679%" height="15" fill="rgb(246,177,23)" fg:x="15257" fg:w="28"/><text x="91.7243%" y="127.50"></text></g><g><title>xas_load (20 samples, 0.12%)</title><rect x="91.5223%" y="101" width="0.1199%" height="15" fill="rgb(230,62,27)" fg:x="15265" fg:w="20"/><text x="91.7723%" y="111.50"></text></g><g><title>xas_start (6 samples, 0.04%)</title><rect x="91.6062%" y="85" width="0.0360%" height="15" fill="rgb(216,154,8)" fg:x="15279" fg:w="6"/><text x="91.8562%" y="95.50"></text></g><g><title>filemap_map_pages (482 samples, 2.89%)</title><rect x="88.7583%" y="133" width="2.8899%" height="15" fill="rgb(244,35,45)" fg:x="14804" fg:w="482"/><text x="89.0083%" y="143.50">fi..</text></g><g><title>next_uptodate_page (3 samples, 0.02%)</title><rect x="91.6542%" y="133" width="0.0180%" height="15" fill="rgb(251,115,12)" fg:x="15287" fg:w="3"/><text x="91.9042%" y="143.50"></text></g><g><title>__alloc_pages (2 samples, 0.01%)</title><rect x="91.6782%" y="101" width="0.0120%" height="15" fill="rgb(240,54,50)" fg:x="15291" fg:w="2"/><text x="91.9282%" y="111.50"></text></g><g><title>pte_alloc_one (4 samples, 0.02%)</title><rect x="91.6722%" y="133" width="0.0240%" height="15" fill="rgb(233,84,52)" fg:x="15290" fg:w="4"/><text x="91.9222%" y="143.50"></text></g><g><title>alloc_pages (4 samples, 0.02%)</title><rect x="91.6722%" y="117" width="0.0240%" height="15" fill="rgb(207,117,47)" fg:x="15290" fg:w="4"/><text x="91.9222%" y="127.50"></text></g><g><title>srso_alias_safe_ret (9 samples, 0.05%)</title><rect x="91.6961%" y="133" width="0.0540%" height="15" fill="rgb(249,43,39)" fg:x="15294" fg:w="9"/><text x="91.9461%" y="143.50"></text></g><g><title>do_read_fault (518 samples, 3.11%)</title><rect x="88.6564%" y="149" width="3.1057%" height="15" fill="rgb(209,38,44)" fg:x="14787" fg:w="518"/><text x="88.9064%" y="159.50">do_..</text></g><g><title>xas_find (2 samples, 0.01%)</title><rect x="91.7501%" y="133" width="0.0120%" height="15" fill="rgb(236,212,23)" fg:x="15303" fg:w="2"/><text x="92.0001%" y="143.50"></text></g><g><title>do_fault (521 samples, 3.12%)</title><rect x="88.6504%" y="165" width="3.1237%" height="15" fill="rgb(242,79,21)" fg:x="14786" fg:w="521"/><text x="88.9004%" y="175.50">do_..</text></g><g><title>handle_pte_fault (533 samples, 3.20%)</title><rect x="88.5844%" y="181" width="3.1956%" height="15" fill="rgb(211,96,35)" fg:x="14775" fg:w="533"/><text x="88.8344%" y="191.50">han..</text></g><g><title>__handle_mm_fault (560 samples, 3.36%)</title><rect x="88.4346%" y="197" width="3.3575%" height="15" fill="rgb(253,215,40)" fg:x="14750" fg:w="560"/><text x="88.6846%" y="207.50">__h..</text></g><g><title>count_memcg_events.constprop.0 (6 samples, 0.04%)</title><rect x="91.7921%" y="197" width="0.0360%" height="15" fill="rgb(211,81,21)" fg:x="15310" fg:w="6"/><text x="92.0421%" y="207.50"></text></g><g><title>handle_mm_fault (576 samples, 3.45%)</title><rect x="88.3926%" y="213" width="3.4534%" height="15" fill="rgb(208,190,38)" fg:x="14743" fg:w="576"/><text x="88.6426%" y="223.50">han..</text></g><g><title>srso_alias_safe_ret (2 samples, 0.01%)</title><rect x="91.8340%" y="197" width="0.0120%" height="15" fill="rgb(235,213,38)" fg:x="15317" fg:w="2"/><text x="92.0840%" y="207.50"></text></g><g><title>find_vma (9 samples, 0.05%)</title><rect x="91.8640%" y="197" width="0.0540%" height="15" fill="rgb(237,122,38)" fg:x="15322" fg:w="9"/><text x="92.1140%" y="207.50"></text></g><g><title>mt_find (8 samples, 0.05%)</title><rect x="91.8700%" y="181" width="0.0480%" height="15" fill="rgb(244,218,35)" fg:x="15323" fg:w="8"/><text x="92.1200%" y="191.50"></text></g><g><title>mtree_range_walk (3 samples, 0.02%)</title><rect x="91.9000%" y="165" width="0.0180%" height="15" fill="rgb(240,68,47)" fg:x="15328" fg:w="3"/><text x="92.1500%" y="175.50"></text></g><g><title>lock_mm_and_find_vma (13 samples, 0.08%)</title><rect x="91.8460%" y="213" width="0.0779%" height="15" fill="rgb(210,16,53)" fg:x="15319" fg:w="13"/><text x="92.0960%" y="223.50"></text></g><g><title>asm_exc_page_fault (644 samples, 3.86%)</title><rect x="88.0688%" y="261" width="3.8611%" height="15" fill="rgb(235,124,12)" fg:x="14689" fg:w="644"/><text x="88.3188%" y="271.50">asm_..</text></g><g><title>exc_page_fault (644 samples, 3.86%)</title><rect x="88.0688%" y="245" width="3.8611%" height="15" fill="rgb(224,169,11)" fg:x="14689" fg:w="644"/><text x="88.3188%" y="255.50">exc_..</text></g><g><title>do_user_addr_fault (644 samples, 3.86%)</title><rect x="88.0688%" y="229" width="3.8611%" height="15" fill="rgb(250,166,2)" fg:x="14689" fg:w="644"/><text x="88.3188%" y="239.50">do_u..</text></g><g><title>[unknown] (16,184 samples, 97.03%)</title><rect x="0.0000%" y="325" width="97.0322%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="16184"/><text x="0.2500%" y="335.50">[unknown]</text></g><g><title>brc_rust::main (16,184 samples, 97.03%)</title><rect x="0.0000%" y="309" width="97.0322%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="16184"/><text x="0.2500%" y="319.50">brc_rust::main</text></g><g><title>brc_rust::process (16,134 samples, 96.73%)</title><rect x="0.2998%" y="293" width="96.7324%" height="15" fill="rgb(228,99,48)" fg:x="50" fg:w="16134"/><text x="0.5498%" y="303.50">brc_rust::process</text></g><g><title>brc_rust::parse_line (6,545 samples, 39.24%)</title><rect x="57.7912%" y="277" width="39.2410%" height="15" fill="rgb(253,11,6)" fg:x="9639" fg:w="6545"/><text x="58.0412%" y="287.50">brc_rust::parse_line</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_mul (851 samples, 5.10%)</title><rect x="91.9300%" y="261" width="5.1022%" height="15" fill="rgb(247,143,39)" fg:x="15333" fg:w="851"/><text x="92.1800%" y="271.50">core::..</text></g><g><title>__tlb_remove_page_size (12 samples, 0.07%)</title><rect x="97.0502%" y="117" width="0.0719%" height="15" fill="rgb(236,97,10)" fg:x="16187" fg:w="12"/><text x="97.3002%" y="127.50"></text></g><g><title>_compound_head (8 samples, 0.05%)</title><rect x="97.1221%" y="117" width="0.0480%" height="15" fill="rgb(233,208,19)" fg:x="16199" fg:w="8"/><text x="97.3721%" y="127.50"></text></g><g><title>mark_page_accessed (10 samples, 0.06%)</title><rect x="97.1701%" y="117" width="0.0600%" height="15" fill="rgb(216,164,2)" fg:x="16207" fg:w="10"/><text x="97.4201%" y="127.50"></text></g><g><title>page_remove_rmap (2 samples, 0.01%)</title><rect x="97.2300%" y="117" width="0.0120%" height="15" fill="rgb(220,129,5)" fg:x="16217" fg:w="2"/><text x="97.4800%" y="127.50"></text></g><g><title>srso_alias_return_thunk (3 samples, 0.02%)</title><rect x="97.2420%" y="117" width="0.0180%" height="15" fill="rgb(242,17,10)" fg:x="16219" fg:w="3"/><text x="97.4920%" y="127.50"></text></g><g><title>srso_alias_safe_ret (5 samples, 0.03%)</title><rect x="97.2600%" y="117" width="0.0300%" height="15" fill="rgb(242,107,0)" fg:x="16222" fg:w="5"/><text x="97.5100%" y="127.50"></text></g><g><title>vm_normal_page (2 samples, 0.01%)</title><rect x="97.2960%" y="117" width="0.0120%" height="15" fill="rgb(251,28,31)" fg:x="16228" fg:w="2"/><text x="97.5460%" y="127.50"></text></g><g><title>PageHuge (6 samples, 0.04%)</title><rect x="98.3872%" y="101" width="0.0360%" height="15" fill="rgb(233,223,10)" fg:x="16410" fg:w="6"/><text x="98.6372%" y="111.50"></text></g><g><title>__mod_lruvec_page_state (21 samples, 0.13%)</title><rect x="98.4232%" y="101" width="0.1259%" height="15" fill="rgb(215,21,27)" fg:x="16416" fg:w="21"/><text x="98.6732%" y="111.50"></text></g><g><title>lock_page_memcg (22 samples, 0.13%)</title><rect x="98.5491%" y="101" width="0.1319%" height="15" fill="rgb(232,23,21)" fg:x="16437" fg:w="22"/><text x="98.7991%" y="111.50"></text></g><g><title>mark_page_accessed (4 samples, 0.02%)</title><rect x="98.6810%" y="101" width="0.0240%" height="15" fill="rgb(244,5,23)" fg:x="16459" fg:w="4"/><text x="98.9310%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (29 samples, 0.17%)</title><rect x="99.3345%" y="53" width="0.1739%" height="15" fill="rgb(226,81,46)" fg:x="16568" fg:w="29"/><text x="99.5845%" y="63.50"></text></g><g><title>cgroup_rstat_updated (4 samples, 0.02%)</title><rect x="99.4844%" y="37" width="0.0240%" height="15" fill="rgb(247,70,30)" fg:x="16593" fg:w="4"/><text x="99.7344%" y="47.50"></text></g><g><title>__mod_node_page_state (14 samples, 0.08%)</title><rect x="99.5084%" y="53" width="0.0839%" height="15" fill="rgb(212,68,19)" fg:x="16597" fg:w="14"/><text x="99.7584%" y="63.50"></text></g><g><title>__mod_lruvec_state (58 samples, 0.35%)</title><rect x="99.2566%" y="69" width="0.3477%" height="15" fill="rgb(240,187,13)" fg:x="16555" fg:w="58"/><text x="99.5066%" y="79.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.01%)</title><rect x="99.5923%" y="53" width="0.0120%" height="15" fill="rgb(223,113,26)" fg:x="16611" fg:w="2"/><text x="99.8423%" y="63.50"></text></g><g><title>__mod_node_page_state (3 samples, 0.02%)</title><rect x="99.6103%" y="69" width="0.0180%" height="15" fill="rgb(206,192,2)" fg:x="16614" fg:w="3"/><text x="99.8603%" y="79.50"></text></g><g><title>__mod_lruvec_page_state (91 samples, 0.55%)</title><rect x="99.1007%" y="85" width="0.5456%" height="15" fill="rgb(241,108,4)" fg:x="16529" fg:w="91"/><text x="99.3507%" y="95.50"></text></g><g><title>srso_alias_safe_ret (3 samples, 0.02%)</title><rect x="99.6283%" y="69" width="0.0180%" height="15" fill="rgb(247,173,49)" fg:x="16617" fg:w="3"/><text x="99.8783%" y="79.50"></text></g><g><title>page_remove_rmap (166 samples, 1.00%)</title><rect x="98.7050%" y="101" width="0.9953%" height="15" fill="rgb(224,114,35)" fg:x="16463" fg:w="166"/><text x="98.9550%" y="111.50"></text></g><g><title>lock_page_memcg (8 samples, 0.05%)</title><rect x="99.6523%" y="85" width="0.0480%" height="15" fill="rgb(245,159,27)" fg:x="16621" fg:w="8"/><text x="99.9023%" y="95.50"></text></g><g><title>folio_memcg_lock.part.0 (8 samples, 0.05%)</title><rect x="99.6523%" y="69" width="0.0480%" height="15" fill="rgb(245,172,44)" fg:x="16621" fg:w="8"/><text x="99.9023%" y="79.50"></text></g><g><title>srso_alias_safe_ret (10 samples, 0.06%)</title><rect x="99.7002%" y="101" width="0.0600%" height="15" fill="rgb(236,23,11)" fg:x="16629" fg:w="10"/><text x="99.9502%" y="111.50"></text></g><g><title>free_pages_and_swap_cache (27 samples, 0.16%)</title><rect x="99.7662%" y="69" width="0.1619%" height="15" fill="rgb(205,117,38)" fg:x="16640" fg:w="27"/><text x="100.0162%" y="79.50"></text></g><g><title>release_pages (10 samples, 0.06%)</title><rect x="99.8681%" y="53" width="0.0600%" height="15" fill="rgb(237,72,25)" fg:x="16657" fg:w="10"/><text x="100.1181%" y="63.50"></text></g><g><title>tlb_flush_mmu (31 samples, 0.19%)</title><rect x="99.7662%" y="101" width="0.1859%" height="15" fill="rgb(244,70,9)" fg:x="16640" fg:w="31"/><text x="100.0162%" y="111.50"></text></g><g><title>tlb_batch_pages_flush (31 samples, 0.19%)</title><rect x="99.7662%" y="85" width="0.1859%" height="15" fill="rgb(217,125,39)" fg:x="16640" fg:w="31"/><text x="100.0162%" y="95.50"></text></g><g><title>free_swap_cache (4 samples, 0.02%)</title><rect x="99.9281%" y="69" width="0.0240%" height="15" fill="rgb(235,36,10)" fg:x="16667" fg:w="4"/><text x="100.1781%" y="79.50"></text></g><g><title>unlock_page_memcg (5 samples, 0.03%)</title><rect x="99.9520%" y="101" width="0.0300%" height="15" fill="rgb(251,123,47)" fg:x="16671" fg:w="5"/><text x="100.2020%" y="111.50"></text></g><g><title>all (16,679 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="16679"/><text x="0.2500%" y="367.50"></text></g><g><title>brc-rust (16,679 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="16679"/><text x="0.2500%" y="351.50">brc-rust</text></g><g><title>entry_SYSCALL_64_after_hwframe (494 samples, 2.96%)</title><rect x="97.0382%" y="325" width="2.9618%" height="15" fill="rgb(211,50,8)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="335.50">ent..</text></g><g><title>do_syscall_64 (494 samples, 2.96%)</title><rect x="97.0382%" y="309" width="2.9618%" height="15" fill="rgb(245,182,24)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="319.50">do_..</text></g><g><title>__x64_sys_exit_group (494 samples, 2.96%)</title><rect x="97.0382%" y="293" width="2.9618%" height="15" fill="rgb(242,14,37)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="303.50">__x..</text></g><g><title>do_group_exit (494 samples, 2.96%)</title><rect x="97.0382%" y="277" width="2.9618%" height="15" fill="rgb(246,228,12)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="287.50">do_..</text></g><g><title>do_exit (494 samples, 2.96%)</title><rect x="97.0382%" y="261" width="2.9618%" height="15" fill="rgb(213,55,15)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="271.50">do_..</text></g><g><title>exit_mm (494 samples, 2.96%)</title><rect x="97.0382%" y="245" width="2.9618%" height="15" fill="rgb(209,9,3)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="255.50">exi..</text></g><g><title>mmput (494 samples, 2.96%)</title><rect x="97.0382%" y="229" width="2.9618%" height="15" fill="rgb(230,59,30)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="239.50">mmp..</text></g><g><title>__mmput (494 samples, 2.96%)</title><rect x="97.0382%" y="213" width="2.9618%" height="15" fill="rgb(209,121,21)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="223.50">__m..</text></g><g><title>exit_mmap (494 samples, 2.96%)</title><rect x="97.0382%" y="197" width="2.9618%" height="15" fill="rgb(220,109,13)" fg:x="16185" fg:w="494"/><text x="97.2882%" y="207.50">exi..</text></g><g><title>unmap_vmas (493 samples, 2.96%)</title><rect x="97.0442%" y="181" width="2.9558%" height="15" fill="rgb(232,18,1)" fg:x="16186" fg:w="493"/><text x="97.2942%" y="191.50">unm..</text></g><g><title>unmap_single_vma (493 samples, 2.96%)</title><rect x="97.0442%" y="165" width="2.9558%" height="15" fill="rgb(215,41,42)" fg:x="16186" fg:w="493"/><text x="97.2942%" y="175.50">unm..</text></g><g><title>unmap_page_range (493 samples, 2.96%)</title><rect x="97.0442%" y="149" width="2.9558%" height="15" fill="rgb(224,123,36)" fg:x="16186" fg:w="493"/><text x="97.2942%" y="159.50">unm..</text></g><g><title>zap_pmd_range.isra.0 (493 samples, 2.96%)</title><rect x="97.0442%" y="133" width="2.9558%" height="15" fill="rgb(240,125,3)" fg:x="16186" fg:w="493"/><text x="97.2942%" y="143.50">zap..</text></g><g><title>zap_pte_range (449 samples, 2.69%)</title><rect x="97.3080%" y="117" width="2.6920%" height="15" fill="rgb(205,98,50)" fg:x="16230" fg:w="449"/><text x="97.5580%" y="127.50">za..</text></g><g><title>vm_normal_page (3 samples, 0.02%)</title><rect x="99.9820%" y="101" width="0.0180%" height="15" fill="rgb(205,185,37)" fg:x="16676" fg:w="3"/><text x="100.2320%" y="111.50"></text></g></svg></svg>