<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="89803"><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1,196 samples, 1.33%)</title><rect x="1.4487%" y="389" width="1.3318%" height="15" fill="rgb(227,0,7)" fg:x="1301" fg:w="1196"/><text x="1.6987%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (23 samples, 0.03%)</title><rect x="5.9141%" y="373" width="0.0256%" height="15" fill="rgb(217,0,24)" fg:x="5311" fg:w="23"/><text x="6.1641%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.03%)</title><rect x="5.9141%" y="357" width="0.0256%" height="15" fill="rgb(221,193,54)" fg:x="5311" fg:w="23"/><text x="6.1641%" y="367.50"></text></g><g><title>alloc::string::String::new (272 samples, 0.30%)</title><rect x="5.9430%" y="373" width="0.3029%" height="15" fill="rgb(248,212,6)" fg:x="5337" fg:w="272"/><text x="6.1930%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (40 samples, 0.04%)</title><rect x="6.2459%" y="373" width="0.0445%" height="15" fill="rgb(208,68,35)" fg:x="5609" fg:w="40"/><text x="6.4959%" y="383.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (40 samples, 0.04%)</title><rect x="6.2459%" y="357" width="0.0445%" height="15" fill="rgb(232,128,0)" fg:x="5609" fg:w="40"/><text x="6.4959%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (40 samples, 0.04%)</title><rect x="6.2459%" y="341" width="0.0445%" height="15" fill="rgb(207,160,47)" fg:x="5609" fg:w="40"/><text x="6.4959%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (40 samples, 0.04%)</title><rect x="6.2459%" y="325" width="0.0445%" height="15" fill="rgb(228,23,34)" fg:x="5609" fg:w="40"/><text x="6.4959%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (723 samples, 0.81%)</title><rect x="10.2636%" y="341" width="0.8051%" height="15" fill="rgb(218,30,26)" fg:x="9217" fg:w="723"/><text x="10.5136%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (723 samples, 0.81%)</title><rect x="10.2636%" y="325" width="0.8051%" height="15" fill="rgb(220,122,19)" fg:x="9217" fg:w="723"/><text x="10.5136%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (723 samples, 0.81%)</title><rect x="10.2636%" y="309" width="0.8051%" height="15" fill="rgb(250,228,42)" fg:x="9217" fg:w="723"/><text x="10.5136%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (386 samples, 0.43%)</title><rect x="10.6388%" y="293" width="0.4298%" height="15" fill="rgb(240,193,28)" fg:x="9554" fg:w="386"/><text x="10.8888%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (386 samples, 0.43%)</title><rect x="10.6388%" y="277" width="0.4298%" height="15" fill="rgb(216,20,37)" fg:x="9554" fg:w="386"/><text x="10.8888%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (386 samples, 0.43%)</title><rect x="10.6388%" y="261" width="0.4298%" height="15" fill="rgb(206,188,39)" fg:x="9554" fg:w="386"/><text x="10.8888%" y="271.50"></text></g><g><title>alloc::string::String::len (311 samples, 0.35%)</title><rect x="11.0687%" y="341" width="0.3463%" height="15" fill="rgb(217,207,13)" fg:x="9940" fg:w="311"/><text x="11.3187%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (311 samples, 0.35%)</title><rect x="11.0687%" y="325" width="0.3463%" height="15" fill="rgb(231,73,38)" fg:x="9940" fg:w="311"/><text x="11.3187%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::Guard&gt; (26 samples, 0.03%)</title><rect x="11.4161%" y="341" width="0.0290%" height="15" fill="rgb(225,20,46)" fg:x="10252" fg:w="26"/><text x="11.6661%" y="351.50"></text></g><g><title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (26 samples, 0.03%)</title><rect x="11.4161%" y="325" width="0.0290%" height="15" fill="rgb(210,31,41)" fg:x="10252" fg:w="26"/><text x="11.6661%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (26 samples, 0.03%)</title><rect x="11.4161%" y="309" width="0.0290%" height="15" fill="rgb(221,200,47)" fg:x="10252" fg:w="26"/><text x="11.6661%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (265 samples, 0.30%)</title><rect x="11.4451%" y="341" width="0.2951%" height="15" fill="rgb(226,26,5)" fg:x="10278" fg:w="265"/><text x="11.6951%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (265 samples, 0.30%)</title><rect x="11.4451%" y="325" width="0.2951%" height="15" fill="rgb(249,33,26)" fg:x="10278" fg:w="265"/><text x="11.6951%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (12 samples, 0.01%)</title><rect x="21.7576%" y="309" width="0.0134%" height="15" fill="rgb(235,183,28)" fg:x="19539" fg:w="12"/><text x="22.0076%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (9,080 samples, 10.11%)</title><rect x="11.7401%" y="341" width="10.1110%" height="15" fill="rgb(221,5,38)" fg:x="10543" fg:w="9080"/><text x="11.9901%" y="351.50">core::str::conv..</text></g><g><title>core::str::validations::run_utf8_validation (5,580 samples, 6.21%)</title><rect x="15.6376%" y="325" width="6.2136%" height="15" fill="rgb(247,18,42)" fg:x="14043" fg:w="5580"/><text x="15.8876%" y="335.50">core::st..</text></g><g><title>core::str::validations::utf8_char_width (72 samples, 0.08%)</title><rect x="21.7710%" y="309" width="0.0802%" height="15" fill="rgb(241,131,45)" fg:x="19551" fg:w="72"/><text x="22.0210%" y="319.50"></text></g><g><title>std::io::append_to_string (270 samples, 0.30%)</title><rect x="21.8512%" y="325" width="0.3007%" height="15" fill="rgb(249,31,29)" fg:x="19623" fg:w="270"/><text x="22.1012%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (622 samples, 0.69%)</title><rect x="22.7097%" y="309" width="0.6926%" height="15" fill="rgb(225,111,53)" fg:x="20394" fg:w="622"/><text x="22.9597%" y="319.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (622 samples, 0.69%)</title><rect x="22.7097%" y="293" width="0.6926%" height="15" fill="rgb(238,160,17)" fg:x="20394" fg:w="622"/><text x="22.9597%" y="303.50"></text></g><g><title>core::cmp::min (270 samples, 0.30%)</title><rect x="23.1017%" y="277" width="0.3007%" height="15" fill="rgb(214,148,48)" fg:x="20746" fg:w="270"/><text x="23.3517%" y="287.50"></text></g><g><title>core::cmp::Ord::min (270 samples, 0.30%)</title><rect x="23.1017%" y="261" width="0.3007%" height="15" fill="rgb(232,36,49)" fg:x="20746" fg:w="270"/><text x="23.3517%" y="271.50"></text></g><g><title>std::io::append_to_string (270 samples, 0.30%)</title><rect x="23.1017%" y="245" width="0.3007%" height="15" fill="rgb(209,103,24)" fg:x="20746" fg:w="270"/><text x="23.3517%" y="255.50"></text></g><g><title>__x64_sys_read (22 samples, 0.02%)</title><rect x="23.5772%" y="165" width="0.0245%" height="15" fill="rgb(229,88,8)" fg:x="21173" fg:w="22"/><text x="23.8272%" y="175.50"></text></g><g><title>__fdget_pos (38 samples, 0.04%)</title><rect x="23.6573%" y="117" width="0.0423%" height="15" fill="rgb(213,181,19)" fg:x="21245" fg:w="38"/><text x="23.9073%" y="127.50"></text></g><g><title>__fget_light (35 samples, 0.04%)</title><rect x="23.6607%" y="101" width="0.0390%" height="15" fill="rgb(254,191,54)" fg:x="21248" fg:w="35"/><text x="23.9107%" y="111.50"></text></g><g><title>generic_file_read_iter (13 samples, 0.01%)</title><rect x="23.7019%" y="117" width="0.0145%" height="15" fill="rgb(241,83,37)" fg:x="21285" fg:w="13"/><text x="23.9519%" y="127.50"></text></g><g><title>rw_verify_area (10 samples, 0.01%)</title><rect x="23.7164%" y="117" width="0.0111%" height="15" fill="rgb(233,36,39)" fg:x="21298" fg:w="10"/><text x="23.9664%" y="127.50"></text></g><g><title>__get_task_ioprio (11 samples, 0.01%)</title><rect x="23.8010%" y="101" width="0.0122%" height="15" fill="rgb(226,3,54)" fg:x="21374" fg:w="11"/><text x="24.0510%" y="111.50"></text></g><g><title>_copy_to_iter (49 samples, 0.05%)</title><rect x="24.0371%" y="53" width="0.0546%" height="15" fill="rgb(245,192,40)" fg:x="21586" fg:w="49"/><text x="24.2871%" y="63.50"></text></g><g><title>copy_user_generic_string (701 samples, 0.78%)</title><rect x="24.0916%" y="53" width="0.7806%" height="15" fill="rgb(238,167,29)" fg:x="21635" fg:w="701"/><text x="24.3416%" y="63.50"></text></g><g><title>copy_page_to_iter (814 samples, 0.91%)</title><rect x="23.9847%" y="69" width="0.9064%" height="15" fill="rgb(232,182,51)" fg:x="21539" fg:w="814"/><text x="24.2347%" y="79.50"></text></g><g><title>page_copy_sane (17 samples, 0.02%)</title><rect x="24.8722%" y="53" width="0.0189%" height="15" fill="rgb(231,60,39)" fg:x="22336" fg:w="17"/><text x="25.1222%" y="63.50"></text></g><g><title>xas_load (54 samples, 0.06%)</title><rect x="24.9524%" y="37" width="0.0601%" height="15" fill="rgb(208,69,12)" fg:x="22408" fg:w="54"/><text x="25.2024%" y="47.50"></text></g><g><title>filemap_get_read_batch (97 samples, 0.11%)</title><rect x="24.9079%" y="53" width="0.1080%" height="15" fill="rgb(235,93,37)" fg:x="22368" fg:w="97"/><text x="25.1579%" y="63.50"></text></g><g><title>filemap_get_pages (113 samples, 0.13%)</title><rect x="24.8912%" y="69" width="0.1258%" height="15" fill="rgb(213,116,39)" fg:x="22353" fg:w="113"/><text x="25.1412%" y="79.50"></text></g><g><title>rcu_all_qs (10 samples, 0.01%)</title><rect x="25.0237%" y="69" width="0.0111%" height="15" fill="rgb(222,207,29)" fg:x="22472" fg:w="10"/><text x="25.2737%" y="79.50"></text></g><g><title>current_time (20 samples, 0.02%)</title><rect x="25.0849%" y="37" width="0.0223%" height="15" fill="rgb(206,96,30)" fg:x="22527" fg:w="20"/><text x="25.3349%" y="47.50"></text></g><g><title>atime_needs_update (54 samples, 0.06%)</title><rect x="25.0493%" y="53" width="0.0601%" height="15" fill="rgb(218,138,4)" fg:x="22495" fg:w="54"/><text x="25.2993%" y="63.50"></text></g><g><title>filemap_read (1,151 samples, 1.28%)</title><rect x="23.8311%" y="85" width="1.2817%" height="15" fill="rgb(250,191,14)" fg:x="21401" fg:w="1151"/><text x="24.0811%" y="95.50"></text></g><g><title>touch_atime (70 samples, 0.08%)</title><rect x="25.0348%" y="69" width="0.0779%" height="15" fill="rgb(239,60,40)" fg:x="22482" fg:w="70"/><text x="25.2848%" y="79.50"></text></g><g><title>generic_file_read_iter (1,183 samples, 1.32%)</title><rect x="23.8155%" y="101" width="1.3173%" height="15" fill="rgb(206,27,48)" fg:x="21387" fg:w="1183"/><text x="24.0655%" y="111.50"></text></g><g><title>apparmor_file_permission (16 samples, 0.02%)</title><rect x="25.1372%" y="85" width="0.0178%" height="15" fill="rgb(225,35,8)" fg:x="22574" fg:w="16"/><text x="25.3872%" y="95.50"></text></g><g><title>apparmor_file_permission (27 samples, 0.03%)</title><rect x="25.1762%" y="69" width="0.0301%" height="15" fill="rgb(250,213,24)" fg:x="22609" fg:w="27"/><text x="25.4262%" y="79.50"></text></g><g><title>security_file_permission (62 samples, 0.07%)</title><rect x="25.1562%" y="85" width="0.0690%" height="15" fill="rgb(247,123,22)" fg:x="22591" fg:w="62"/><text x="25.4062%" y="95.50"></text></g><g><title>fsnotify_perm.part.0 (17 samples, 0.02%)</title><rect x="25.2063%" y="69" width="0.0189%" height="15" fill="rgb(231,138,38)" fg:x="22636" fg:w="17"/><text x="25.4563%" y="79.50"></text></g><g><title>rw_verify_area (84 samples, 0.09%)</title><rect x="25.1328%" y="101" width="0.0935%" height="15" fill="rgb(231,145,46)" fg:x="22570" fg:w="84"/><text x="25.3828%" y="111.50"></text></g><g><title>__x64_sys_read (1,437 samples, 1.60%)</title><rect x="23.6295%" y="149" width="1.6002%" height="15" fill="rgb(251,118,11)" fg:x="21220" fg:w="1437"/><text x="23.8795%" y="159.50"></text></g><g><title>ksys_read (1,436 samples, 1.60%)</title><rect x="23.6306%" y="133" width="1.5991%" height="15" fill="rgb(217,147,25)" fg:x="21221" fg:w="1436"/><text x="23.8806%" y="143.50"></text></g><g><title>vfs_read (1,345 samples, 1.50%)</title><rect x="23.7319%" y="117" width="1.4977%" height="15" fill="rgb(247,81,37)" fg:x="21312" fg:w="1345"/><text x="23.9819%" y="127.50"></text></g><g><title>syscall_enter_from_user_mode (116 samples, 0.13%)</title><rect x="25.2319%" y="149" width="0.1292%" height="15" fill="rgb(209,12,38)" fg:x="22659" fg:w="116"/><text x="25.4819%" y="159.50"></text></g><g><title>do_syscall_64 (1,581 samples, 1.76%)</title><rect x="23.6017%" y="165" width="1.7605%" height="15" fill="rgb(227,1,9)" fg:x="21195" fg:w="1581"/><text x="23.8517%" y="175.50"></text></g><g><title>read (1,730 samples, 1.93%)</title><rect x="23.4424%" y="197" width="1.9264%" height="15" fill="rgb(248,47,43)" fg:x="21052" fg:w="1730"/><text x="23.6924%" y="207.50">r..</text></g><g><title>entry_SYSCALL_64_after_hwframe (1,609 samples, 1.79%)</title><rect x="23.5772%" y="181" width="1.7917%" height="15" fill="rgb(221,10,30)" fg:x="21173" fg:w="1609"/><text x="23.8272%" y="191.50">e..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1,771 samples, 1.97%)</title><rect x="23.4023%" y="309" width="1.9721%" height="15" fill="rgb(210,229,1)" fg:x="21016" fg:w="1771"/><text x="23.6523%" y="319.50">&lt;..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1,771 samples, 1.97%)</title><rect x="23.4023%" y="293" width="1.9721%" height="15" fill="rgb(222,148,37)" fg:x="21016" fg:w="1771"/><text x="23.6523%" y="303.50">s..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1,749 samples, 1.95%)</title><rect x="23.4268%" y="277" width="1.9476%" height="15" fill="rgb(234,67,33)" fg:x="21038" fg:w="1749"/><text x="23.6768%" y="287.50">s..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1,749 samples, 1.95%)</title><rect x="23.4268%" y="261" width="1.9476%" height="15" fill="rgb(247,98,35)" fg:x="21038" fg:w="1749"/><text x="23.6768%" y="271.50">&lt;..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1,742 samples, 1.94%)</title><rect x="23.4346%" y="245" width="1.9398%" height="15" fill="rgb(247,138,52)" fg:x="21045" fg:w="1742"/><text x="23.6846%" y="255.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::read_buf (1,742 samples, 1.94%)</title><rect x="23.4346%" y="229" width="1.9398%" height="15" fill="rgb(213,79,30)" fg:x="21045" fg:w="1742"/><text x="23.6846%" y="239.50">s..</text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (1,742 samples, 1.94%)</title><rect x="23.4346%" y="213" width="1.9398%" height="15" fill="rgb(246,177,23)" fg:x="21045" fg:w="1742"/><text x="23.6846%" y="223.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (34 samples, 0.04%)</title><rect x="25.5693%" y="261" width="0.0379%" height="15" fill="rgb(230,62,27)" fg:x="22962" fg:w="34"/><text x="25.8193%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (26 samples, 0.03%)</title><rect x="25.9167%" y="229" width="0.0290%" height="15" fill="rgb(216,154,8)" fg:x="23274" fg:w="26"/><text x="26.1667%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (288 samples, 0.32%)</title><rect x="26.5503%" y="197" width="0.3207%" height="15" fill="rgb(244,35,45)" fg:x="23843" fg:w="288"/><text x="26.8003%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (40 samples, 0.04%)</title><rect x="26.8733%" y="197" width="0.0445%" height="15" fill="rgb(251,115,12)" fg:x="24133" fg:w="40"/><text x="27.1233%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (27 samples, 0.03%)</title><rect x="27.6271%" y="181" width="0.0301%" height="15" fill="rgb(240,54,50)" fg:x="24810" fg:w="27"/><text x="27.8771%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (27 samples, 0.03%)</title><rect x="27.6271%" y="165" width="0.0301%" height="15" fill="rgb(233,84,52)" fg:x="24810" fg:w="27"/><text x="27.8771%" y="175.50"></text></g><g><title>alloc::alloc::realloc (27 samples, 0.03%)</title><rect x="27.6271%" y="149" width="0.0301%" height="15" fill="rgb(207,117,47)" fg:x="24810" fg:w="27"/><text x="27.8771%" y="159.50"></text></g><g><title>realloc (18 samples, 0.02%)</title><rect x="27.6372%" y="133" width="0.0200%" height="15" fill="rgb(249,43,39)" fg:x="24819" fg:w="18"/><text x="27.8872%" y="143.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="27.6450%" y="117" width="0.0122%" height="15" fill="rgb(209,38,44)" fg:x="24826" fg:w="11"/><text x="27.8950%" y="127.50"></text></g><g><title>__rdl_alloc (306 samples, 0.34%)</title><rect x="27.6572%" y="181" width="0.3407%" height="15" fill="rgb(236,212,23)" fg:x="24837" fg:w="306"/><text x="27.9072%" y="191.50"></text></g><g><title>__rust_alloc (657 samples, 0.73%)</title><rect x="27.9980%" y="181" width="0.7316%" height="15" fill="rgb(242,79,21)" fg:x="25143" fg:w="657"/><text x="28.2480%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (223 samples, 0.25%)</title><rect x="28.7296%" y="181" width="0.2483%" height="15" fill="rgb(211,96,35)" fg:x="25800" fg:w="223"/><text x="28.9796%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (36 samples, 0.04%)</title><rect x="28.9779%" y="181" width="0.0401%" height="15" fill="rgb(253,215,40)" fg:x="26023" fg:w="36"/><text x="29.2279%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,535 samples, 3.94%)</title><rect x="26.9178%" y="197" width="3.9364%" height="15" fill="rgb(211,81,21)" fg:x="24173" fg:w="3535"/><text x="27.1678%" y="207.50">allo..</text></g><g><title>malloc (1,649 samples, 1.84%)</title><rect x="29.0180%" y="181" width="1.8362%" height="15" fill="rgb(208,190,38)" fg:x="26059" fg:w="1649"/><text x="29.2680%" y="191.50">m..</text></g><g><title>core::alloc::layout::Layout::array (284 samples, 0.32%)</title><rect x="30.8542%" y="197" width="0.3162%" height="15" fill="rgb(235,213,38)" fg:x="27708" fg:w="284"/><text x="31.1042%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (284 samples, 0.32%)</title><rect x="30.8542%" y="181" width="0.3162%" height="15" fill="rgb(237,122,38)" fg:x="27708" fg:w="284"/><text x="31.1042%" y="191.50"></text></g><g><title>core::cmp::max (24 samples, 0.03%)</title><rect x="31.1705%" y="197" width="0.0267%" height="15" fill="rgb(244,218,35)" fg:x="27992" fg:w="24"/><text x="31.4205%" y="207.50"></text></g><g><title>core::cmp::Ord::max (24 samples, 0.03%)</title><rect x="31.1705%" y="181" width="0.0267%" height="15" fill="rgb(240,68,47)" fg:x="27992" fg:w="24"/><text x="31.4205%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.03%)</title><rect x="31.1705%" y="165" width="0.0267%" height="15" fill="rgb(210,16,53)" fg:x="27992" fg:w="24"/><text x="31.4205%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4,485 samples, 4.99%)</title><rect x="26.2319%" y="213" width="4.9943%" height="15" fill="rgb(235,124,12)" fg:x="23557" fg:w="4485"/><text x="26.4819%" y="223.50">alloc:..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (26 samples, 0.03%)</title><rect x="31.1972%" y="197" width="0.0290%" height="15" fill="rgb(224,169,11)" fg:x="28016" fg:w="26"/><text x="31.4472%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (26 samples, 0.03%)</title><rect x="31.1972%" y="181" width="0.0290%" height="15" fill="rgb(250,166,2)" fg:x="28016" fg:w="26"/><text x="31.4472%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5,066 samples, 5.64%)</title><rect x="25.6072%" y="261" width="5.6412%" height="15" fill="rgb(242,216,29)" fg:x="22996" fg:w="5066"/><text x="25.8572%" y="271.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5,066 samples, 5.64%)</title><rect x="25.6072%" y="245" width="5.6412%" height="15" fill="rgb(230,116,27)" fg:x="22996" fg:w="5066"/><text x="25.8572%" y="255.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4,762 samples, 5.30%)</title><rect x="25.9457%" y="229" width="5.3027%" height="15" fill="rgb(228,99,48)" fg:x="23300" fg:w="4762"/><text x="26.1957%" y="239.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.02%)</title><rect x="31.2261%" y="213" width="0.0223%" height="15" fill="rgb(253,11,6)" fg:x="28042" fg:w="20"/><text x="31.4761%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,465 samples, 3.86%)</title><rect x="31.2484%" y="261" width="3.8584%" height="15" fill="rgb(247,143,39)" fg:x="28062" fg:w="3465"/><text x="31.4984%" y="271.50">core..</text></g><g><title>[libc.so.6] (3,118 samples, 3.47%)</title><rect x="31.6348%" y="245" width="3.4720%" height="15" fill="rgb(236,97,10)" fg:x="28409" fg:w="3118"/><text x="31.8848%" y="255.50">[li..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9,092 samples, 10.12%)</title><rect x="25.3744%" y="277" width="10.1244%" height="15" fill="rgb(233,208,19)" fg:x="22787" fg:w="9092"/><text x="25.6244%" y="287.50">alloc::vec::Vec..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (352 samples, 0.39%)</title><rect x="35.1068%" y="261" width="0.3920%" height="15" fill="rgb(216,164,2)" fg:x="31527" fg:w="352"/><text x="35.3568%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10,450 samples, 11.64%)</title><rect x="25.3744%" y="309" width="11.6366%" height="15" fill="rgb(220,129,5)" fg:x="22787" fg:w="10450"/><text x="25.6244%" y="319.50">alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (10,450 samples, 11.64%)</title><rect x="25.3744%" y="293" width="11.6366%" height="15" fill="rgb(242,17,10)" fg:x="22787" fg:w="10450"/><text x="25.6244%" y="303.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>std::io::append_to_string (1,358 samples, 1.51%)</title><rect x="35.4988%" y="277" width="1.5122%" height="15" fill="rgb(242,107,0)" fg:x="31879" fg:w="1358"/><text x="35.7488%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.03%)</title><rect x="37.0110%" y="309" width="0.0301%" height="15" fill="rgb(251,28,31)" fg:x="33237" fg:w="27"/><text x="37.2610%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.03%)</title><rect x="37.0110%" y="293" width="0.0301%" height="15" fill="rgb(233,223,10)" fg:x="33237" fg:w="27"/><text x="37.2610%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.03%)</title><rect x="37.0110%" y="277" width="0.0301%" height="15" fill="rgb(215,21,27)" fg:x="33237" fg:w="27"/><text x="37.2610%" y="287.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (33,106 samples, 36.87%)</title><rect x="2.7805%" y="389" width="36.8651%" height="15" fill="rgb(232,23,21)" fg:x="2497" fg:w="33106"/><text x="3.0305%" y="399.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator..</text></g><g><title>std::io::BufRead::read_line (29,954 samples, 33.36%)</title><rect x="6.2904%" y="373" width="33.3552%" height="15" fill="rgb(244,5,23)" fg:x="5649" fg:w="29954"/><text x="6.5404%" y="383.50">std::io::BufRead::read_line</text></g><g><title>std::io::append_to_string (29,954 samples, 33.36%)</title><rect x="6.2904%" y="357" width="33.3552%" height="15" fill="rgb(226,81,46)" fg:x="5649" fg:w="29954"/><text x="6.5404%" y="367.50">std::io::append_to_string</text></g><g><title>std::io::BufRead::read_line::{{closure}} (15,980 samples, 17.79%)</title><rect x="21.8512%" y="341" width="17.7945%" height="15" fill="rgb(247,70,30)" fg:x="19623" fg:w="15980"/><text x="22.1012%" y="351.50">std::io::BufRead::read_line:..</text></g><g><title>std::io::read_until (15,710 samples, 17.49%)</title><rect x="22.1518%" y="325" width="17.4938%" height="15" fill="rgb(212,68,19)" fg:x="19893" fg:w="15710"/><text x="22.4018%" y="335.50">std::io::read_until</text></g><g><title>std::sys_common::memchr::memchr (2,339 samples, 2.60%)</title><rect x="37.0411%" y="309" width="2.6046%" height="15" fill="rgb(240,187,13)" fg:x="33264" fg:w="2339"/><text x="37.2911%" y="319.50">st..</text></g><g><title>std::sys::unix::memchr::memchr (2,068 samples, 2.30%)</title><rect x="37.3429%" y="293" width="2.3028%" height="15" fill="rgb(223,113,26)" fg:x="33535" fg:w="2068"/><text x="37.5929%" y="303.50">s..</text></g><g><title>[libc.so.6] (1,185 samples, 1.32%)</title><rect x="38.3261%" y="277" width="1.3196%" height="15" fill="rgb(206,192,2)" fg:x="34418" fg:w="1185"/><text x="38.5761%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map_while::MapWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (34,600 samples, 38.53%)</title><rect x="1.1525%" y="405" width="38.5288%" height="15" fill="rgb(241,108,4)" fg:x="1035" fg:w="34600"/><text x="1.4025%" y="415.50">&lt;core::iter::adapters::map_while::MapWhile&lt;I,P&gt; as core::iter::..</text></g><g><title>core::ops::function::FnMut::call_mut (32 samples, 0.04%)</title><rect x="39.6457%" y="389" width="0.0356%" height="15" fill="rgb(247,173,49)" fg:x="35603" fg:w="32"/><text x="39.8957%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (32 samples, 0.04%)</title><rect x="39.6457%" y="373" width="0.0356%" height="15" fill="rgb(224,114,35)" fg:x="35603" fg:w="32"/><text x="39.8957%" y="383.50"></text></g><g><title>__rdl_dealloc (296 samples, 0.33%)</title><rect x="39.6869%" y="309" width="0.3296%" height="15" fill="rgb(245,159,27)" fg:x="35640" fg:w="296"/><text x="39.9369%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (296 samples, 0.33%)</title><rect x="39.6869%" y="293" width="0.3296%" height="15" fill="rgb(245,172,44)" fg:x="35640" fg:w="296"/><text x="39.9369%" y="303.50"></text></g><g><title>__rust_dealloc (314 samples, 0.35%)</title><rect x="40.0165%" y="309" width="0.3497%" height="15" fill="rgb(236,23,11)" fg:x="35936" fg:w="314"/><text x="40.2665%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,379 samples, 3.76%)</title><rect x="39.6846%" y="341" width="3.7627%" height="15" fill="rgb(205,117,38)" fg:x="35638" fg:w="3379"/><text x="39.9346%" y="351.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (3,379 samples, 3.76%)</title><rect x="39.6846%" y="325" width="3.7627%" height="15" fill="rgb(237,72,25)" fg:x="35638" fg:w="3379"/><text x="39.9346%" y="335.50">allo..</text></g><g><title>cfree (2,767 samples, 3.08%)</title><rect x="40.3661%" y="309" width="3.0812%" height="15" fill="rgb(244,70,9)" fg:x="36250" fg:w="2767"/><text x="40.6161%" y="319.50">cfr..</text></g><g><title>[libc.so.6] (1,966 samples, 2.19%)</title><rect x="41.2581%" y="293" width="2.1892%" height="15" fill="rgb(217,125,39)" fg:x="37051" fg:w="1966"/><text x="41.5081%" y="303.50">[..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,655 samples, 4.07%)</title><rect x="39.6846%" y="405" width="4.0700%" height="15" fill="rgb(235,36,10)" fg:x="35638" fg:w="3655"/><text x="39.9346%" y="415.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,655 samples, 4.07%)</title><rect x="39.6846%" y="389" width="4.0700%" height="15" fill="rgb(251,123,47)" fg:x="35638" fg:w="3655"/><text x="39.9346%" y="399.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,655 samples, 4.07%)</title><rect x="39.6846%" y="373" width="4.0700%" height="15" fill="rgb(221,13,13)" fg:x="35638" fg:w="3655"/><text x="39.9346%" y="383.50">core..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,655 samples, 4.07%)</title><rect x="39.6846%" y="357" width="4.0700%" height="15" fill="rgb(238,131,9)" fg:x="35638" fg:w="3655"/><text x="39.9346%" y="367.50">&lt;all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (276 samples, 0.31%)</title><rect x="43.4473%" y="341" width="0.3073%" height="15" fill="rgb(211,50,8)" fg:x="39017" fg:w="276"/><text x="43.6973%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (274 samples, 0.31%)</title><rect x="43.7547%" y="405" width="0.3051%" height="15" fill="rgb(245,182,24)" fg:x="39293" fg:w="274"/><text x="44.0047%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (326 samples, 0.36%)</title><rect x="45.0675%" y="373" width="0.3630%" height="15" fill="rgb(242,14,37)" fg:x="40472" fg:w="326"/><text x="45.3175%" y="383.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (124 samples, 0.14%)</title><rect x="48.3224%" y="341" width="0.1381%" height="15" fill="rgb(246,228,12)" fg:x="43395" fg:w="124"/><text x="48.5724%" y="351.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (44 samples, 0.05%)</title><rect x="48.4605%" y="341" width="0.0490%" height="15" fill="rgb(213,55,15)" fg:x="43519" fg:w="44"/><text x="48.7105%" y="351.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,718 samples, 4.14%)</title><rect x="48.5095%" y="341" width="4.1402%" height="15" fill="rgb(209,9,3)" fg:x="43563" fg:w="3718"/><text x="48.7595%" y="351.50">&lt;f32 ..</text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (4,274 samples, 4.76%)</title><rect x="48.0530%" y="357" width="4.7593%" height="15" fill="rgb(230,59,30)" fg:x="43153" fg:w="4274"/><text x="48.3030%" y="367.50">core::..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (146 samples, 0.16%)</title><rect x="52.6497%" y="341" width="0.1626%" height="15" fill="rgb(209,121,21)" fg:x="47281" fg:w="146"/><text x="52.8997%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (222 samples, 0.25%)</title><rect x="55.0917%" y="341" width="0.2472%" height="15" fill="rgb(220,109,13)" fg:x="49474" fg:w="222"/><text x="55.3417%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (3,374 samples, 3.76%)</title><rect x="57.4869%" y="309" width="3.7571%" height="15" fill="rgb(232,18,1)" fg:x="51625" fg:w="3374"/><text x="57.7369%" y="319.50">&lt;[u8..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::{{closure}} (60 samples, 0.07%)</title><rect x="61.1772%" y="293" width="0.0668%" height="15" fill="rgb(215,41,42)" fg:x="54939" fg:w="60"/><text x="61.4272%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (7,635 samples, 8.50%)</title><rect x="52.8123%" y="357" width="8.5019%" height="15" fill="rgb(224,123,36)" fg:x="47427" fg:w="7635"/><text x="53.0623%" y="367.50">core::num::d..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (5,366 samples, 5.98%)</title><rect x="55.3389%" y="341" width="5.9753%" height="15" fill="rgb(240,125,3)" fg:x="49696" fg:w="5366"/><text x="55.5889%" y="351.50">core::nu..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits (4,618 samples, 5.14%)</title><rect x="56.1718%" y="325" width="5.1424%" height="15" fill="rgb(205,98,50)" fg:x="50444" fg:w="4618"/><text x="56.4218%" y="335.50">core::..</text></g><g><title>core::num::dec2flt::parse::parse_number (63 samples, 0.07%)</title><rect x="61.2441%" y="309" width="0.0702%" height="15" fill="rgb(205,185,37)" fg:x="54999" fg:w="63"/><text x="61.4941%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (15,781 samples, 17.57%)</title><rect x="44.0598%" y="405" width="17.5729%" height="15" fill="rgb(238,207,15)" fg:x="39567" fg:w="15781"/><text x="44.3098%" y="415.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (15,737 samples, 17.52%)</title><rect x="44.1088%" y="389" width="17.5239%" height="15" fill="rgb(213,199,42)" fg:x="39611" fg:w="15737"/><text x="44.3588%" y="399.50">core::num::dec2flt::&lt;impl c..</text></g><g><title>core::num::dec2flt::dec2flt (14,550 samples, 16.20%)</title><rect x="45.4306%" y="373" width="16.2021%" height="15" fill="rgb(235,201,11)" fg:x="40798" fg:w="14550"/><text x="45.6806%" y="383.50">core::num::dec2flt::dec2f..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (286 samples, 0.32%)</title><rect x="61.3142%" y="357" width="0.3185%" height="15" fill="rgb(207,46,11)" fg:x="55062" fg:w="286"/><text x="61.5642%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (447 samples, 0.50%)</title><rect x="62.0636%" y="373" width="0.4978%" height="15" fill="rgb(241,35,35)" fg:x="55735" fg:w="447"/><text x="62.3136%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (447 samples, 0.50%)</title><rect x="62.0636%" y="357" width="0.4978%" height="15" fill="rgb(243,32,47)" fg:x="55735" fg:w="447"/><text x="62.3136%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (447 samples, 0.50%)</title><rect x="62.0636%" y="341" width="0.4978%" height="15" fill="rgb(247,202,23)" fg:x="55735" fg:w="447"/><text x="62.3136%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (46 samples, 0.05%)</title><rect x="63.1783%" y="341" width="0.0512%" height="15" fill="rgb(219,102,11)" fg:x="56736" fg:w="46"/><text x="63.4283%" y="351.50"></text></g><g><title>core::ptr::align_offset (46 samples, 0.05%)</title><rect x="63.1783%" y="325" width="0.0512%" height="15" fill="rgb(243,110,44)" fg:x="56736" fg:w="46"/><text x="63.4283%" y="335.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (122 samples, 0.14%)</title><rect x="63.2295%" y="341" width="0.1359%" height="15" fill="rgb(222,74,54)" fg:x="56782" fg:w="122"/><text x="63.4795%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (14 samples, 0.02%)</title><rect x="63.3498%" y="325" width="0.0156%" height="15" fill="rgb(216,99,12)" fg:x="56890" fg:w="14"/><text x="63.5998%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_naive (873 samples, 0.97%)</title><rect x="63.3654%" y="341" width="0.9721%" height="15" fill="rgb(226,22,26)" fg:x="56904" fg:w="873"/><text x="63.6154%" y="351.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,615 samples, 1.80%)</title><rect x="62.5781%" y="357" width="1.7984%" height="15" fill="rgb(217,163,10)" fg:x="56197" fg:w="1615"/><text x="62.8281%" y="367.50">c..</text></g><g><title>core::slice::memchr::repeat_byte (35 samples, 0.04%)</title><rect x="64.3375%" y="341" width="0.0390%" height="15" fill="rgb(213,25,53)" fg:x="57777" fg:w="35"/><text x="64.5875%" y="351.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,904 samples, 5.46%)</title><rect x="61.6327%" y="389" width="5.4608%" height="15" fill="rgb(252,105,26)" fg:x="55348" fg:w="4904"/><text x="61.8827%" y="399.50">&lt;core::..</text></g><g><title>core::slice::memchr::memchr (4,070 samples, 4.53%)</title><rect x="62.5614%" y="373" width="4.5321%" height="15" fill="rgb(220,39,43)" fg:x="56182" fg:w="4070"/><text x="62.8114%" y="383.50">core:..</text></g><g><title>core::slice::memchr::memchr_naive (2,440 samples, 2.72%)</title><rect x="64.3765%" y="357" width="2.7171%" height="15" fill="rgb(229,68,48)" fg:x="57812" fg:w="2440"/><text x="64.6265%" y="367.50">co..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (4,923 samples, 5.48%)</title><rect x="61.6327%" y="405" width="5.4820%" height="15" fill="rgb(252,8,32)" fg:x="55348" fg:w="4923"/><text x="61.8827%" y="415.50">core::s..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="67.0935%" y="389" width="0.0212%" height="15" fill="rgb(223,20,43)" fg:x="60252" fg:w="19"/><text x="67.3435%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="67.0935%" y="373" width="0.0212%" height="15" fill="rgb(229,81,49)" fg:x="60252" fg:w="19"/><text x="67.3435%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="67.0935%" y="357" width="0.0212%" height="15" fill="rgb(236,28,36)" fg:x="60252" fg:w="19"/><text x="67.3435%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (10 samples, 0.01%)</title><rect x="67.1035%" y="341" width="0.0111%" height="15" fill="rgb(249,185,26)" fg:x="60261" fg:w="10"/><text x="67.3535%" y="351.50"></text></g><g><title>brc_rust::main (288 samples, 0.32%)</title><rect x="67.1147%" y="373" width="0.3207%" height="15" fill="rgb(249,174,33)" fg:x="60271" fg:w="288"/><text x="67.3647%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (635 samples, 0.71%)</title><rect x="69.9943%" y="261" width="0.7071%" height="15" fill="rgb(233,201,37)" fg:x="62857" fg:w="635"/><text x="70.2443%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,474 samples, 1.64%)</title><rect x="69.4153%" y="277" width="1.6414%" height="15" fill="rgb(221,78,26)" fg:x="62337" fg:w="1474"/><text x="69.6653%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (319 samples, 0.36%)</title><rect x="70.7014%" y="261" width="0.3552%" height="15" fill="rgb(250,127,30)" fg:x="63492" fg:w="319"/><text x="70.9514%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,978 samples, 3.32%)</title><rect x="71.6468%" y="261" width="3.3161%" height="15" fill="rgb(230,49,44)" fg:x="64341" fg:w="2978"/><text x="71.8968%" y="271.50">cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6,730 samples, 7.49%)</title><rect x="68.0723%" y="293" width="7.4942%" height="15" fill="rgb(229,67,23)" fg:x="61131" fg:w="6730"/><text x="68.3223%" y="303.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,050 samples, 4.51%)</title><rect x="71.0566%" y="277" width="4.5099%" height="15" fill="rgb(249,83,47)" fg:x="63811" fg:w="4050"/><text x="71.3066%" y="287.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (542 samples, 0.60%)</title><rect x="74.9630%" y="261" width="0.6035%" height="15" fill="rgb(215,43,3)" fg:x="67319" fg:w="542"/><text x="75.2130%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8,135 samples, 9.06%)</title><rect x="68.0723%" y="325" width="9.0587%" height="15" fill="rgb(238,154,13)" fg:x="61131" fg:w="8135"/><text x="68.3223%" y="335.50">&lt;std::collect..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8,135 samples, 9.06%)</title><rect x="68.0723%" y="309" width="9.0587%" height="15" fill="rgb(219,56,2)" fg:x="61131" fg:w="8135"/><text x="68.3223%" y="319.50">&lt;core::hash::..</text></g><g><title>core::hash::BuildHasher::hash_one (1,405 samples, 1.56%)</title><rect x="75.5665%" y="293" width="1.5645%" height="15" fill="rgb(233,0,4)" fg:x="67861" fg:w="1405"/><text x="75.8165%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (623 samples, 0.69%)</title><rect x="77.1311%" y="325" width="0.6937%" height="15" fill="rgb(235,30,7)" fg:x="69266" fg:w="623"/><text x="77.3811%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (303 samples, 0.34%)</title><rect x="77.4874%" y="309" width="0.3374%" height="15" fill="rgb(250,79,13)" fg:x="69586" fg:w="303"/><text x="77.7374%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (303 samples, 0.34%)</title><rect x="77.4874%" y="293" width="0.3374%" height="15" fill="rgb(211,146,34)" fg:x="69586" fg:w="303"/><text x="77.7374%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (303 samples, 0.34%)</title><rect x="77.4874%" y="277" width="0.3374%" height="15" fill="rgb(228,22,38)" fg:x="69586" fg:w="303"/><text x="77.7374%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (101 samples, 0.11%)</title><rect x="77.8248%" y="325" width="0.1125%" height="15" fill="rgb(235,168,5)" fg:x="69889" fg:w="101"/><text x="78.0748%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (135 samples, 0.15%)</title><rect x="79.0820%" y="213" width="0.1503%" height="15" fill="rgb(221,155,16)" fg:x="71018" fg:w="135"/><text x="79.3320%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (443 samples, 0.49%)</title><rect x="78.8481%" y="229" width="0.4933%" height="15" fill="rgb(215,215,53)" fg:x="70808" fg:w="443"/><text x="79.0981%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (98 samples, 0.11%)</title><rect x="79.2323%" y="213" width="0.1091%" height="15" fill="rgb(223,4,10)" fg:x="71153" fg:w="98"/><text x="79.4823%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (474 samples, 0.53%)</title><rect x="79.3414%" y="229" width="0.5278%" height="15" fill="rgb(234,103,6)" fg:x="71251" fg:w="474"/><text x="79.5914%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,737 samples, 1.93%)</title><rect x="77.9373%" y="245" width="1.9342%" height="15" fill="rgb(227,97,0)" fg:x="69990" fg:w="1737"/><text x="78.1873%" y="255.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.02%)</title><rect x="81.1476%" y="213" width="0.0178%" height="15" fill="rgb(234,150,53)" fg:x="72873" fg:w="16"/><text x="81.3976%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (67 samples, 0.07%)</title><rect x="81.2211%" y="197" width="0.0746%" height="15" fill="rgb(228,201,54)" fg:x="72939" fg:w="67"/><text x="81.4711%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (164 samples, 0.18%)</title><rect x="81.1654%" y="213" width="0.1826%" height="15" fill="rgb(222,22,37)" fg:x="72889" fg:w="164"/><text x="81.4154%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (47 samples, 0.05%)</title><rect x="81.2957%" y="197" width="0.0523%" height="15" fill="rgb(237,53,32)" fg:x="73006" fg:w="47"/><text x="81.5457%" y="207.50"></text></g><g><title>core::cmp::min (130 samples, 0.14%)</title><rect x="81.3481%" y="213" width="0.1448%" height="15" fill="rgb(233,25,53)" fg:x="73053" fg:w="130"/><text x="81.5981%" y="223.50"></text></g><g><title>core::cmp::Ord::min (130 samples, 0.14%)</title><rect x="81.3481%" y="197" width="0.1448%" height="15" fill="rgb(210,40,34)" fg:x="73053" fg:w="130"/><text x="81.5981%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (130 samples, 0.14%)</title><rect x="81.3481%" y="181" width="0.1448%" height="15" fill="rgb(241,220,44)" fg:x="73053" fg:w="130"/><text x="81.5981%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (13,194 samples, 14.69%)</title><rect x="67.4465%" y="357" width="14.6922%" height="15" fill="rgb(235,28,35)" fg:x="60569" fg:w="13194"/><text x="67.6965%" y="367.50">hashbrown::map::make_h..</text></g><g><title>core::hash::BuildHasher::hash_one (12,919 samples, 14.39%)</title><rect x="67.7527%" y="341" width="14.3859%" height="15" fill="rgb(210,56,17)" fg:x="60844" fg:w="12919"/><text x="68.0027%" y="351.50">core::hash::BuildHashe..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,773 samples, 4.20%)</title><rect x="77.9373%" y="325" width="4.2014%" height="15" fill="rgb(224,130,29)" fg:x="69990" fg:w="3773"/><text x="78.1873%" y="335.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,773 samples, 4.20%)</title><rect x="77.9373%" y="309" width="4.2014%" height="15" fill="rgb(235,212,8)" fg:x="69990" fg:w="3773"/><text x="78.1873%" y="319.50">core:..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3,773 samples, 4.20%)</title><rect x="77.9373%" y="293" width="4.2014%" height="15" fill="rgb(223,33,50)" fg:x="69990" fg:w="3773"/><text x="78.1873%" y="303.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,773 samples, 4.20%)</title><rect x="77.9373%" y="277" width="4.2014%" height="15" fill="rgb(219,149,13)" fg:x="69990" fg:w="3773"/><text x="78.1873%" y="287.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,773 samples, 4.20%)</title><rect x="77.9373%" y="261" width="4.2014%" height="15" fill="rgb(250,156,29)" fg:x="69990" fg:w="3773"/><text x="78.1873%" y="271.50">&lt;core..</text></g><g><title>core::hash::Hasher::write_u8 (2,036 samples, 2.27%)</title><rect x="79.8715%" y="245" width="2.2672%" height="15" fill="rgb(216,193,19)" fg:x="71727" fg:w="2036"/><text x="80.1215%" y="255.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,857 samples, 2.07%)</title><rect x="80.0708%" y="229" width="2.0679%" height="15" fill="rgb(216,135,14)" fg:x="71906" fg:w="1857"/><text x="80.3208%" y="239.50">&lt;..</text></g><g><title>core::hash::sip::u8to64_le (580 samples, 0.65%)</title><rect x="81.4928%" y="213" width="0.6459%" height="15" fill="rgb(241,47,5)" fg:x="73183" fg:w="580"/><text x="81.7428%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,162 samples, 1.29%)</title><rect x="82.8124%" y="309" width="1.2939%" height="15" fill="rgb(233,42,35)" fg:x="74368" fg:w="1162"/><text x="83.0624%" y="319.50"></text></g><g><title>brc_rust::main (1,717 samples, 1.91%)</title><rect x="84.1063%" y="309" width="1.9120%" height="15" fill="rgb(231,13,6)" fg:x="75530" fg:w="1717"/><text x="84.3563%" y="319.50">b..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (8,799 samples, 9.80%)</title><rect x="86.0183%" y="277" width="9.7981%" height="15" fill="rgb(207,181,40)" fg:x="77247" fg:w="8799"/><text x="86.2683%" y="287.50">&lt;Q as hashbrow..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,793 samples, 9.79%)</title><rect x="86.0250%" y="261" width="9.7914%" height="15" fill="rgb(254,173,49)" fg:x="77253" fg:w="8793"/><text x="86.2750%" y="271.50">core::cmp::imp..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (8,793 samples, 9.79%)</title><rect x="86.0250%" y="245" width="9.7914%" height="15" fill="rgb(221,1,38)" fg:x="77253" fg:w="8793"/><text x="86.2750%" y="255.50">core::str::tra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,793 samples, 9.79%)</title><rect x="86.0250%" y="229" width="9.7914%" height="15" fill="rgb(206,124,46)" fg:x="77253" fg:w="8793"/><text x="86.2750%" y="239.50">core::cmp::imp..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8,793 samples, 9.79%)</title><rect x="86.0250%" y="213" width="9.7914%" height="15" fill="rgb(249,21,11)" fg:x="77253" fg:w="8793"/><text x="86.2750%" y="223.50">core::slice::c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,793 samples, 9.79%)</title><rect x="86.0250%" y="197" width="9.7914%" height="15" fill="rgb(222,201,40)" fg:x="77253" fg:w="8793"/><text x="86.2750%" y="207.50">&lt;[A] as core::..</text></g><g><title>[libc.so.6] (5,471 samples, 6.09%)</title><rect x="89.7242%" y="181" width="6.0922%" height="15" fill="rgb(235,61,29)" fg:x="80575" fg:w="5471"/><text x="89.9742%" y="191.50">[libc.so..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (8,998 samples, 10.02%)</title><rect x="86.0183%" y="293" width="10.0197%" height="15" fill="rgb(219,207,3)" fg:x="77247" fg:w="8998"/><text x="86.2683%" y="303.50">hashbrown::map..</text></g><g><title>brc_rust::main (199 samples, 0.22%)</title><rect x="95.8164%" y="277" width="0.2216%" height="15" fill="rgb(222,56,46)" fg:x="86046" fg:w="199"/><text x="96.0664%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (296 samples, 0.33%)</title><rect x="96.0380%" y="293" width="0.3296%" height="15" fill="rgb(239,76,54)" fg:x="86245" fg:w="296"/><text x="96.2880%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (296 samples, 0.33%)</title><rect x="96.0380%" y="277" width="0.3296%" height="15" fill="rgb(231,124,27)" fg:x="86245" fg:w="296"/><text x="96.2880%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (296 samples, 0.33%)</title><rect x="96.0380%" y="261" width="0.3296%" height="15" fill="rgb(249,195,6)" fg:x="86245" fg:w="296"/><text x="96.2880%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (296 samples, 0.33%)</title><rect x="96.0380%" y="245" width="0.3296%" height="15" fill="rgb(237,174,47)" fg:x="86245" fg:w="296"/><text x="96.2880%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (9,610 samples, 10.70%)</title><rect x="86.0183%" y="309" width="10.7012%" height="15" fill="rgb(206,201,31)" fg:x="77247" fg:w="9610"/><text x="86.2683%" y="319.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (316 samples, 0.35%)</title><rect x="96.3676%" y="293" width="0.3519%" height="15" fill="rgb(231,57,52)" fg:x="86541" fg:w="316"/><text x="96.6176%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (316 samples, 0.35%)</title><rect x="96.3676%" y="277" width="0.3519%" height="15" fill="rgb(248,177,22)" fg:x="86541" fg:w="316"/><text x="96.6176%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (316 samples, 0.35%)</title><rect x="96.3676%" y="261" width="0.3519%" height="15" fill="rgb(215,211,37)" fg:x="86541" fg:w="316"/><text x="96.6176%" y="271.50"></text></g><g><title>brc_rust::main (389 samples, 0.43%)</title><rect x="96.7228%" y="277" width="0.4332%" height="15" fill="rgb(241,128,51)" fg:x="86860" fg:w="389"/><text x="96.9728%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (396 samples, 0.44%)</title><rect x="96.7228%" y="309" width="0.4410%" height="15" fill="rgb(227,165,31)" fg:x="86860" fg:w="396"/><text x="96.9728%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (396 samples, 0.44%)</title><rect x="96.7228%" y="293" width="0.4410%" height="15" fill="rgb(228,167,24)" fg:x="86860" fg:w="396"/><text x="96.9728%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,457 samples, 2.74%)</title><rect x="97.1638%" y="309" width="2.7360%" height="15" fill="rgb(228,143,12)" fg:x="87256" fg:w="2457"/><text x="97.4138%" y="319.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,457 samples, 2.74%)</title><rect x="97.1638%" y="293" width="2.7360%" height="15" fill="rgb(249,149,8)" fg:x="87256" fg:w="2457"/><text x="97.4138%" y="303.50">co..</text></g><g><title>all (89,803 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="719.50"></text></g><g><title>brc-rust (89,803 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="703.50">brc-rust</text></g><g><title>_start (89,803 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(233,213,13)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="687.50">_start</text></g><g><title>__libc_start_main (89,803 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="671.50">__libc_start_main</text></g><g><title>[libc.so.6] (89,803 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="655.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (89,803 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="639.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (89,803 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (89,803 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (89,803 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (89,803 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (89,803 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="559.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (89,803 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(230,138,44)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (89,803 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (89,803 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (89,803 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (89,803 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="479.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (89,803 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (89,803 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>brc_rust::main (89,803 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="89803"/><text x="0.2500%" y="431.50">brc_rust::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (29,532 samples, 32.89%)</title><rect x="67.1147%" y="405" width="32.8853%" height="15" fill="rgb(213,46,41)" fg:x="60271" fg:w="29532"/><text x="67.3647%" y="415.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (29,532 samples, 32.89%)</title><rect x="67.1147%" y="389" width="32.8853%" height="15" fill="rgb(215,133,35)" fg:x="60271" fg:w="29532"/><text x="67.3647%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (29,244 samples, 32.56%)</title><rect x="67.4354%" y="373" width="32.5646%" height="15" fill="rgb(213,28,5)" fg:x="60559" fg:w="29244"/><text x="67.6854%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (16,040 samples, 17.86%)</title><rect x="82.1387%" y="357" width="17.8613%" height="15" fill="rgb(215,77,49)" fg:x="73763" fg:w="16040"/><text x="82.3887%" y="367.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16,040 samples, 17.86%)</title><rect x="82.1387%" y="341" width="17.8613%" height="15" fill="rgb(248,100,22)" fg:x="73763" fg:w="16040"/><text x="82.3887%" y="351.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16,039 samples, 17.86%)</title><rect x="82.1398%" y="325" width="17.8602%" height="15" fill="rgb(208,67,9)" fg:x="73764" fg:w="16039"/><text x="82.3898%" y="335.50">hashbrown::raw::RawTableInne..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (90 samples, 0.10%)</title><rect x="99.8998%" y="309" width="0.1002%" height="15" fill="rgb(219,133,21)" fg:x="89713" fg:w="90"/><text x="100.1498%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (90 samples, 0.10%)</title><rect x="99.8998%" y="293" width="0.1002%" height="15" fill="rgb(246,46,29)" fg:x="89713" fg:w="90"/><text x="100.1498%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (90 samples, 0.10%)</title><rect x="99.8998%" y="277" width="0.1002%" height="15" fill="rgb(246,185,52)" fg:x="89713" fg:w="90"/><text x="100.1498%" y="287.50"></text></g></svg></svg>