<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="65655"><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,698 samples, 2.59%)</title><rect x="10.4501%" y="293" width="2.5862%" height="15" fill="rgb(227,0,7)" fg:x="6861" fg:w="1698"/><text x="10.7001%" y="303.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,698 samples, 2.59%)</title><rect x="10.4501%" y="277" width="2.5862%" height="15" fill="rgb(217,0,24)" fg:x="6861" fg:w="1698"/><text x="10.7001%" y="287.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,698 samples, 2.59%)</title><rect x="10.4501%" y="261" width="2.5862%" height="15" fill="rgb(221,193,54)" fg:x="6861" fg:w="1698"/><text x="10.7001%" y="271.50">&lt;[..</text></g><g><title>[libc.so.6] (1,345 samples, 2.05%)</title><rect x="10.9877%" y="245" width="2.0486%" height="15" fill="rgb(248,212,6)" fg:x="7214" fg:w="1345"/><text x="11.2377%" y="255.50">[..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (180 samples, 0.27%)</title><rect x="13.0363%" y="293" width="0.2742%" height="15" fill="rgb(208,68,35)" fg:x="8559" fg:w="180"/><text x="13.2863%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (180 samples, 0.27%)</title><rect x="13.0363%" y="277" width="0.2742%" height="15" fill="rgb(232,128,0)" fg:x="8559" fg:w="180"/><text x="13.2863%" y="287.50"></text></g><g><title>__mod_lruvec_page_state (8 samples, 0.01%)</title><rect x="18.0504%" y="101" width="0.0122%" height="15" fill="rgb(207,160,47)" fg:x="11851" fg:w="8"/><text x="18.3004%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (10 samples, 0.02%)</title><rect x="18.1250%" y="53" width="0.0152%" height="15" fill="rgb(228,23,34)" fg:x="11900" fg:w="10"/><text x="18.3750%" y="63.50"></text></g><g><title>__mod_node_page_state (11 samples, 0.02%)</title><rect x="18.1403%" y="53" width="0.0168%" height="15" fill="rgb(218,30,26)" fg:x="11910" fg:w="11"/><text x="18.3903%" y="63.50"></text></g><g><title>__mod_lruvec_state (29 samples, 0.04%)</title><rect x="18.1174%" y="69" width="0.0442%" height="15" fill="rgb(220,122,19)" fg:x="11895" fg:w="29"/><text x="18.3674%" y="79.50"></text></g><g><title>__mod_lruvec_page_state (37 samples, 0.06%)</title><rect x="18.1083%" y="85" width="0.0564%" height="15" fill="rgb(250,228,42)" fg:x="11889" fg:w="37"/><text x="18.3583%" y="95.50"></text></g><g><title>page_add_file_rmap (71 samples, 0.11%)</title><rect x="18.0702%" y="101" width="0.1081%" height="15" fill="rgb(240,193,28)" fg:x="11864" fg:w="71"/><text x="18.3202%" y="111.50"></text></g><g><title>do_set_pte (130 samples, 0.20%)</title><rect x="17.9956%" y="117" width="0.1980%" height="15" fill="rgb(216,20,37)" fg:x="11815" fg:w="130"/><text x="18.2456%" y="127.50"></text></g><g><title>next_uptodate_page (15 samples, 0.02%)</title><rect x="18.1966%" y="117" width="0.0228%" height="15" fill="rgb(206,188,39)" fg:x="11947" fg:w="15"/><text x="18.4466%" y="127.50"></text></g><g><title>filemap_map_pages (186 samples, 0.28%)</title><rect x="17.9529%" y="133" width="0.2833%" height="15" fill="rgb(217,207,13)" fg:x="11787" fg:w="186"/><text x="18.2029%" y="143.50"></text></g><g><title>xas_find (9 samples, 0.01%)</title><rect x="18.2225%" y="117" width="0.0137%" height="15" fill="rgb(231,73,38)" fg:x="11964" fg:w="9"/><text x="18.4725%" y="127.50"></text></g><g><title>xas_load (7 samples, 0.01%)</title><rect x="18.2256%" y="101" width="0.0107%" height="15" fill="rgb(225,20,46)" fg:x="11966" fg:w="7"/><text x="18.4756%" y="111.50"></text></g><g><title>do_fault (194 samples, 0.30%)</title><rect x="17.9453%" y="165" width="0.2955%" height="15" fill="rgb(210,31,41)" fg:x="11782" fg:w="194"/><text x="18.1953%" y="175.50"></text></g><g><title>do_read_fault (191 samples, 0.29%)</title><rect x="17.9499%" y="149" width="0.2909%" height="15" fill="rgb(221,200,47)" fg:x="11785" fg:w="191"/><text x="18.1999%" y="159.50"></text></g><g><title>__handle_mm_fault (210 samples, 0.32%)</title><rect x="17.9240%" y="197" width="0.3199%" height="15" fill="rgb(226,26,5)" fg:x="11768" fg:w="210"/><text x="18.1740%" y="207.50"></text></g><g><title>handle_pte_fault (202 samples, 0.31%)</title><rect x="17.9362%" y="181" width="0.3077%" height="15" fill="rgb(249,33,26)" fg:x="11776" fg:w="202"/><text x="18.1862%" y="191.50"></text></g><g><title>handle_mm_fault (220 samples, 0.34%)</title><rect x="17.9133%" y="213" width="0.3351%" height="15" fill="rgb(235,183,28)" fg:x="11761" fg:w="220"/><text x="18.1633%" y="223.50"></text></g><g><title>asm_exc_page_fault (250 samples, 0.38%)</title><rect x="17.8722%" y="261" width="0.3808%" height="15" fill="rgb(221,5,38)" fg:x="11734" fg:w="250"/><text x="18.1222%" y="271.50"></text></g><g><title>exc_page_fault (250 samples, 0.38%)</title><rect x="17.8722%" y="245" width="0.3808%" height="15" fill="rgb(247,18,42)" fg:x="11734" fg:w="250"/><text x="18.1222%" y="255.50"></text></g><g><title>do_user_addr_fault (250 samples, 0.38%)</title><rect x="17.8722%" y="229" width="0.3808%" height="15" fill="rgb(241,131,45)" fg:x="11734" fg:w="250"/><text x="18.1222%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (614 samples, 0.94%)</title><rect x="18.2530%" y="261" width="0.9352%" height="15" fill="rgb(249,31,29)" fg:x="11984" fg:w="614"/><text x="18.5030%" y="271.50"></text></g><g><title>core::ptr::align_offset (614 samples, 0.94%)</title><rect x="18.2530%" y="245" width="0.9352%" height="15" fill="rgb(225,111,53)" fg:x="11984" fg:w="614"/><text x="18.5030%" y="255.50"></text></g><g><title>__mod_lruvec_page_state (15 samples, 0.02%)</title><rect x="19.9269%" y="85" width="0.0228%" height="15" fill="rgb(238,160,17)" fg:x="13083" fg:w="15"/><text x="20.1769%" y="95.50"></text></g><g><title>__mod_memcg_lruvec_state (20 samples, 0.03%)</title><rect x="20.0564%" y="37" width="0.0305%" height="15" fill="rgb(214,148,48)" fg:x="13168" fg:w="20"/><text x="20.3064%" y="47.50"></text></g><g><title>__mod_lruvec_state (35 samples, 0.05%)</title><rect x="20.0426%" y="53" width="0.0533%" height="15" fill="rgb(232,36,49)" fg:x="13159" fg:w="35"/><text x="20.2926%" y="63.50"></text></g><g><title>__mod_lruvec_page_state (58 samples, 0.09%)</title><rect x="20.0122%" y="69" width="0.0883%" height="15" fill="rgb(209,103,24)" fg:x="13139" fg:w="58"/><text x="20.2622%" y="79.50"></text></g><g><title>page_add_file_rmap (101 samples, 0.15%)</title><rect x="19.9574%" y="85" width="0.1538%" height="15" fill="rgb(229,88,8)" fg:x="13103" fg:w="101"/><text x="20.2074%" y="95.50"></text></g><g><title>percpu_counter_add_batch (13 samples, 0.02%)</title><rect x="20.1112%" y="85" width="0.0198%" height="15" fill="rgb(213,181,19)" fg:x="13204" fg:w="13"/><text x="20.3612%" y="95.50"></text></g><g><title>do_set_pte (182 samples, 0.28%)</title><rect x="19.8690%" y="101" width="0.2772%" height="15" fill="rgb(254,191,54)" fg:x="13045" fg:w="182"/><text x="20.1190%" y="111.50"></text></g><g><title>unlock_page_memcg (7 samples, 0.01%)</title><rect x="20.1356%" y="85" width="0.0107%" height="15" fill="rgb(241,83,37)" fg:x="13220" fg:w="7"/><text x="20.3856%" y="95.50"></text></g><g><title>next_uptodate_page (22 samples, 0.03%)</title><rect x="20.1554%" y="101" width="0.0335%" height="15" fill="rgb(233,36,39)" fg:x="13233" fg:w="22"/><text x="20.4054%" y="111.50"></text></g><g><title>xas_load (7 samples, 0.01%)</title><rect x="20.2071%" y="85" width="0.0107%" height="15" fill="rgb(226,3,54)" fg:x="13267" fg:w="7"/><text x="20.4571%" y="95.50"></text></g><g><title>filemap_map_pages (288 samples, 0.44%)</title><rect x="19.7807%" y="117" width="0.4387%" height="15" fill="rgb(245,192,40)" fg:x="12987" fg:w="288"/><text x="20.0307%" y="127.50"></text></g><g><title>xas_find (11 samples, 0.02%)</title><rect x="20.2026%" y="101" width="0.0168%" height="15" fill="rgb(238,167,29)" fg:x="13264" fg:w="11"/><text x="20.4526%" y="111.50"></text></g><g><title>do_fault (313 samples, 0.48%)</title><rect x="19.7639%" y="149" width="0.4767%" height="15" fill="rgb(232,182,51)" fg:x="12976" fg:w="313"/><text x="20.0139%" y="159.50"></text></g><g><title>do_read_fault (311 samples, 0.47%)</title><rect x="19.7670%" y="133" width="0.4737%" height="15" fill="rgb(231,60,39)" fg:x="12978" fg:w="311"/><text x="20.0170%" y="143.50"></text></g><g><title>srso_alias_safe_ret (9 samples, 0.01%)</title><rect x="20.2269%" y="117" width="0.0137%" height="15" fill="rgb(208,69,12)" fg:x="13280" fg:w="9"/><text x="20.4769%" y="127.50"></text></g><g><title>handle_pte_fault (317 samples, 0.48%)</title><rect x="19.7639%" y="165" width="0.4828%" height="15" fill="rgb(235,93,37)" fg:x="12976" fg:w="317"/><text x="20.0139%" y="175.50"></text></g><g><title>__handle_mm_fault (333 samples, 0.51%)</title><rect x="19.7411%" y="181" width="0.5072%" height="15" fill="rgb(213,116,39)" fg:x="12961" fg:w="333"/><text x="19.9911%" y="191.50"></text></g><g><title>handle_mm_fault (343 samples, 0.52%)</title><rect x="19.7365%" y="197" width="0.5224%" height="15" fill="rgb(222,207,29)" fg:x="12958" fg:w="343"/><text x="19.9865%" y="207.50"></text></g><g><title>asm_exc_page_fault (395 samples, 0.60%)</title><rect x="19.6756%" y="245" width="0.6016%" height="15" fill="rgb(206,96,30)" fg:x="12918" fg:w="395"/><text x="19.9256%" y="255.50"></text></g><g><title>exc_page_fault (395 samples, 0.60%)</title><rect x="19.6756%" y="229" width="0.6016%" height="15" fill="rgb(218,138,4)" fg:x="12918" fg:w="395"/><text x="19.9256%" y="239.50"></text></g><g><title>do_user_addr_fault (395 samples, 0.60%)</title><rect x="19.6756%" y="213" width="0.6016%" height="15" fill="rgb(250,191,14)" fg:x="12918" fg:w="395"/><text x="19.9256%" y="223.50"></text></g><g><title>lock_mm_and_find_vma (12 samples, 0.02%)</title><rect x="20.2589%" y="197" width="0.0183%" height="15" fill="rgb(239,60,40)" fg:x="13301" fg:w="12"/><text x="20.5089%" y="207.50"></text></g><g><title>find_vma (7 samples, 0.01%)</title><rect x="20.2665%" y="181" width="0.0107%" height="15" fill="rgb(206,27,48)" fg:x="13306" fg:w="7"/><text x="20.5165%" y="191.50"></text></g><g><title>mt_find (7 samples, 0.01%)</title><rect x="20.2665%" y="165" width="0.0107%" height="15" fill="rgb(225,35,8)" fg:x="13306" fg:w="7"/><text x="20.5165%" y="175.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (805 samples, 1.23%)</title><rect x="19.1882%" y="261" width="1.2261%" height="15" fill="rgb(250,213,24)" fg:x="12598" fg:w="805"/><text x="19.4382%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (90 samples, 0.14%)</title><rect x="20.2772%" y="245" width="0.1371%" height="15" fill="rgb(247,123,22)" fg:x="13313" fg:w="90"/><text x="20.5272%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned (238 samples, 0.36%)</title><rect x="20.4143%" y="261" width="0.3625%" height="15" fill="rgb(231,138,38)" fg:x="13403" fg:w="238"/><text x="20.6643%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_naive (3,187 samples, 4.85%)</title><rect x="20.7768%" y="261" width="4.8542%" height="15" fill="rgb(231,145,46)" fg:x="13641" fg:w="3187"/><text x="21.0268%" y="271.50">core::..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (13,451 samples, 20.49%)</title><rect x="5.3735%" y="309" width="20.4874%" height="15" fill="rgb(251,118,11)" fg:x="3528" fg:w="13451"/><text x="5.6235%" y="319.50">&lt;core::str::pattern::CharSearche..</text></g><g><title>core::slice::memchr::memchr (8,240 samples, 12.55%)</title><rect x="13.3105%" y="293" width="12.5505%" height="15" fill="rgb(217,147,25)" fg:x="8739" fg:w="8240"/><text x="13.5605%" y="303.50">core::slice::memchr..</text></g><g><title>core::slice::memchr::memchr_aligned (7,993 samples, 12.17%)</title><rect x="13.6867%" y="277" width="12.1742%" height="15" fill="rgb(247,81,37)" fg:x="8986" fg:w="7993"/><text x="13.9367%" y="287.50">core::slice::memch..</text></g><g><title>core::slice::memchr::repeat_byte (151 samples, 0.23%)</title><rect x="25.6309%" y="261" width="0.2300%" height="15" fill="rgb(209,12,38)" fg:x="16828" fg:w="151"/><text x="25.8809%" y="271.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,997 samples, 24.37%)</title><rect x="1.5505%" y="341" width="24.3652%" height="15" fill="rgb(227,1,9)" fg:x="1018" fg:w="15997"/><text x="1.8005%" y="351.50">&lt;core::str::iter::Split&lt;P&gt; as core::ite..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (15,997 samples, 24.37%)</title><rect x="1.5505%" y="325" width="24.3652%" height="15" fill="rgb(248,47,43)" fg:x="1018" fg:w="15997"/><text x="1.8005%" y="335.50">core::str::iter::SplitInternal&lt;P&gt;::next</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (36 samples, 0.05%)</title><rect x="25.8609%" y="309" width="0.0548%" height="15" fill="rgb(221,10,30)" fg:x="16979" fg:w="36"/><text x="26.1109%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (36 samples, 0.05%)</title><rect x="25.8609%" y="293" width="0.0548%" height="15" fill="rgb(210,229,1)" fg:x="16979" fg:w="36"/><text x="26.1109%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,077 samples, 1.64%)</title><rect x="40.1736%" y="309" width="1.6404%" height="15" fill="rgb(222,148,37)" fg:x="26376" fg:w="1077"/><text x="40.4236%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.02%)</title><rect x="41.7942%" y="293" width="0.0198%" height="15" fill="rgb(234,67,33)" fg:x="27440" fg:w="13"/><text x="42.0442%" y="303.50"></text></g><g><title>brc_rust::Map::hash (3,506 samples, 5.34%)</title><rect x="39.3755%" y="325" width="5.3400%" height="15" fill="rgb(247,98,35)" fg:x="25852" fg:w="3506"/><text x="39.6255%" y="335.50">brc_rus..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_mul (1,905 samples, 2.90%)</title><rect x="41.8140%" y="309" width="2.9015%" height="15" fill="rgb(247,138,52)" fg:x="27453" fg:w="1905"/><text x="42.0640%" y="319.50">co..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (603 samples, 0.92%)</title><rect x="44.7156%" y="325" width="0.9184%" height="15" fill="rgb(213,79,30)" fg:x="29358" fg:w="603"/><text x="44.9656%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (239 samples, 0.36%)</title><rect x="45.6340%" y="325" width="0.3640%" height="15" fill="rgb(246,177,23)" fg:x="29961" fg:w="239"/><text x="45.8840%" y="335.50"></text></g><g><title>[libc.so.6] (5,044 samples, 7.68%)</title><rect x="46.7200%" y="277" width="7.6826%" height="15" fill="rgb(230,62,27)" fg:x="30674" fg:w="5044"/><text x="46.9700%" y="287.50">[libc.so.6]</text></g><g><title>brc_rust::Map::get_mut (18,987 samples, 28.92%)</title><rect x="25.9158%" y="341" width="28.9194%" height="15" fill="rgb(216,154,8)" fg:x="17015" fg:w="18987"/><text x="26.1658%" y="351.50">brc_rust::Map::get_mut</text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (5,802 samples, 8.84%)</title><rect x="45.9980%" y="325" width="8.8371%" height="15" fill="rgb(244,35,45)" fg:x="30200" fg:w="5802"/><text x="46.2480%" y="335.50">core::str::t..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (5,802 samples, 8.84%)</title><rect x="45.9980%" y="309" width="8.8371%" height="15" fill="rgb(251,115,12)" fg:x="30200" fg:w="5802"/><text x="46.2480%" y="319.50">core::slice:..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (5,802 samples, 8.84%)</title><rect x="45.9980%" y="293" width="8.8371%" height="15" fill="rgb(240,54,50)" fg:x="30200" fg:w="5802"/><text x="46.2480%" y="303.50">&lt;u8 as core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (284 samples, 0.43%)</title><rect x="54.4026%" y="277" width="0.4326%" height="15" fill="rgb(233,84,52)" fg:x="35718" fg:w="284"/><text x="54.6526%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,888 samples, 2.88%)</title><rect x="68.4411%" y="325" width="2.8756%" height="15" fill="rgb(207,117,47)" fg:x="44935" fg:w="1888"/><text x="68.6911%" y="335.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (683 samples, 1.04%)</title><rect x="70.2764%" y="309" width="1.0403%" height="15" fill="rgb(249,43,39)" fg:x="46140" fg:w="683"/><text x="70.5264%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (206 samples, 0.31%)</title><rect x="71.0030%" y="293" width="0.3138%" height="15" fill="rgb(209,38,44)" fg:x="46617" fg:w="206"/><text x="71.2530%" y="303.50"></text></g><g><title>__powisf2 (833 samples, 1.27%)</title><rect x="71.3167%" y="325" width="1.2688%" height="15" fill="rgb(236,212,23)" fg:x="46823" fg:w="833"/><text x="71.5667%" y="335.50"></text></g><g><title>compiler_builtins::float::pow::__powisf2 (256 samples, 0.39%)</title><rect x="72.1956%" y="309" width="0.3899%" height="15" fill="rgb(242,79,21)" fg:x="47400" fg:w="256"/><text x="72.4456%" y="319.50"></text></g><g><title>compiler_builtins::float::pow::pow (256 samples, 0.39%)</title><rect x="72.1956%" y="293" width="0.3899%" height="15" fill="rgb(211,96,35)" fg:x="47400" fg:w="256"/><text x="72.4456%" y="303.50"></text></g><g><title>&lt;i32 as compiler_builtins::int::Int&gt;::abs_diff (256 samples, 0.39%)</title><rect x="72.1956%" y="277" width="0.3899%" height="15" fill="rgb(253,215,40)" fg:x="47400" fg:w="256"/><text x="72.4456%" y="287.50"></text></g><g><title>core::num::&lt;impl i32&gt;::wrapping_abs (256 samples, 0.39%)</title><rect x="72.1956%" y="261" width="0.3899%" height="15" fill="rgb(211,81,21)" fg:x="47400" fg:w="256"/><text x="72.4456%" y="271.50"></text></g><g><title>brc_rust::byte_to_float (11,710 samples, 17.84%)</title><rect x="54.8382%" y="341" width="17.8357%" height="15" fill="rgb(208,190,38)" fg:x="36004" fg:w="11710"/><text x="55.0882%" y="351.50">brc_rust::byte_to_float</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (57 samples, 0.09%)</title><rect x="72.5870%" y="325" width="0.0868%" height="15" fill="rgb(235,213,38)" fg:x="47657" fg:w="57"/><text x="72.8370%" y="335.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (57 samples, 0.09%)</title><rect x="72.5870%" y="309" width="0.0868%" height="15" fill="rgb(237,122,38)" fg:x="47657" fg:w="57"/><text x="72.8370%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (57 samples, 0.09%)</title><rect x="72.5870%" y="293" width="0.0868%" height="15" fill="rgb(244,218,35)" fg:x="47657" fg:w="57"/><text x="72.8370%" y="303.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (297 samples, 0.45%)</title><rect x="72.6738%" y="341" width="0.4524%" height="15" fill="rgb(240,68,47)" fg:x="47714" fg:w="297"/><text x="72.9238%" y="351.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (292 samples, 0.44%)</title><rect x="73.1262%" y="341" width="0.4447%" height="15" fill="rgb(210,16,53)" fg:x="48011" fg:w="292"/><text x="73.3762%" y="351.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (78 samples, 0.12%)</title><rect x="75.3195%" y="325" width="0.1188%" height="15" fill="rgb(235,124,12)" fg:x="49451" fg:w="78"/><text x="75.5695%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (214 samples, 0.33%)</title><rect x="75.4383%" y="325" width="0.3259%" height="15" fill="rgb(224,169,11)" fg:x="49529" fg:w="214"/><text x="75.6883%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,479 samples, 3.78%)</title><rect x="82.4842%" y="309" width="3.7758%" height="15" fill="rgb(250,166,2)" fg:x="54155" fg:w="2479"/><text x="82.7342%" y="319.50">core..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2,479 samples, 3.78%)</title><rect x="82.4842%" y="293" width="3.7758%" height="15" fill="rgb(242,216,29)" fg:x="54155" fg:w="2479"/><text x="82.7342%" y="303.50">core..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,479 samples, 3.78%)</title><rect x="82.4842%" y="277" width="3.7758%" height="15" fill="rgb(230,116,27)" fg:x="54155" fg:w="2479"/><text x="82.7342%" y="287.50">&lt;[A]..</text></g><g><title>[libc.so.6] (1,554 samples, 2.37%)</title><rect x="83.8931%" y="261" width="2.3669%" height="15" fill="rgb(228,99,48)" fg:x="55080" fg:w="1554"/><text x="84.1431%" y="271.50">[l..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,112 samples, 3.22%)</title><rect x="86.2600%" y="309" width="3.2168%" height="15" fill="rgb(253,11,6)" fg:x="56634" fg:w="2112"/><text x="86.5100%" y="319.50">cor..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,112 samples, 3.22%)</title><rect x="86.2600%" y="293" width="3.2168%" height="15" fill="rgb(247,143,39)" fg:x="56634" fg:w="2112"/><text x="86.5100%" y="303.50">&lt;co..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (150 samples, 0.23%)</title><rect x="90.3587%" y="277" width="0.2285%" height="15" fill="rgb(236,97,10)" fg:x="59325" fg:w="150"/><text x="90.6087%" y="287.50"></text></g><g><title>core::ptr::align_offset (150 samples, 0.23%)</title><rect x="90.3587%" y="261" width="0.2285%" height="15" fill="rgb(233,208,19)" fg:x="59325" fg:w="150"/><text x="90.6087%" y="271.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (46 samples, 0.07%)</title><rect x="90.5872%" y="277" width="0.0701%" height="15" fill="rgb(216,164,2)" fg:x="59475" fg:w="46"/><text x="90.8372%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (10 samples, 0.02%)</title><rect x="90.6420%" y="261" width="0.0152%" height="15" fill="rgb(220,129,5)" fg:x="59511" fg:w="10"/><text x="90.8920%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (19 samples, 0.03%)</title><rect x="90.6572%" y="277" width="0.0289%" height="15" fill="rgb(242,17,10)" fg:x="59521" fg:w="19"/><text x="90.9072%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_naive (1,201 samples, 1.83%)</title><rect x="90.6862%" y="277" width="1.8293%" height="15" fill="rgb(242,107,0)" fg:x="59540" fg:w="1201"/><text x="90.9362%" y="287.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (1,942 samples, 2.96%)</title><rect x="89.6017%" y="293" width="2.9579%" height="15" fill="rgb(251,28,31)" fg:x="58828" fg:w="1942"/><text x="89.8517%" y="303.50">cor..</text></g><g><title>core::slice::memchr::repeat_byte (29 samples, 0.04%)</title><rect x="92.5154%" y="277" width="0.0442%" height="15" fill="rgb(233,223,10)" fg:x="60741" fg:w="29"/><text x="92.7654%" y="287.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (13,369 samples, 20.36%)</title><rect x="75.7642%" y="325" width="20.3625%" height="15" fill="rgb(215,21,27)" fg:x="49743" fg:w="13369"/><text x="76.0142%" y="335.50">&lt;core::str::pattern::CharSearche..</text></g><g><title>core::slice::memchr::memchr (4,366 samples, 6.65%)</title><rect x="89.4768%" y="309" width="6.6499%" height="15" fill="rgb(232,23,21)" fg:x="58746" fg:w="4366"/><text x="89.7268%" y="319.50">core::sli..</text></g><g><title>core::slice::memchr::memchr_naive (2,342 samples, 3.57%)</title><rect x="92.5596%" y="293" width="3.5671%" height="15" fill="rgb(244,5,23)" fg:x="60770" fg:w="2342"/><text x="92.8096%" y="303.50">core..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (14,810 samples, 22.56%)</title><rect x="73.5709%" y="341" width="22.5573%" height="15" fill="rgb(226,81,46)" fg:x="48303" fg:w="14810"/><text x="73.8209%" y="351.50">core::str::&lt;impl str&gt;::split_once</text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (222 samples, 0.34%)</title><rect x="97.0315%" y="309" width="0.3381%" height="15" fill="rgb(247,70,30)" fg:x="63706" fg:w="222"/><text x="97.2815%" y="319.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (222 samples, 0.34%)</title><rect x="97.0315%" y="293" width="0.3381%" height="15" fill="rgb(212,68,19)" fg:x="63706" fg:w="222"/><text x="97.2815%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (222 samples, 0.34%)</title><rect x="97.0315%" y="277" width="0.3381%" height="15" fill="rgb(240,187,13)" fg:x="63706" fg:w="222"/><text x="97.2815%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (222 samples, 0.34%)</title><rect x="97.0315%" y="261" width="0.3381%" height="15" fill="rgb(223,113,26)" fg:x="63706" fg:w="222"/><text x="97.2815%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (222 samples, 0.34%)</title><rect x="97.0315%" y="245" width="0.3381%" height="15" fill="rgb(206,192,2)" fg:x="63706" fg:w="222"/><text x="97.2815%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (222 samples, 0.34%)</title><rect x="97.0315%" y="229" width="0.3381%" height="15" fill="rgb(241,108,4)" fg:x="63706" fg:w="222"/><text x="97.2815%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (222 samples, 0.34%)</title><rect x="97.0315%" y="213" width="0.3381%" height="15" fill="rgb(247,173,49)" fg:x="63706" fg:w="222"/><text x="97.2815%" y="223.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (244 samples, 0.37%)</title><rect x="97.3696%" y="261" width="0.3716%" height="15" fill="rgb(224,114,35)" fg:x="63928" fg:w="244"/><text x="97.6196%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (244 samples, 0.37%)</title><rect x="97.3696%" y="245" width="0.3716%" height="15" fill="rgb(245,159,27)" fg:x="63928" fg:w="244"/><text x="97.6196%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (244 samples, 0.37%)</title><rect x="97.3696%" y="229" width="0.3716%" height="15" fill="rgb(245,172,44)" fg:x="63928" fg:w="244"/><text x="97.6196%" y="239.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (305 samples, 0.46%)</title><rect x="97.3696%" y="277" width="0.4645%" height="15" fill="rgb(236,23,11)" fg:x="63928" fg:w="305"/><text x="97.6196%" y="287.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (61 samples, 0.09%)</title><rect x="97.7412%" y="261" width="0.0929%" height="15" fill="rgb(205,117,38)" fg:x="64172" fg:w="61"/><text x="97.9912%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (61 samples, 0.09%)</title><rect x="97.7412%" y="245" width="0.0929%" height="15" fill="rgb(237,72,25)" fg:x="64172" fg:w="61"/><text x="97.9912%" y="255.50"></text></g><g><title>core::str::validations::next_code_point_reverse (60 samples, 0.09%)</title><rect x="97.7427%" y="229" width="0.0914%" height="15" fill="rgb(244,70,9)" fg:x="64173" fg:w="60"/><text x="97.9927%" y="239.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (583 samples, 0.89%)</title><rect x="97.3696%" y="309" width="0.8880%" height="15" fill="rgb(217,125,39)" fg:x="63928" fg:w="583"/><text x="97.6196%" y="319.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (583 samples, 0.89%)</title><rect x="97.3696%" y="293" width="0.8880%" height="15" fill="rgb(235,36,10)" fg:x="63928" fg:w="583"/><text x="97.6196%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (278 samples, 0.42%)</title><rect x="97.8341%" y="277" width="0.4234%" height="15" fill="rgb(251,123,47)" fg:x="64233" fg:w="278"/><text x="98.0841%" y="287.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (303 samples, 0.46%)</title><rect x="98.2743%" y="261" width="0.4615%" height="15" fill="rgb(221,13,13)" fg:x="64522" fg:w="303"/><text x="98.5243%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (303 samples, 0.46%)</title><rect x="98.2743%" y="245" width="0.4615%" height="15" fill="rgb(238,131,9)" fg:x="64522" fg:w="303"/><text x="98.5243%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (303 samples, 0.46%)</title><rect x="98.2743%" y="229" width="0.4615%" height="15" fill="rgb(211,50,8)" fg:x="64522" fg:w="303"/><text x="98.5243%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (37 samples, 0.06%)</title><rect x="98.7373%" y="229" width="0.0564%" height="15" fill="rgb(245,182,24)" fg:x="64826" fg:w="37"/><text x="98.9873%" y="239.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.09%)</title><rect x="98.7358%" y="261" width="0.0883%" height="15" fill="rgb(242,14,37)" fg:x="64825" fg:w="58"/><text x="98.9858%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.09%)</title><rect x="98.7373%" y="245" width="0.0868%" height="15" fill="rgb(246,228,12)" fg:x="64826" fg:w="57"/><text x="98.9873%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (20 samples, 0.03%)</title><rect x="98.7937%" y="229" width="0.0305%" height="15" fill="rgb(213,55,15)" fg:x="64863" fg:w="20"/><text x="99.0437%" y="239.50"></text></g><g><title>core::str::validations::utf8_first_byte (10 samples, 0.02%)</title><rect x="98.8089%" y="213" width="0.0152%" height="15" fill="rgb(209,9,3)" fg:x="64873" fg:w="10"/><text x="99.0589%" y="223.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (373 samples, 0.57%)</title><rect x="98.2576%" y="277" width="0.5681%" height="15" fill="rgb(230,59,30)" fg:x="64511" fg:w="373"/><text x="98.5076%" y="287.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (409 samples, 0.62%)</title><rect x="98.2576%" y="309" width="0.6230%" height="15" fill="rgb(209,121,21)" fg:x="64511" fg:w="409"/><text x="98.5076%" y="319.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (409 samples, 0.62%)</title><rect x="98.2576%" y="293" width="0.6230%" height="15" fill="rgb(220,109,13)" fg:x="64511" fg:w="409"/><text x="98.5076%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (36 samples, 0.05%)</title><rect x="98.8257%" y="277" width="0.0548%" height="15" fill="rgb(232,18,1)" fg:x="64884" fg:w="36"/><text x="99.0757%" y="287.50"></text></g><g><title>[unknown] (65,160 samples, 99.25%)</title><rect x="0.0000%" y="373" width="99.2461%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="65160"/><text x="0.2500%" y="383.50">[unknown]</text></g><g><title>brc_rust::main (65,160 samples, 99.25%)</title><rect x="0.0000%" y="357" width="99.2461%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="65160"/><text x="0.2500%" y="367.50">brc_rust::main</text></g><g><title>core::str::&lt;impl str&gt;::trim (2,047 samples, 3.12%)</title><rect x="96.1282%" y="341" width="3.1178%" height="15" fill="rgb(240,125,3)" fg:x="63113" fg:w="2047"/><text x="96.3782%" y="351.50">cor..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1,811 samples, 2.76%)</title><rect x="96.4877%" y="325" width="2.7584%" height="15" fill="rgb(205,98,50)" fg:x="63349" fg:w="1811"/><text x="96.7377%" y="335.50">co..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (240 samples, 0.37%)</title><rect x="98.8805%" y="309" width="0.3655%" height="15" fill="rgb(205,185,37)" fg:x="64920" fg:w="240"/><text x="99.1305%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (240 samples, 0.37%)</title><rect x="98.8805%" y="293" width="0.3655%" height="15" fill="rgb(238,207,15)" fg:x="64920" fg:w="240"/><text x="99.1305%" y="303.50"></text></g><g><title>__tlb_remove_page_size (13 samples, 0.02%)</title><rect x="99.2552%" y="165" width="0.0198%" height="15" fill="rgb(213,199,42)" fg:x="65166" fg:w="13"/><text x="99.5052%" y="175.50"></text></g><g><title>_compound_head (12 samples, 0.02%)</title><rect x="99.2750%" y="165" width="0.0183%" height="15" fill="rgb(235,201,11)" fg:x="65179" fg:w="12"/><text x="99.5250%" y="175.50"></text></g><g><title>mark_page_accessed (16 samples, 0.02%)</title><rect x="99.2933%" y="165" width="0.0244%" height="15" fill="rgb(207,46,11)" fg:x="65191" fg:w="16"/><text x="99.5433%" y="175.50"></text></g><g><title>__mod_lruvec_page_state (22 samples, 0.03%)</title><rect x="99.5720%" y="149" width="0.0335%" height="15" fill="rgb(241,35,35)" fg:x="65374" fg:w="22"/><text x="99.8220%" y="159.50"></text></g><g><title>lock_page_memcg (25 samples, 0.04%)</title><rect x="99.6070%" y="149" width="0.0381%" height="15" fill="rgb(243,32,47)" fg:x="65397" fg:w="25"/><text x="99.8570%" y="159.50"></text></g><g><title>__mod_memcg_lruvec_state (35 samples, 0.05%)</title><rect x="99.8233%" y="101" width="0.0533%" height="15" fill="rgb(247,202,23)" fg:x="65539" fg:w="35"/><text x="100.0733%" y="111.50"></text></g><g><title>cgroup_rstat_updated (10 samples, 0.02%)</title><rect x="99.8614%" y="85" width="0.0152%" height="15" fill="rgb(219,102,11)" fg:x="65564" fg:w="10"/><text x="100.1114%" y="95.50"></text></g><g><title>__mod_node_page_state (7 samples, 0.01%)</title><rect x="99.8766%" y="101" width="0.0107%" height="15" fill="rgb(243,110,44)" fg:x="65574" fg:w="7"/><text x="100.1266%" y="111.50"></text></g><g><title>__mod_lruvec_state (64 samples, 0.10%)</title><rect x="99.7959%" y="117" width="0.0975%" height="15" fill="rgb(222,74,54)" fg:x="65521" fg:w="64"/><text x="100.0459%" y="127.50"></text></g><g><title>__mod_lruvec_page_state (100 samples, 0.15%)</title><rect x="99.7548%" y="133" width="0.1523%" height="15" fill="rgb(216,99,12)" fg:x="65494" fg:w="100"/><text x="100.0048%" y="143.50"></text></g><g><title>srso_alias_safe_ret (7 samples, 0.01%)</title><rect x="99.8964%" y="117" width="0.0107%" height="15" fill="rgb(226,22,26)" fg:x="65587" fg:w="7"/><text x="100.1464%" y="127.50"></text></g><g><title>lock_page_memcg (11 samples, 0.02%)</title><rect x="99.9101%" y="133" width="0.0168%" height="15" fill="rgb(217,163,10)" fg:x="65596" fg:w="11"/><text x="100.1601%" y="143.50"></text></g><g><title>folio_memcg_lock.part.0 (11 samples, 0.02%)</title><rect x="99.9101%" y="117" width="0.0168%" height="15" fill="rgb(213,25,53)" fg:x="65596" fg:w="11"/><text x="100.1601%" y="127.50"></text></g><g><title>page_remove_rmap (182 samples, 0.28%)</title><rect x="99.6527%" y="149" width="0.2772%" height="15" fill="rgb(252,105,26)" fg:x="65427" fg:w="182"/><text x="99.9027%" y="159.50"></text></g><g><title>free_pages_and_swap_cache (33 samples, 0.05%)</title><rect x="99.9315%" y="117" width="0.0503%" height="15" fill="rgb(220,39,43)" fg:x="65610" fg:w="33"/><text x="100.1815%" y="127.50"></text></g><g><title>release_pages (14 samples, 0.02%)</title><rect x="99.9604%" y="101" width="0.0213%" height="15" fill="rgb(229,68,48)" fg:x="65629" fg:w="14"/><text x="100.2104%" y="111.50"></text></g><g><title>tlb_flush_mmu (37 samples, 0.06%)</title><rect x="99.9299%" y="149" width="0.0564%" height="15" fill="rgb(252,8,32)" fg:x="65609" fg:w="37"/><text x="100.1799%" y="159.50"></text></g><g><title>tlb_batch_pages_flush (37 samples, 0.06%)</title><rect x="99.9299%" y="133" width="0.0564%" height="15" fill="rgb(223,20,43)" fg:x="65609" fg:w="37"/><text x="100.1799%" y="143.50"></text></g><g><title>all (65,655 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="65655"/><text x="0.2500%" y="415.50"></text></g><g><title>brc-rust (65,655 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="65655"/><text x="0.2500%" y="399.50">brc-rust</text></g><g><title>entry_SYSCALL_64_after_hwframe (494 samples, 0.75%)</title><rect x="99.2476%" y="373" width="0.7524%" height="15" fill="rgb(249,185,26)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="383.50"></text></g><g><title>do_syscall_64 (494 samples, 0.75%)</title><rect x="99.2476%" y="357" width="0.7524%" height="15" fill="rgb(249,174,33)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="367.50"></text></g><g><title>__x64_sys_exit_group (494 samples, 0.75%)</title><rect x="99.2476%" y="341" width="0.7524%" height="15" fill="rgb(233,201,37)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="351.50"></text></g><g><title>do_group_exit (494 samples, 0.75%)</title><rect x="99.2476%" y="325" width="0.7524%" height="15" fill="rgb(221,78,26)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="335.50"></text></g><g><title>do_exit (494 samples, 0.75%)</title><rect x="99.2476%" y="309" width="0.7524%" height="15" fill="rgb(250,127,30)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="319.50"></text></g><g><title>exit_mm (494 samples, 0.75%)</title><rect x="99.2476%" y="293" width="0.7524%" height="15" fill="rgb(230,49,44)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="303.50"></text></g><g><title>mmput (494 samples, 0.75%)</title><rect x="99.2476%" y="277" width="0.7524%" height="15" fill="rgb(229,67,23)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="287.50"></text></g><g><title>__mmput (494 samples, 0.75%)</title><rect x="99.2476%" y="261" width="0.7524%" height="15" fill="rgb(249,83,47)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="271.50"></text></g><g><title>exit_mmap (494 samples, 0.75%)</title><rect x="99.2476%" y="245" width="0.7524%" height="15" fill="rgb(215,43,3)" fg:x="65161" fg:w="494"/><text x="99.4976%" y="255.50"></text></g><g><title>unmap_vmas (492 samples, 0.75%)</title><rect x="99.2506%" y="229" width="0.7494%" height="15" fill="rgb(238,154,13)" fg:x="65163" fg:w="492"/><text x="99.5006%" y="239.50"></text></g><g><title>unmap_single_vma (492 samples, 0.75%)</title><rect x="99.2506%" y="213" width="0.7494%" height="15" fill="rgb(219,56,2)" fg:x="65163" fg:w="492"/><text x="99.5006%" y="223.50"></text></g><g><title>unmap_page_range (492 samples, 0.75%)</title><rect x="99.2506%" y="197" width="0.7494%" height="15" fill="rgb(233,0,4)" fg:x="65163" fg:w="492"/><text x="99.5006%" y="207.50"></text></g><g><title>zap_pmd_range.isra.0 (492 samples, 0.75%)</title><rect x="99.2506%" y="181" width="0.7494%" height="15" fill="rgb(235,30,7)" fg:x="65163" fg:w="492"/><text x="99.5006%" y="191.50"></text></g><g><title>zap_pte_range (441 samples, 0.67%)</title><rect x="99.3283%" y="165" width="0.6717%" height="15" fill="rgb(250,79,13)" fg:x="65214" fg:w="441"/><text x="99.5783%" y="175.50"></text></g></svg></svg>